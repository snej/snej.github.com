---
-
  ID: 2
  post_author: 1
  post_date: "2009-06-17 09:30:56"
  post_date_gmt: "2009-06-17 16:30:56"
  post_content: "This is the blog of Jens Alfke.\r\n\r\n<strong>Introverted, intuitive, thinking, perceiving.</strong> I live to make things: most often software, sometimes designs or mixes or stories or photos. (I wish I could make music.)\r\n\r\n<strong>Father, husband.</strong> My home is a nest of family. Outside is overrun with flowers and vines and shade trees, inside with books and CDs and kidsâ€™ drawings and game pieces and game cartridges.\r\n\r\n<strong>Worker, dreamer.</strong> Iâ€™m driven by visions of things that could be.\r\n\r\n<h2>Contact</h2>\r\n\r\nSend friendly correspondence to <tt>thought-palace</tt> at this domain."
  post_title: "About"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "about"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-06 21:47:36"
  post_modified_gmt: "2009-09-07 04:47:36"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?page_id=2"
  menu_order: 0
  post_type: "page"
  post_mime_type: ""
  comment_count: 0
-
  ID: 327
  post_author: 1
  post_date: "2009-09-06 18:20:44"
  post_date_gmt: "2009-09-07 01:20:44"
  post_content: "This is the blog of Jens Alfke.\r\n\r\n<strong>Introverted, intuitive, thinking, perceiving.</strong> I live to make things: most often software, sometimes designs or mixes or stories or photos. (I wish I could make music.)\r\n\r\n<strong>Father, husband.</strong> My home is a nest of family. Outside is overrun with flowers and vines and shade trees, inside with books and CDs and kidsâ€™ drawings and game pieces and game cartridges.\r\n\r\n<strong>Worker, dreamer.</strong> Iâ€™m driven by visions of things that could be.\r\n\r\n<h3>Contact</h3>\r\n\r\nSend friendly correspondence to <tt>thought-palace</tt> at this domain."
  post_title: "About"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "2-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-06 18:20:44"
  post_modified_gmt: "2009-09-07 01:20:44"
  post_content_filtered: ""
  post_parent: 2
  guid: "http://jens.mooseyard.com/2009/09/2-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 328
  post_author: 2
  post_date: "2009-09-06 22:11:32"
  post_date_gmt: "2009-09-07 05:11:32"
  post_content: "I finally bit the bullet and upgraded to the latest WordPress from the seriously prehistoric version I used to run (I think it was 2.0.4 or something like that.) With the current attacks against older versions, it finally seemed like a worthwhile thing to waste an afternoon on. :-P\r\n\r\nAlmost everything should work more or less the same. I've taken the opportunity to move to a subdomain -- jens.mooseyard.com -- but the old URLs redirect. The theme is different, because my hacked-up, customized old theme probably wouldn't have survived the upgrade intact. I can't say I like this one better, but it'll do.\r\n<!--more-->\r\nThe only data loss I know of is the email subscriptions. If you were subscribed to the comments of any prior post, that's gone now. If you still have something new to say, you can post it and check the \"Subscribe\" checkbox, and then you'll get emails again."
  post_title: "Long-Overdue Upgrade"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "long-overdue-upgrade"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 09:59:40"
  post_modified_gmt: "2009-09-07 16:59:40"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=328"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 329
  post_author: 2
  post_date: "2009-09-06 22:11:32"
  post_date_gmt: "2009-09-07 05:11:32"
  post_content: "I finally bit the bullet and upgraded to the latest WordPress from the seriously prehistoric version I used to run (I think it was 2.0.4 or something like that.) With the current attacks against older versions, it finally seemed like a worthwhile thing to waste an afternoon on. :-P\n\nAlmost everything should work more or less the same. I've taken the opportunity to move to a subdomain -- jens.mooseyard.com -- but the old URLs redirect. The theme is different, because my hacked-up, customized old theme probably wouldn't have survived the upgrade intact. I can't say I like this one better, but it'll do.\n<!--more-->\nThe only data loss I know of is the email subscriptions. If you were subscribed to the comments of any prior post, that's gone now. If you still have something new to say, you can post it and check the \"Subscribe\" checkbox, and then you'll get emails again."
  post_title: "Long-Overdue Upgrade"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "328-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-06 22:11:32"
  post_modified_gmt: "2009-09-07 05:11:32"
  post_content_filtered: ""
  post_parent: 328
  guid: "http://jens.mooseyard.com/2009/09/328-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 193
  post_author: 2
  post_date: "2005-02-13 11:11:21"
  post_date_gmt: "2005-02-13 18:11:21"
  post_content: "<p><font size=\"+1\">\nNot pink yet, she: bloody red.\nNot one to be held back, she, even by the host's noose,\neven by constraints of brute geometry.\nHer universe distended, tore and bled for her.</font></p><p><font size=\"+1\">Thus the advent of the smallest unstoppable force:\nwee Alba hurled through the plate glass into life,\nnow fixes us with a blue gaze,\nher raised arms encompassing it all,\nand says â€œI am an old soul. I'm back now.â€</font></p>"
  post_title: "For Alba"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "for-alba"
  to_ping: ""
  pinged: ""
  post_modified: "2005-02-13 11:11:21"
  post_modified_gmt: "2005-02-13 18:11:21"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2005/02/for-alba/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 194
  post_author: 2
  post_date: "2005-06-15 00:01:04"
  post_date_gmt: "2005-06-15 07:01:04"
  post_content: "Much of what I'm consumed with (at work) boils down to a question of: what is the right <i>shape</i> for the small but plentiful bits of writing that we are all creating daily? Here <i>shape</i> means largely visual representation but also sequencing and topology.\n\nIt's a problem of hypertext, primarily. The World Wide Web established one shape for hypertext: individual pages with one-way links in the text, replacing one another in a back-forwards chain. It's proven to be a pretty good shape, but it's not the only one, and earlier thinkers like Engelbart and Nelson had lots of other ideas.\n<!--more-->\n\n\nThe texts I'm thinking of are, as I said, 'bits'. Smaller than pages, mostly. Notes, posts, comments. Again, blogs established a shape for these: aggregated into [reverse-]chronological series of boxes on web pages, linking to their own pages, with [forward(!)-]chronological series of comments.\n\nFor a long time I've loved this idea of a vertical flow of boxes of text, each box big enough to hold its contents, no more. For a time, around 1988, I wrote people letters in the form of stacks of index cards, with a different thought on each card. After I finished the first release of Stickies, in 1995, I started to design a new version with container windows for stickies, where they could be peeled off the desktop and live in a slightly more structured space; but I lost the code in a disk crash and lost heart. When I saw LiveJournal in 2001 I saw this idea implemented on the web: you type, and when you're done it's in a neat box on the page, above the other boxes you wrote before.\n\n(And yes, I did get to implement boxes-o-text, first at the micro-level in iChat, after doodling those balloons in 1997. Then in Safari RSS, even if they're only boxes of <i>other people's</i> words.)\n\nBut that's not enough. The text is, after all, hyper-, and resists being constrained into one dimension. The comments and categories stick out and threaten to turn into trees, and beneath it all, everyone's trees of text have root systems that entangle with each other. On another tack, wikis are fascinating messes that are nothing but tangled roots, messy drawers. You can aggregate this stuff with RSS and turn it back into lines, but no matter what you do it won't lie flat.\n\nWhen I focus on this problem, it's a yearning. It's a deep-seated irrational conviction that there's an <i>answer</i> that I should be able to see. But as with all mystical problems, the answer that can be seen is not the true answer. I sketch one on paper or try to implement one or try out the 30-day free demo of someone else's ... but they're not the true shape. <a href=\"http://mooseyard.com/Jens/1995/08/piling-up-sheets-the-face-in-the-soup-bowl\">As I put it ten years ago</a>:\n\n<i>There's a character in William Gibson's </i>Mona Lisa Overdrive<i> who believes that cyberspace (the Net, the sum total of everyone's data and whatever else lives out there) has a Shape, some sort of higher-dimensional transcendent pattern, and lives his life in an obsessive attempt to hack together software that will display that Shape to him. Needless to say he comes to a bad end.</i>"
  post_title: "Little Boxes Of Words"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "little-boxes-of-words"
  to_ping: ""
  pinged: ""
  post_modified: "2005-06-15 00:01:04"
  post_modified_gmt: "2005-06-15 07:01:04"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2005/06/little-boxes-of-words/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 195
  post_author: 2
  post_date: "2005-06-28 13:48:21"
  post_date_gmt: "2005-06-28 20:48:21"
  post_content: "\"Lua\":http://www.lua.org/ is an interesting scripting language. I can't say I have much familiarity with it; I've only read the \"book\":http://www.inf.puc-rio.br/~roberto/book/, and a couple of papers, and downloaded and built the interpreter (which takes less than a minute). But what I've seen of it gives me a warm feeling, like reading a concise little poem, a haiku. It's a small language, but what's there is well-considered, and it appears that you can build bigger things (like object models, whether class- or prototype-based) out of its building blocks pretty easily.\n\nThe implementation of the Lua 5.0 runtime is also interesting, as described in \"an excellent paper\":http://www.tecgraf.puc-rio.br/~lhf/ftp/doc/sblp2005.pdf. One of the smaller details that's been fascinating me is that Lua, it turns out, uses unique string objects.\n\nWhen you use any kind of garbage-collected (or ref-counted) framework, string objects accumulate like dust bunnies. I've profiled Java apps and seen tens of thousands of instances of java.lang.String. Cocoa apps also have large numbers of NSStrings lying around. Some of these are temporary strings that just haven't been garbage-collected (or drained from an autorelease pool) yet; but I think a lot more of them are duplicates.\n\nLua's approach, which I have to say I hadn't thought of before, is to make all string instances unique: there are never two different string objects with the same contents. In practice this means that the runtime maintains a big hash table (a Set) of weak references to all the string objects, so before it creates a new string it can first check if one with the same contents already exists. This seems kind of expensive. But consider the advantages:\n\n* You save memory because there are never duplicate copies of a string lying around. This is a big deal: I know that OS X in particular tends to be RAM-constrained, and often the best way to make something run faster is to reduce its footprint.\n* Allocating fewer objects means less work for the garbage collector.\n* Comparing strings, an extremely common operation, is practically free: it's a simple pointer compare.\n* It's easy to implement the Big Hashtable such that the hash codes live inside the string objects themselves. This speeds up the use of these strings as keys for other hash tables, since you don't have to spend time hashing them over and over. This is a big deal in Lua since its only data structure is a PHP-like combination hashtable/array, which is used everywhere.\n\nOne of the secondary issues, which only occurred to me after a little further reflection, is that this really works only if strings are all _immutable_. Otherwise you can take one string and change it to be identical to another string, yet still a distinct object. This is a bit of a drawback; I have to say that I prefer the Cocoa API, where the immutable NSString has a subclass NSMutableString, to the Java API where the mutable StringBuffer class is not type-compatible with the regular String. (Speaking of which, a \"Lua tech note\":http://www.lua.org/notes/ltn009.html presents a typically elegant way to implement an efficient appendable string buffer.)\n\nI wouldn't be at all surprised if the unique-strings approach predates Lua, perhaps going back to some primordial string-processing language like SNOBOL. Still, it was new to me, and it's been interesting to think about."
  post_title: "Lua and unique strings"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "lua-and-unique-strings"
  to_ping: ""
  pinged: ""
  post_modified: "2005-06-28 13:48:21"
  post_modified_gmt: "2005-06-28 20:48:21"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2005/06/lua-and-unique-strings/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 196
  post_author: 2
  post_date: "2005-06-29 13:48:20"
  post_date_gmt: "2005-06-29 20:48:20"
  post_content: "Just when it seemed, a decade ago, that the programming world had settled on C++ as the _lingua franca_, the One Language To Rule Them All, instead we got an explosion of new high-level languages that have risen to popularity. Why did this happen? Chiefly because the World-Wide Web has conditioned users to expect five-second delays before any responses to their actions, which provides an environment ideally suited for interpreted, garbage-collected scripting languages. This movement has been encouraged by server vendors like Sun and IBM who are eager to show Web developers the productivity increases they can get by using such languages, especially after they then install massively powerful servers.\n<!--more-->\n\n\nIn addition to the mainstream scripting languages like Perl, PHP, Python, PavaScript, and Pruby, there are other ones that are less well known, mostly because their names don't begin with \"P\". I've been looking into several of these more obscure languages lately, partly because I hate doing the same things most other people do, but mostly because I love buying those O'Reilly books with the cute animals on the covers.\n\nIn the interest of popularizing these languages (because I'm already tired of them and need a good excuse to abandon them as \"too mainstream\"), I thought I'd devote a few posts to some of the most notable ones. Here's the first installment.\n\nh3. VISUAL H4X1C\n\nYou've heard of \"script kiddies\":http://en.wikipedia.org/wiki/Script_kiddie ? Well, this is the language they script in, one specially designed not for _building_ websites but for _attacking_ them. Visual H4x1c can really only be fully appreciated in its own IDE, in which the characters rain down in phosphor green on a black background (whoaaa!) but I'll show a brief hack here in plain text form. (Besides, I have to say that I found the IDE a pain to use, since it can only be run as root.)\n\n<blockquote><p><font size=\"-1\"><pre>\n10 R3M B0NECUTTER VERSION 3.2B5\n20 R3M COPYRIGHT 2005 BY THE SHADOWY LEGION OF CHAOTIC RETRIBUTION\n30 R3M THIS SOURCE CODE MAY ONLY BE POSTED ON 2600.ORG AND GAMEFAQS.COM\n40 R3M WRITTEN BY BOBBY NEWMARK, AGE 13\n50 R3M\n60 IF NOT PWNZ0R \"www.microsoft.com\" THEN 99\n60 D3F4CE \"HELLO WORLD HOW ARE YOU!! \";\n70 D3F4CE \"YOU HAVE NO CHANCE TO SURVIVE MAKE YOUR TIME!\"\n80 D3F4CE \"ALL YOUR WEBSITE ARE BELONG TO THE SHADOWY LEGION!!!!!11 \"\n90 G0T0 60\n99 3ND\n</pre><p></p></font></p></blockquote>\n\nAs you can see, the high-level built-in statements like OWN and DEFACE (thoughtfully, all keywords can be written in either English or L33T5p33k) make everyday hacking tasks a breeze. Accordingly, Visual H4x1c is quickly gaining mindshare among today's most feared hackers, who need to multitask a heavy workload of site intrusions, virus development, and English term papers.\n\nI tried Visual H4x1c briefly, and in an evening was able to repurpose whitehouse.gov as a clearinghouse for gigabytes of Serbian hardcore pr0n, and to write a virus that, by targeting vulnerabilities in Minesweeper, knocked out the Northeastern US power grid for over a week last January, causing widespread social disruption. So I'd have to say that much of the hype about this new language is justified.\n\nNevertheless, the language has some quirks that annoyed me. For example, all data structures (strings, arrays, credit card databases) in Visual H4x1c are immutable and fixed-size, so you must store values in them by means of buffer-overrun attacks. Of course the language is ideally suited for creating such attacks, but I still found this requirement clumsy, and conducive to hard-to-maintain code. Moreover, as newer versions of Visual H4x1c are released (in the form of automatic patches) the data structures tend to add defenses against earlier attacks, which often breaks your scripts until you rewrite them to exploit new vulnerabilities in the runtime."
  post_title: "Lesser-known scripting languages"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "lesser-known-scripting-languages"
  to_ping: ""
  pinged: ""
  post_modified: "2005-06-29 13:48:20"
  post_modified_gmt: "2005-06-29 20:48:20"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2005/06/lesser-known-scripting-languages/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 197
  post_author: 2
  post_date: "2005-12-02 00:22:26"
  post_date_gmt: "2005-12-02 07:22:26"
  post_content: "I write code for a living. After all these years I still find it really exciting -- I was instantly and permanently addicted at age 11, it's just that the programs have gone from 20-line BASIC powers-of-two table printers, to enormous Java and Objective-C juggernauts -- and moreover I've found it's the one thing that I can work on consistently enough over a long period of time to finish a project of any size. My childhood was littered with unfinished stories, unfinished plans for undersea cities, unfinished D&D maps. But the programs got finished. (Most of the time.)\n\nHerewith, entirely too much detail about the different programs people have paid me to write. Read on if you want, but you're in the driver's seat so feel free to hit that Back button if your eyes glaze over...<!--break-->\n\nI went through the usual sequence of summer jobs, most interestingly three at Xerox where I wrote cool stuff in Smalltalk-80. There was a low point in '87-'88 when I had just moved to Tucson and was intermittently under- and un-employed (which did give me the time to learn Mac programming and write an interesting compiler) but after that the career swung into action.\n\nh2. ATF Type Designer\n\nAt *Kingsley/ATF Type Corporation* (no, I didn't expect you to have heard of them, unless you're well versed in the history of typography) I wrote a typeface digitization tool, *ATF Type Designer*, for the company to use in converting their priceless legacy of metal type masters (Caslon 471, Agency Gothic, Bernhard Modern, ...) into PostScript and TrueType. The typefaces were classics, undergoing a revival in the late '80s, and my program was pretty spiffy, I thought. I got to write it all by myself, and it was being used in-house so I had users practically from day one, whose comments and suggestions helped make the program better. My co-workers were a fun and creative bunch.\n\nToo bad I had a boss from hell and the management didn't understand the computer industry. (Actually that's unfair; the main problem was a lack of money, and the owners of the company had no interest in getting venture capital.) So I left after two years, a decision made easier by Tucson's awful summer climate.\n\n(Incidentally, you can make a lot of amusing [[anagrams]] from the letters in \"Kingsley/ATF\" and \"Kingsley/ATF Type Corp.\".)\n\nh2. Wallpaper\n\nRewind a year or so; after buying a Mac IIcx I was frustrated that there was no way to create desktop patterns larger than 8x8 pixels, even though QuickDraw supported larger sizes. So I started writing a small program called *Wallpaper* to edit and install large patterns. It was going to be shareware, until a wannabe-software publisher saw a copy and asked to publish it. This led to about two and a half years of increasingly unhappy spare time work in which I learned that I had trouble working consistently in my spare time, the program grew steadily larger and more complex (there was that animated about box...), and relations with the publisher became emotionally fraught.\n\nWallpaper did ship, in January 1992, after Jeremy Bornstein and Anne Jones stepped in and spent entirely too much time finishing it, but all in all it ended up as kind of an unhappy experience. In particular, it pointed out the horrible problems of the software business in the pre-Web days: a product was utterly dependent on physical distribution, on shelves or in the pages of mail-order catalogs, but the costs of getting that distribution were outrageous, especially for inexpensive software. By all rights Wallpaper should have cost $20, but to have any chance of making a profit it needed to retail for double that; and even then, the profits were minimal despite good publicity and healthy sales.\n\nh2. AppleScript\n\nAfter leaving Tucson and K/ATF, I went to Apple Computer (which you may have heard of) and have been there ever since [with one small hiatus, q.v.]\n\nThe first project I worked on [1991-93] was *AppleScript*, a high-level scripting language for the MacOS. It's built on top of Apple Events, a robust interprocess communication protocol, so its strengths are in tying scriptable applications together. AppleScript has an English-like syntax (similar to HyperCard's scripting language) with Japanese-like and French-like alternate syntaxes also available. The syntax of the language is extended by applications, so scripts that tell a particular application what to do can use its vocabulary.\n\nI participated in the design of AppleScript, including the Open Scripting Architecture (OSA) API. I wrote the Script Editor that ships with AppleScript (it's pretty basic, but it works) and wrote the shell that supports script applications or applets, which are scripts saved as applications that can be run by launching them from the desktop.\n\nbq. [Apple's marketing group and the  [mis]managers of the tools group didn't really understand  AppleScript and gave it little or no promotion. So most of the  team quit and the rest moved to other projects. Fortunately, two  of the first scriptable apps were QuarkXPress and FileMaker Pro,  which together with AppleScript made a dy-no-mite automated  publishing solution. AppleScript spread as a cult, and entire  service bureaus and publishers ended up automating their work  around it. By the time Apple realized what was going on,  AppleScript turned out to be literally one of the major things  saving Apple's butt in the publishing world -- there was nothing like it on Windows. Starting in 1997 AppleScript got revived and  has since prospered.]\n\nh2. Stickies\n\nI invented & wrote the *Stickies* utility which is included with MacOS system software 7.5 and later. It's a simple but useful doodad that simulates Post-It(tm) notes on your screen. It was originally going to be shareware (does this sound familiar? I have yet to finish a shareware project as such) but the system software people saw it and \"they made me an offer I couldn't refuse\":/Jens/1997/04/they-made-me-an-offer-i-couldnt-refuse...\n\nThe official (pre-Mac OS X) Stickies easter egg: Type the word \"Antler!\" into any open note, capitalized as shown, then press Return. (For best effect, first resize the note to at least two inches on a side.) Like those rub-on tattoos, the effect is harmless and temporary and will go away when you close the note or quit Stickies.\n\nStickies has even made it into OS X. It was rewritten in the Cocoa (nÃ©e OpenStep) framework by some talented people in Ireland, so it doesn't share a lot of code with my version, but the design is basically the same. (It supports styled text and images, though!) I did add a few simple features for Jaguar (OS X 10.2), like floating and translucent notes.\n\nh2. OpenDoc\n\nI worked on *OpenDoc* from August 1993 until its death in March 1997. OpenDoc was an open, cross-platform compound document architecture featuring structured storage and sophisticated layout negotiation for software components.\n\n...In other words, a way to mix and match any kind of editable content in a document, where different editor components from different vendors can co-exist. The terms content and document should be considered very generally; OpenDoc was usable for much more than text and spreadsheet data in a page layout.\n\nThe eventual goal was that monolithic applications that try to do everything at once would generally be replaced by suites of components, or parts, each managing a very specific task with very specific types of data.\n\nbq. [This hasn't happened, even though  the superficially-similar ActiveX and Java Beans technologies are  still around. The component software that exists today is aimed at  developers, not end users: the developers put together  micro-components like table views or database widgets into  applications, but to the end user the result is still a monolithic  app. OpenDoc was about letting users combine components in  the same intuitive way that they combine data into documents. I  don't know if this goal will ever be resurrected. For the most  part, the momentum of software design has shifted away from  document-oriented desktop software, towards Web-based  client-server stuff. OpenDoc revolutionized documents at the very  time that documents ceased to be sexy to anyone but the  bean-counters at Microsoft's Office division.]\n\nOh yes: what pieces of the pie did I work on? For OpenDoc 1.0, I was responsible for OpenDoc's imaging classes (shapes, transforms and the like) as well as OpenDoc's memory manager and exception handler, and our grab-bag of utilities. I also worked on size/speed optimization, and fixing lingering low-memory bugs. I did a few months' work building a framework for use by the Parts team for the OpenDoc Essentials Kit. I did some further optimizations for OpenDoc 1.1 and 1.2, but from May 1996 on I focused mostly on Java, both investigation and building a prototype.\n\nOn March 14th, 1997 it was announced that Apple was suspending new development on OpenDoc. Later that month IBM (the remaining partner) made a similar announcement. Oh well. After moping about for a month, I decided that a change of scene was in order and this was a good time to move on...\n\nh2. Novita Communications\n\nIn May 1997 I became employee #16 of Novita Communications, a small Java startup located in Sunnyvale. Novita was developing Java-based Internet client applications for consumers, namely *NovitaMail*, a mail client with a simple browser-style UI and support for rich HTML-based content including pictures and embedded Java applets.\n\nbq. [NovitaMail was an extension of the  HotJava browser. It seems to me, though, that building a mail  client atop a web browser is exactly the wrong way to do it. You still have the page-flipping browser UI -- which isn't appropriate  for mail reading -- so you can't really do much better than any of  the ubiquitous web-based  mail services, but you don't get their  advantages: zero client admin, accessibility from any web browser  in the world. Moreover, this project was where I became acutely aware of Java's significant footprint and performance problems.  (Of course, this was back in the days of 16MB PCs!)]\n\nWhile there were lots of interesting things to do at Novita (once I got away from bug-fixing and into prototyping) it became more and more apparent that I missed working at a larger company; and the work environment at Novita was quieter and more formal than what I was used to or comfortable with. So after a mere four months I left for ...\n\nh2. Javasoft (a tiny little division of Sun Microsystems)\n\nOn 22 September 1997 I started work at Javasoft -- conveniently located right across the street from my former digs at Apple. I was in the Intranet Clients group, working on future technologies for the \"*HotJava Views*\":http://java.sun.com/products/hotjavaviews/index.html webtop client and possibly other products for internet-enabled devices, and deeply enmeshed in new Java technologies like Swing and the Java Activation Framework.\n\nWhen I originally wrote this (soon after I started at Sun) I wrote \"Javasoft has the energy and enthusiasm of the Old Apple\". Unfortunately it quickly turned out that it also has the chaos, lack of direction and counterproductive religious fervor of the Old Apple too. No one really had any idea of what HotJava Views should be used for, and it turned out to be huge and slow (unusably slow on Sun's \"JavaStation\" network computers, even with a then-mighty 64MB of RAM). Javasoft, or at least its marketing and upper management, took the \"write once run anywhere\" and \"100% Pure Java\" slogans too much to heart and actually believed that they expressed concrete truths rather than laudable goals.\n\nAnd I quickly discovered that -- despite Sun's self-righteous stance as the force of good against Microsoft -- in my own working life I would infinitely rather use a Microsoft operating system rather than Sun's.\n\nbq. [Working with a bunch of Unix geeks  -- who were all lovely people, I hasten to add -- was like  stepping back in time fifteen years, only instead of people  running 'csh' and 'vi' on a single VT220 terminal on their  desktop, they now had a nice 20\" color monitor displaying six or  seven VT220s running 'csh' and 'vi'. This is progress?? Unix geeks  are the Amish of the computer world.]\n\nBut of course I would still much, much rather use an Apple operating system (crashes, short filenames and all) than either a Sun, Microsoft or even Linux one.\n\nh2. Back at Apple, working on Java\n\nSo I came back to Apple, on 20 April 1998, and never looked back. (I very nearly went to Be instead, but ultimately decided [correctly, it turned out] that they were too unlikely to succeed, and that I really didn't want to go back to coding in C++. Sweet little OS, though.)\n\nI went to work in the Java group, on the *Mac OS Runtime for Java* (MRJ) product. (It used to be called that in the Classic OS days; in OS X it's just called \"Java\".) This is the mainstream Java runtime for Mac OS, so the group is largely responsible for how well Java applications and applets work for a significant fraction of the world's computer users. As the tech lead for Apple's implementation of AWT (the Java GUI framework, which has to interface with the native GUI frameworks), my first step was to nuke the old implementation and start over. In hindsight this was a really rash thing to do, and I had no idea of how many really trickly little bits of behavior we would need to rediscover and re-implement in the months to come. Nevertheless it was the right thing to do. By writing nearly all of the code in Java we got the job done pretty quickly and well, and the resulting release (MRJ 2.1) was very warmly received by Java developers since it ran AWT apps much more quickly and more compatibly than before.\n\nI then worked on the implementation of Java2 for Mac OS X. Part of the team ported Sun's JDK 1.2 for Solaris (Solaris is a kissing cousin to the \"Darwin\" underpinnings of OS X, they both being BSD-derived Unices) and the other part -- including me -- ported our class libraries to the modernized \"Carbon\" Mac OS APIs. It all turned out pretty well, although as usual the project was just a complete and utter mess for a long time during its development.\n\nh2. Radio Station\n\nAt one point (late 1999, I think, right after the SoundJam MP3 player shipped) I started collecting together all my favorite ambient music from various CDs and collecting the tracks on disk in MP3 format. And after that I wanted a way to broadcast these tracks so other people could listen to them. But the ShoutCast MP3 server only ran on Windoze and didn't have source available, and IceCast did but the source was deeply horrifying to behold (simply trying to configure the server on one of our PCs drove me into a rage.)\n\nSo of course I wrote my own. It turns out to be fairly easy to stream pre-encoded MP3 files, and it takes very little CPU horsepower. I wrote the server in Java and it worked fine. Eventually I added some bells and whistles like the ability to read the artist and track info from the ID3 tags in the file, and use them to update an HTML file so the machine could also serve the playlist.\n\nI wanted this to be an open source project, but The Man told me that wasn't happening, so instead it got released as \"sample code\":http://developer.apple.com/samplecode/Sample_Code/Java/JavaRadioStation.htm. You can download it, try it out, look at the code, improve it, release your own mods, sell it, whatever. Go crazy.\n\nh2. iChat\n\nI left the Java team in September 2000. Too many months working on porting the awful AWT API without benefit of any kind of specification or decent documentation; of dealing with indignant developers who discovered that our platform didn't reproduce a particularly essential bug in Sun's; of having my brain exploded by odd threading issues in Carbon; of tweaking frameworks so _other_ people could write their dumb apps instead of me getting to write my cool apps.\n\nI found a cool app to work on when I by chance discovered an Apple job opening for writing an instant messaging application. Having been excited by IM ever since my Novita days, I leapt at the chance and got the job, as part of the same team that builds OS X's Mail application. My first task was to take a week-long training course on \"Cocoa\":http://developer.apple.com/cocoa/, Apple's insanely cool object-oriented application frameworks based on NeXT's \"OpenStep\", which so totally kick black-clad Ninja ass over all other GUI frameworks I've used that it isn't even funny.\n\nWithin about _a week_ of taking the training class I had a little prototype I called \"Fezz\" that drew a chat as a series of colorful speech balloons. About a week after _that_ I had a buddy list that showed pictures and status messages for people. With some help from Eric Peyton I hooked my front end to the libfaim library (an ugly but functional open source reverse-engineered implementation of the AIM protocol) and had a useable IM client. Time to ship it!\n\nWell, in reality, there was about a year and a half of work still to be done. AIM started blocking 3rd party clients, so I switched to the open \"Jabber\":http://www.jabber.org/ protocol. Meanwhile Apple's negotiations with AOL continued. I added lots of features like chat rooms and file transfer and transmitting buddy icons. I helped out on *Address Book* and a little tiny bit on *Mail*.\n\nFinally in October 2001 the AOL contract was signed, we got AOL's official AIM library, and we were ready to go. Several more engineers were hired, I explained the code to everyone and we divvied up the work. There was re-architecting, gluing the AOL code into place, more features, and bug-fixing. And most importantly, the HI designers were now working on the look and feel and holding sÃ©ances with Steve Jobs every week to fine-tune everything. Keeping up with that is hard work, as features and behaviors changed on a week-by-week basis. But we managed to release *iChat* as part of the Jaguar release, OS X 10.2.\n\nAfter that we went on to iChat 2, which came to be called iChat AV since the major new feature was audio/visual conferencing. A group from the QuickTime team built the core AV framework and several of the iChat engineers integrated it in. I focused on some other new features, some of which shipped (like buddy groups) and others didn't, at least not yet. Oh, and lots of bug fixes!\n\nh2. Safari RSS\n\nYou know how it goes: I was frustrated with the direction of iChat (I admit that video conferencing is neat, but I'm not interested in implementing it); in fall 2003 I got wind of another exciting project; I did my song-and-dance routine involving showing the acting manager my knowledge of the topic and a demo of a prototype app I'd whipped up in my spare time. After many, many changes in direction, this project ended up being:\n\n<img src=\"http://images.apple.com/macosx/tiger/images/safaritop_20040628.jpg\" width=500/>\n\n\"Safari RSS\":http://www.apple.com/macosx/tiger/safari.html is an RSS/Atom news-reader and aggregator built into Apple's Safari web browser. It auto-detects news feeds, lets you toggle to the feed view, and lets you subscribe to feeds by bookmarking them. Subscribed feeds are updated in the background and saved in a database so you can read news while offline. A search field in the Safari toolbar lets you search the news database for keywords.\n\nTo tell the truth, I didn't join this project wanting to write a news-reader. But I learned a lot of interesting things in the process, such as SQL and SQLite (I _love_ SQLite) and AJAX.\n\nh2. And now?\n\nIt's December 2005 and time for another update. This spring I thought back to the ideas I had before the last project solidified as a news-reader -- in fact, ideas I've been having for years -- and started implementing them as an experimental project. I gave some demos, it got a good reception, and it's been working its way toward official status as a feature of Apple's next operating system, Leopard. As of this writing it's about 90% of the way to being approved. Wish me luck!"
  post_title: "Jens&#8217;s Tangled Job History"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "jenss-tangled-job-history"
  to_ping: ""
  pinged: ""
  post_modified: "2005-12-02 00:22:26"
  post_modified_gmt: "2005-12-02 07:22:26"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2005/12/jenss-tangled-job-history/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 198
  post_author: 2
  post_date: "2006-01-07 13:46:36"
  post_date_gmt: "2006-01-07 20:46:36"
  post_content: "Like most geeks, as a kid I not only despised the Cool Kids, but also wanted to be one of them too. My own school-age development trajectory took me from a state of total ignorance of what that required[1], to brave attempts to fit in[2], to a realization that different was cool[3].\n\nAnyway: these days being a Cool Kid is within every geek's reach. Perhaps that's because the shared culture has exploded into an uncountable number of fragments, each of which is a tribe with its own parallel hierarchies of coolness. Amen to that.\n<!--more-->\n Within the confines of geekery, even if I don't have a PGP key or submit patches to the Linux kernel or get Slashdotted, there are still subcultures of Cool Kids I can fit into.\n\nOne of my Geeky New Year's Resolutions[4] this year is to finally really learn \"Ruby On Rails\":http://rubyonrails.com, since it not only seems incredibly neat-o, but is also what all the cool kids seem to be into. So I bought \"Agile Web Development With Rails\":http://www.pragmaticprogrammer.com/titles/rails/index.html and have been plowing through it eagerly. I really appreciate that the book has both a lengthy tutorial _and_ a series of later chapters explaining all of the components of the architecture in detail. I find that I learn best by reading about things in depth after getting my feet wet, and the online Rails docs don't seem to have anything in between flashy but superficial tutorials and dry API docs.\n\nI have only just started putting together my own Rails app. About a year ago I had an idea for a web app and wrote about 2/3 of it in PHP before losing steam. I think I can rewrite it in Rails in about a tenth of the time (especially since I can reuse a lot of the CSS and HTML.) Stay tuned.\n\nThe other mandatory Cool Kid gear is a copy of \"TextMate\":macromates.com. BBEdit (which I was never a big user of, anyway) is now as old-fashioned as wearing a star on your belly after McBean comes to the beach. TextMate is not only featured in the Rails video demos, it's plugged as the editor all the Rails core developers are using.\n\nAnd it really is cool, but somewhat frustratingly so. It's pretty and has a lot of very nifty features for working in all sorts of languages. (One of my favorites is that it supports nested languages: in an HTML file with PHP or Rails code in it, it not only syntax highlights everything accordingly, but colors the background of the embedded code so you can tell the languages apart at a glance. Very nice.) In fact, it has _so damn many_ cool features that I know I could be working five times as efficiently if I'd only learn them all; but when I'm using it I feel too busy to just play. Maybe I need to add \"Play With TextMate And Learn Its Whizzy Features\" to my list of resolutions.\n\nThe other thing is that, somewhat like a kid with \"Asperger's\":http://en.wikipedia.org/wiki/Asperger%27s, its genius-level talents come at the expense of some basic skills we take for granted. In this case, there are a handful of simple editing operations that it gets wrong, from double-click-and-drag to shifting text. This isn't a huge deal, but I run into these glitches every fifteen minutes or so, and they're as annoying as watching the genius kid pick his nose.\n\nI paid my $48 for TextMate anyway, yesterday. My demo had expired, and while doing some PHP hacking on a wiki server for work yesterday, I found I couldn't live without it. Coincidentally, version 1.5 had just been released. It doesn't fix those basic editing bugs, but I did file bug reports on them, so hopefully, given the rate of progress, they'll be dealt with in the near future.\n\nfn1. (I didn't wear OP shorts, listen to KFRC or have a Mr. Zog's Sex Wax sticker on my backpack)\n\nfn2. (Pink Floyd t-shirt, KOME sticker on my binder, long hair)\n\nfn3. (hand-drawn Throbbing Gristle logo on my binder, KFJC bumper sticker, playing lead air guitar on a Syd Barrett song at the talent show, dialing into ARPAnet through purloined dial-up numbers.)\n\nfn4. Geeky New Year's Resolution number zero is to finish and publish the list of resolutions, but I haven't gotten around to that one yet."
  post_title: "Just Like The Cool Kids"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "just-like-the-cool-kids"
  to_ping: ""
  pinged: ""
  post_modified: "2006-01-07 13:46:36"
  post_modified_gmt: "2006-01-07 20:46:36"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/01/just-like-the-cool-kids/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 199
  post_author: 2
  post_date: "2006-01-10 13:43:52"
  post_date_gmt: "2006-01-10 20:43:52"
  post_content: "I had a \"tiny Linux box\":http://206.14.132.88/products/Travla/c138/C138.html\nIts name was \"badtz-maru\":http://www.badtzmaru.com/ ;\nIt sat out in the office\n\"Serving tunes\":http://www.slimdevices.com/su_downloads.html for me and you.\n\nOne day the \"Squeezebox\":http://www.slimdevices.com/su_downloads.html just went black!\nI didn't know what to do!\nSafari, ssh and ping\nLost touch with badtz-maru.\nThe living room was silent\n(Between games of \"Pikachu\":http://cube.ign.com/articles/656/656659p1.html).\n<!--more-->\nLast weekend I rolled up my sleeves\nAnd grafted on a head\nSo I could hack at badtz-maru\nAnd raise it from the dead.\n\nThe boot parade scrolled by, but then\nWith sinking heart I read\nOf errors in filesystems,\nEvil things best left unsaid.\n\nI grabbed my dusty \"Linux book\":http://www.oreilly.com/catalog/runux3/index.html\nAnd then without delay,\nLips moving with the effort,\nTyped in \"'fsck'\":http://www.die.net/doc/linux/man/man8/fsck.8.html.\n\nThe battle raged! The disk fought back,\nIts platters growing hot,\nBut I showed who was master\n(by pressing \"Y\" a lot.)\n\nOne-two! One-two! And through and through\nThe \"vorpal\":http://www.jabberwocky.com/carroll/jabber/jabberwocky.html tool went hack!\nThe damage was deleted\nFrom each \"inode\":http://en.wikipedia.org/wiki/Inode and track.\n\nI raised a cheer, detached its head,\nAnd went galumphing back\nTo the comfort of the living room,\nAnd there cued up a track.\n\nI have a tiny Linux box\nIts name is badtz-maru\nIt sits out in the office\nServing tunes for me and you.\n\nbq. Addendum: Some months after this was written, I grew tired of badtz-maru's noisy case fan and took the vorpal blade to it, dissecting out the hard disk and plopping it into a <strike>jar of formaldehyde</strike> USB drive enclosure, which I then plugged into \"pancake\", our Mac Mini. However, the disk is still named \"badtz-maru\"."
  post_title: "The Ballad Of badtz-maru"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-ballad-of-badtz-maru"
  to_ping: ""
  pinged: ""
  post_modified: "2006-01-10 13:43:52"
  post_modified_gmt: "2006-01-10 20:43:52"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/01/the-ballad-of-badtz-maru/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 200
  post_author: 2
  post_date: "2006-03-10 13:41:24"
  post_date_gmt: "2006-03-10 20:41:24"
  post_content: "<p>I'd just begun to muse about signing Atom/RSS articles, when Johannes Ernst began <a href=\"http://netmesh.info/jernst/2006/02/18#really-simple-xml-signatures\">blogging about the topic.</a> I had assumed there must be some easy standard way to do it; but the answer turns out to be that there is a <a href=\"http://www.w3.org/Signature/\">standard</a>, but (according to Johannes) it's far from easy, so much so that it's nearly unuseable.\n</p><p>Â (The problem in a nutshell: Digital signatures operate on raw data, so to sign something you have to be able to convert it to a sequence of bytes to stream through the signature algorithm. Crucially, to <em>verify</em> the signature you have to be able to convert the something you received into the <em>exact same</em> sequence of bytes. That's no problem for JPEGs or HTTP bodies. But XML describes an abstract tree of nodes and attributes, with many possible text representations for the same data. If you parse some XML and then turn those data structures back into XML, the text will probably not be exactly the same. Specifying a canonical way to textualize an XML document turns out to be <a href=\"http://www.ietf.org/rfc/rfc3076.txt\">really hard</a> since it has to take into account namespaces, entities, whitespace, character encodings and more. Yeesh!)\n</p><p>Â The more I think about this the more worried I get. We are increasingly using XML-based formats for communication -- Atom, RSS, Jabber. These formats contain multiple messages in the same document. Distributing these messages may involve copying them from one document into another: for example, when news feeds are aggregated or articles forwarded, and whenever a Jabber message is routed through a server. If we care about the integrity and identifiability of these messages -- and the lesson from the current death-throes of email is that we damn well should -- we need to sign them, and the original signatures of course need to travel with the messages. But when a XML message/article/entry element is copied from one place to another, its physical manifestation as a byte-sequence will typically change ... leading to the XML-signatures quandary.\n</p><p>Johannes's suggested XML-RSig (\"Really Simple Signature\") solution is to avoid transforming the message's byte sequence. The bytes to sign are the encoded characters from the opening \"< \" to the closing \">\", and the new sub-element containing the signature is spliced in by character insertion. Anyone copying the message to another XML document has to use an X-Acto knife to cut out the exact message text and insert it into the destination, rather than allowing it to be transformed in any way by an XML processor. (In fact, the destination document even needs to have the same character encoding.)\n</p><p>Â I have mixed emotions about this. On the one hand, it certainly is clear and simple. (See Johannes's list of benefits at the bottom of the post.) What bothers me:\n</p>\n<ol>\n<li>It requires a recipient to keep the original source byte-sequence of the message, if it might ever need to forward/aggregate the message, or even re-verify the signature later. That means altering its storage schema for messages to add a potentially-large blob.\n</li>\n<li>Conversely, it has to generate the new document by splicing in the original message contents. If it normally uses an XML-generation API, that might be awkward to do.</li>\n<li>Adding any XML sub-elements or attributes to the original message breaks the signature. A specific example is the \"atom:source\" element that is added to an Atom entry when it's copied to another feed, to preserve the identity and metadata of the feed it came from.</li>\n</ol><p>I don't have any good suggestions at this point. I'm writing this as a brain-dump. I'm posting it here because (a) Johanness's blog doesn't allow comments, and (b) it seems to be the Blog Way to reply to other people's posts on your own front page, even if it'll baffle the rest of your readers...\n</p>"
  post_title: "Signing XML"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "signing-xml"
  to_ping: ""
  pinged: ""
  post_modified: "2006-03-10 13:41:24"
  post_modified_gmt: "2006-03-10 20:41:24"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/03/signing-xml/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 201
  post_author: 2
  post_date: "2006-03-28 13:41:25"
  post_date_gmt: "2006-03-28 20:41:25"
  post_content: "It just occurred to me that my newish MacBook gives me no less than _four_ sensory modalities for detecting high CPU usage:\n\n# The scrolling bar-graphs [one per CPU] of the Activity Monitor icon in the Dock\n# The unobtrusive little purring fan that comes on every few seconds after the CPU's been busy for a while\n# The extra warmth of the computer against my palms and lap (I won't say it gets \"hot\"; maybe \"toasty\".)\n...and the number Four sensory modality I just recognized:\n# Faint, pleasant scent of warm electronics (\"New Computer Smell\")\n\nStill missing is taste, and maybe \"balance\":http://en.wikipedia.org/wiki/Sense_of_balance and \"proprioception\":http://en.wikipedia.org/wiki/Proprioception, but I think I don't _want_ my computer using those pathways to communicate with me."
  post_title: "Multisensory CPU meter"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "multisensory-cpu-meter"
  to_ping: ""
  pinged: ""
  post_modified: "2006-03-28 13:41:25"
  post_modified_gmt: "2006-03-28 20:41:25"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/03/multisensory-cpu-meter/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 202
  post_author: 2
  post_date: "2006-05-01 13:38:22"
  post_date_gmt: "2006-05-01 20:38:22"
  post_content: "I dabbled in Interactive Fiction, aka Text Adventures, \"long ago\":/Jens/2004/04/my-geek-history --- I played Adventure on my Apple ][ and Dungeon/Zork on a VAX; I wrote a primitive game in BASIC and later in college partially implemented a language for building games in yacc; and then after graduating, my first serious Mac program was a souped-up and nearly finished version of that language. After that I was too busy with \"real\" jobs, but others kept the flame alive even after Infocom tanked, building their own adventure-design languages like TADS and Inform and spawning a cult scene of increasing complexity and literary merit. I kicked the tires of TADS and Inform a few years back, then got distracted by other shiny things. You know how it is.\n\nAnyway: now I turn around and there's \"Inform 7\":http://inform-fiction.org/I7/Inform%207.html, a thing of splendor beyond my dreams. Not only does it have an \"IDE\":http://inform-fiction.org/I7/Gallery.html with a really interesting form of \"integration testing\":http://inform-fiction.org/I7/Gallery%2015-16.html, but the syntax itself has become an ambitious attempt at natural language. I haven't started coding yet -- I have a dreamlike apprehension that the whole concept will melt like cotton-candy if I touch it -- but as an example here is an unmodified section of the source code of \"a real game\":http://inform-fiction.org/I7Downloads/Examples/bronze/ that I've just been playing:\n\n<blockquote><font size=\"-1\"><tt>\nSection 2 - Smells\n\nA thing has a property called scent. The scent of a thing is usually \"nothing\".\n\nA procedural rule: ignore the block smelling rule.\n\nCarry out smelling something:\nsay \"From [the noun] you smell [scent of the noun].\"\n\nInstead of smelling a room:\nif a scented thing can be touched by the player, say \"You smell [the list of scented things which can be touched by the player].\";\notherwise say \"The place is blissfully odorless.\"\n\nDefinition: a thing is scented if the scent of it is not \"nothing\".\n\nBefore printing the name of something scented while smelling a room: say \"[scent] from the \"\n</tt></font></blockquote>\n\nNow that's *wild*!"
  post_title: "your sword is glowing with a faint blue glow"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "your-sword-is-glowing-with-a-faint-blue-glow"
  to_ping: ""
  pinged: ""
  post_modified: "2006-05-01 13:38:22"
  post_modified_gmt: "2006-05-01 20:38:22"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/05/your-sword-is-glowing-with-a-faint-blue-glow/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 203
  post_author: 2
  post_date: "2006-05-05 23:09:25"
  post_date_gmt: "2006-05-06 06:09:25"
  post_content: "My friend Tanya asked her friends to write her a short bit of <a href=\"http://en.wikipedia.org/wiki/Slash_fiction\">Slash fiction</a> as a birthday present. Which is not something I'm accustomed to, but here goes...\n\n<tt>>N\n\nThe Troll Room\nThis is a small room with passages to the east and south and a forbidding hole leading west. Bloodstains and deep scratches (perhaps made by an axe) mar the walls.\nA nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.\n\nYour sword has begun to glow very brightly.\nThe troll swings his axe, but it misses.\n\n>SWING SWORD\nWhoosh!\nThe troll swings, you parry, but the force of his blow knocks your sword away.\n\n>INVENTORY\nYou are carrying a brass lantern, a key, an elongated brown sack smelling of hot peppers, a bottle, and a heart-shaped box of chocolates.\n\n>GIVE BOX TO TROLL\n\"For me?!\" The troll grunts in disbelief as he eagerly pulls off the lid and eyes the Super-Deluxe Truffle Assortment of the Frobozz Magic Chocolate Company (By Royal Appointment To Lord Flathead). Unable to make up his mind, he stuffs all the chocolates into his maw at once and chews noisily.\nThe troll has dropped his axe.\n\n>GO EAST\nToo late -- the magic chocolates have done their work, and the troll's attentions now return to you, although in different form. You're crushed in his hairy and odorous embrace as he bellows sweet nothings into your ear.\n\n>FIGHT TROLL\nYou can't move a muscle.\nThe troll has, surprisingly dextrously, removed your adventurers' tunic and flung it into the corner.\n\n>RUN\nYou can't move a muscle.\nThe troll is struggling with the buttons of your Frobozz Magic Boxer Shorts.\nYour terror is beginning to dissipate, and the scuffle is not-unpleasantly reminiscent of scrimmage back at Great Underground University, not to mention some post-scrimmage locker-room hijinks you'd nearly forgotten about. (Perhaps you shouldn't have been sampling those chocolates, earlier?) You attempt to reach toward the recalcitrant buttons...\n\n\"What's all this commotion, then?\" drawls an amused voice from the doorway. As the troll abruptly drops you, you turn your head and see a seedy looking gentleman carrying a large bag, into which he is depositing your sword.\n\n>HIT THIEF WITH BOTTLE\n\"Ooh, rough trade!\" chortles the thief as he dodges your chocolate-smeared blow.\n\"You boys mind if I join in?\" He pulls from his bag a lava lamp, a silk scarf decorated with a scenic view of Flood Control Dam #3, and a set of rusty handcuffs.\n\n>|\n</tt>\n\nâ€” Excerpt from <i>Zork IV: Time Considered As A Helix Of Little Twisty Passages</i>, by P. David Lebling and Samuel Delany, which Infocom refused to release in 1988.\n\n(Here's <a href=\"http://jerz.setonhill.edu/if/canon/Zork.htm\">some</a> <a href=\"http://en.wikipedia.org/wiki/Characters_in_Zork\">context</a>, for the perplexed.)"
  post_title: "Only Known Instance Of Zork Slash"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "only-known-instance-of-zork-slash"
  to_ping: ""
  pinged: ""
  post_modified: "2006-05-05 23:09:25"
  post_modified_gmt: "2006-05-06 06:09:25"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/05/only-known-instance-of-zork-slash/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 171
  post_author: 2
  post_date: "2009-09-06 18:00:42"
  post_date_gmt: "0000-00-00 00:00:00"
  post_content: "A few succinct ideas that have been rolling around in my mind as I work on my project. They're really different ways of saying the same thing. I am aware that they are biased and oversimplified; aphorisms are like that.\n\n*Client-server is peer-to-peer with the hard parts swept under the rug.*\n\n*A server is just a well-connected peer.*"
  post_title: "Aphorisms"
  post_excerpt: ""
  post_status: "draft"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: ""
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-06 18:00:42"
  post_modified_gmt: "0000-00-00 00:00:00"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/?p=101"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 172
  post_author: 2
  post_date: "1991-03-03 23:58:34"
  post_date_gmt: "1991-03-04 06:58:34"
  post_content: "<p>WHEN I stick my head out of the skylight and look to the left I can see the Cow Telescope atop its hill, red light at the tip blinking to ward off low-flying aircraft. You can see it from Interstate 280; from the back of my parents' Volvo I used to watch it as we drove past, a big metal parabolic dish pointed at something in the sky, on a grassy hill alone except for the odd ruminating cow. And so it was _obviously_  the Cow Telescope, searching for radio emissions from peaceful cow civilizations across the galaxy --<!--more--> civilizations that might have the answers to problems like flavorless grasses, painful udders or the great mystery of being ground up into hamburger. The cows built their radio telescope in secret, and hope that no one will notice it on that hill, or that those who do notice it will attribute it to bearded Stanford researchers, the same ones who stretched a linear accelerator underneath the freeway where electrons doing 99.9999% of the speed of light excite the thoughts of motorists who would eagerly match them in a chicken-race if only the slowpokes ahead of them would get out the damn way -- the slow cautious drivers with hats on, hats covering their horns, badges of their secret cowness, waving them with a surreptitious toss of the head at their gallant compatriots, as they cruise slowly past the blinking light of the Cow Telescope.</p><p>PERHAPS the big dish summoned me back. Perhaps I  represent an advanced civilization, illuminated by knowledge in Southern California, then baked in Arizona. Skeletal desert cows heard the call in their bleached skulls and sent me back by bovine mind control techniques. Made me milkshakes while my belongings were packed into an 18-wheeler, licked my face with the memories of their wet tongues before they sent me home. Three miles and one freeway exit closer than ever before to the big dish. So close that at night out of the corner of my eye I see blue glows crawl over the backs of the cutlery marinating in the sink. Open the skylight and, bathed in it, I hear its voice speak to me as it heads outwards.</p><p>THE Cow Telescope has a lot of questions and I don't know how to answer them. Perhaps I am not expected to. If I were the receiver they could just call. (The wire stretching miles from a crudely-spliced overhead cable, snaking across the fields, wet with dew but insulated in red plastic. It ends at last at the top of the hill under the moonlight. A hoof gently knocks the receiver off the Princess phone and earthworms escape in terror from the dial tone. The receiver is righted. The same hoof presses and the cacophony of every button sounding at once is misinterpreted by the switching office. A vacuum cleaner salesman in Rio de Janeiro is awakened and responds with angry words. Cow hearts sink low, but another attempt is made, this time using the tip of a horn to tap out the number. I answer the phone and a momentous, hushed conversation ensues...)</p><p>BUT their questions are not for me. To think otherwise is mere egotism. I can barely even understand their terminology, their phrasing. I am eavesdropping, alone at night, on an uncompleted call. No one answers. They have been at this for decades but no one answers. They go on with their lives, chewing cud, watching cars to see license plates from all 50 states. They are a patient race and their problems are not new ones.</p><p>IF I went to visit them they would misunderstand. I have their blood on my breath. I don't have answers to bring them, don't even know the questions. If I simply sat in the field they might sit down around me; uncomfortably at first I would tell them things I had learned, about vector calculus, My Bloody Valentine's last album, _Loteria_ cards, how to drive a stickshift (it's important not to be too embarrassed when you stall the engine; everyone else has done it too), how metal type is cast, John Crowley's novels, @CGrafPorts@ and other Macintosh programming mysteries. They are a patient race, but in time they would shake their heads and I would know that what I had said was not of use to them, was not what they had waited to hear. It had made no more sense to them than their questions overheard in the loft had made to me.</p><p>I would probably cry, though I had not expected to succeed, and drying my eyes would sit with them wordlessly and gaze with them into the sky past the blinking light and the creaking girders above. Gazing into the chill night sky whence could come their salvation.</p><p>AT dawn I would wake up and, in doing so, realize that I had dropped off to sleep. Some of us are not cut out for this life of vigil. I would get up from the warm flank against which I had leaned, and walk stiffly away toward home. I believe that I would feel inexplicably better, as though some cathartic moment had passed during the night. But I would probably have caught a cold.</p><p>IT may be that the questions the cows ask are meaningless even to them. The questions may be inextricably tied up with the rest of their being, not merely something their minds came up with. The questions may lie at the heart of what it means to be a cow, and they might not be as important if the cows understood what they meant. The answers might just take the form of an understanding of the questions. By broadcasting the questions, then, they are broadcasting the shape of the empty space around a cow, and so the definition of the cow itself. The cows may not be seeking answers. They may be propagating the idea of cowness, a cow manifesto, the Ã¦ther made flesh in the shape of the cow. In hearing their questions I have eaten of that flesh and been saved.</p><p>_Copyright (C) 1991 Jens Peter Alfke. All Rights Reserved._</p><p>bq. _This short piece just wrote itself one evening as I struggled to keep up, writing by hand in an old Caltech exam notebook. I have no idea where it came from; the idea of a â€œcow telescopeâ€ was an old joke Diana and I shared, but the rest just came out of nowhere as I sat at my kitchen table while Slowdive's eponymous first EP played on auto-repeat up in the loft. Or perhaps the cows put those ideas in my head?_\n</p><!--108810e5104db2cfcb53ad9ccceecff0-->"
  post_title: "The Cow Telescope"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-cow-telescope"
  to_ping: ""
  pinged: ""
  post_modified: "1991-03-03 23:58:34"
  post_modified_gmt: "1991-03-04 06:58:34"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/words/4/the-cow-telescope/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 173
  post_author: 2
  post_date: "1993-06-21 23:44:26"
  post_date_gmt: "1993-06-22 06:44:26"
  post_content: "The beach that fall was overrun by glass lizards; I had never seen them before. I knew there had been none at the beach when we had visited during the summers (I could remember four summers, and my parents said there had been more.)\n<!--more-->\n In the summer the sand was hot, the evenings cool, and our whole camp stayed for a week to catch the foot-long azu as they swam to the beach and flopped out of the water onto the wet sand. It was easy to catch them as they lay there: we children chased them with nets, while the adults favored spears that we were not permitted to touch or come near. Netting the fish was fun, but we all envied the adults for the elegance of their swift downward strokes pinning the fish to the sand. I was too young to feel much sympathy for the fish, or wonder why they came to the beach so suicidally. Fortunately the adults did, and made sure that enough fish survived to spawn and return the next year. But this was fall, the weather cooler and the azu safe at sea, and I came alone with my parents.\n\nThe lizards were new to me. I saw the first only after I stepped on it as we jumped down from the floater. It crunched beneath my shoe like a fragile holiday ornament, and as I picked up and examined the brittle pieces my father told me not to go barefoot on the beach or I would hurt myself. I half-listened, wondering at the detail of the shape and why someone would leave a glass toy lying on the sand of the deserted beach. Then I saw another run past, equally transparent, with the instantaneous starts and stops of a small animalâ€™s motion. I was amazed that something made of glass could be alive, but a torrent of questions extracted little information from my parents, though I strongly suspected that they knew more than they let on.\n\nThe beach being deserted beneath the cloudy skies, we had our pick of huts, and chose one centrally located near a small stream. While the cleaner whirred through the small rooms, we ran across and along the strand, enjoying the sensation of vast open space after months in the forest camp. We ran near the waves, along the wet sand which the lizards avoided. Then, while my parents unpacked our bags, I stayed outside to catch a lizard. This was harder than it appeared. The lizards were quick and escaped darting fingers. They had more trouble with running feet, and could be stepped on, but invariably broke in the process. Lizards could be pieced back together, but they did not move any more and fell apart when I let go. I gathered a double handful of glass reptile fragments that cast complex patterns of light on the sand at my feet, then dropped them and went in to lunch.\n\nI gathered quickly that the rhythm of an autumn beach visit was rather different from a summer one. Not only was I alone with my parents, away from the large extended families of the camp, but I was mostly alone by myself during the day while my parents stayed inside together. My parents were always an affectionate couple, but at the autumn beach they seemed closer still, touching and sharing glances that did not seem to include me. From time to time I would cajole them into going outside and we would run together and play tag games, but most of the time I had the beach to myself. Sometimes I felt them watching me as I stood on that sandy plain.\n\nThe aloneness was disturbing, but also novel. I was accustomed to sharing the forest clearings and underground halls with dozens of other children. Farther out the forest was vast and empty, I knew, but my anklet would not let me go that far away. Only last week my tutor had explained that being alone was not always bad, that it had power: he had told me stories of boys who ventured out alone and discovered new sights, composed new songs, found new treasures. I was too young to connect this more than dimly with the subsequent departure for the beach, but I made the most of my new-found state and played games of exploration and discovery on the quiet beach.\n\nIt was on the afternoon of the third day that, to my own surprise, I managed to catch a lizard. I was still making attempts almost as often as I saw one, which was very often, but only this time did I find myself with a squirming glass lizard in my hand. I held it just behind the neck and examined it more closely. It was hard and shiny and felt exactly like glass except for its motion. Inside, it was absolutely clear and refracted the sand below and reflected the sky above. In a moment of boyish cruelty I remembered seeing a mundane lizard drop its tail when attacked by a cat, and gave the glass lizardâ€™s tail a yank to see if it would pop off and writhe. It stayed put, and the enraged lizard twisted free and sank its teeth into the flesh of my palm.\n\nFor a moment I merely stared at the lizardâ€™s tiny jaws and at my blood leaking out over them. Then I felt the pain overcome my surprise, and with a convulsion of my arm flung the lizard down onto the sand where it lay, stunned, with red now swirling inside it like ink in water. Then it darted away and was lost. More red drops fell where it had lain. I cried with the pain and shock, but decided guiltily against telling my parents: I had a feeling that I had done something wrong. I washed the wound in sea water and wrapped paperweed around my hand as the older children had shown me once; the wound soon stopped bleeding. I said nothing of the incident at dinner, but my parents noticed the bandage on my hand and exchanged mysterious glances. I was ashamed, but wasnâ€™t sure why.\n\nThat night I lay in my tiny room at the top of the hut and looked out through the skylight at the stars. I counted six meteors before falling asleep, and dreamed that I gave a ruby ring to a girl, before a sharp tapping on the skylight awoke me. It was a lizard, the same lizard, still swirling with my blood in the starlight. Its clawpoints and long tail wriggled and clicked against the glass over me. Without knowing why I did so, I slowly opened the skylight until the lizard slid down the pane and fell onto the bed. I was more than half asleep and thought the lizard to be one of the shadowy things from my dreams. It darted a bright red tongue at me, climbed onto the pillow and curled up there. It was bigger than it had been that afternoon, but there was still room for my head on the pillow next to it. I laid my hand on its warm side and stroked it before falling asleep again.\n\nLate during the night I must have awoken for an instant as a sliver of light appeared, the trap-door opened, and a dim shape that smelled of Mother stroked my cheek and gently took the lizard from beside me. I clearly remember that moment, but not the sea of sleep that surrounded it.\n\nIn the morning I had forgotten the lizard. Filled with plans for the dayâ€™s adventures, I got up, dressed, and climbed down the ladder to breakfast. Five pieces of glass in the shapes of reptilian legs and a head lay unnoticed on the rumpled sheets. Mother and Father sat close together, and they were beaming, they had a secret to tell. I sat down. \"Look, Fern,\" Mother said, \"youâ€™re going to have a baby brother!\" and they held up what they cradled in their hands: a glass ball with a slowly waving tail and a tiny pink seahorse rocking inside."
  post_title: "Glass Lizard"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "glass-lizard"
  to_ping: ""
  pinged: ""
  post_modified: "1993-06-21 23:44:26"
  post_modified_gmt: "1993-06-22 06:44:26"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/1993/06/glass-lizard/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 174
  post_author: 2
  post_date: "1995-08-23 00:21:21"
  post_date_gmt: "1995-08-23 07:21:21"
  post_content: "I decided I would only work on this page after ten PM, when I think differently. When I'm tired but alert, and everyone around me is asleep, and it's dark and quiet.\n\nThe cognitive scientist and AI researcher David Gelernter has a model of consciousness that has _focus_ as its parameter: varying focus produces mental states from rigorous logical thought (when focus is at its highest) all the way down to dreaming (when focus is at its lowest.) In high focus states the mind seizes precisely on individual concepts and ideas. In low focus states, multiple ideas, concepts and memories overlay each other such that they can't be distinguished; they're superimposed and common features line up, connections between disparate thoughts. In this mode the mind jumps from one memory to another, linked by a chain of connections formed by lining up fragmentary images of those memories. Like a dream.<!--break-->\n\nThe book I hold most dear is John Crowley's novel _Engine Summer_. In it, there is a society called the Truthful Speakers who have a sort of Utopia. They have an understanding of personality and of interpersonal relationships that allows them to untangle mental problems and conflicts with the same degree of rigor and confidence with which we tackle technical problems. This understanding and the techniques through which it is implemented are never made clear (the book would be far less interesting if Crowley had attempted to do that.) But in one scene a healer maps another character's personality as a series of diagrams overlaid over each other on what is in effect an overhead projector. Every transparent sheet contains a knotted diagram that represents an aspect of personality, fairly complex in itself. As more sheets are laid on top of each other the complexity increases, the patterns interact, and of course everything gets dimmer and blurrier.\n\nI like that image. And sometimes (after ten PM) I feel that I have a lot of these shiny overhead transparencies, tacked up carefully on the walls. (Or else they're in little map drawers only an inch high, dark wood drawers with black iron knobs tesselating the walls. I used to dream about rooms like that. The front house we own that we rent out has a group of these drawers in one room, but not a whole wall full. They were full of blueprints of houses when we first opened them up.) At times I'm haunted by shapes on these transparencies that reappear from one to the other, or fragments of collage on different sheets that seem to have been torn from the same source. What happens when I pile up the sheets to overlay the matching pieces? The more you pile up the dimmer the whole thing becomes. Only a fool would believe that everything can be fitted together, that when all the sheets are turned the right way a Pattern will emerge the way the picture of Peter Rabbit emerged at the bottom of the soup bowl when I was little.\n\nThere's a character in William Gibson's _Mona Lisa Overdrive_ who believes that cyberspace (the Net, the sum total of everyone's data and whatever else lives out there) has a Shape, some sort of higher-dimensional transcendent pattern, and lives his life in an obsessive attempt to hack together software that will display that Shape to him. Needless to say he comes to a bad end."
  post_title: "Piling Up Sheets / the face in the soup bowl"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "piling-up-sheets-the-face-in-the-soup-bowl"
  to_ping: ""
  pinged: ""
  post_modified: "1995-08-23 00:21:21"
  post_modified_gmt: "1995-08-23 07:21:21"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/1995/08/piling-up-sheets-the-face-in-the-soup-bowl/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 175
  post_author: 2
  post_date: "1995-08-24 13:52:19"
  post_date_gmt: "1995-08-24 20:52:19"
  post_content: "bq. The problem of leisure\nWhat to do for pleasure\nIdeal love a new purchase\nA market of the senses\n--Gang Of Four, â€œNatural's Not In Itâ€\n\nbq. â€œHe realizes everything he does is second-hand, a waking dream,  a dream someone else has dreamed for him -- when he walks into  a pub and greets friends with a line he's half-consciously  lifted from last night's sit-com, he's an advertisement. He  hears himself and he feels tricked, humiliated, so he smashes  into his friends ... as if he's never seen them before but  knows they mean him no good. Screaming, he insists that he's happy.â€\n--Greil Marcus\n\nLike most of us, I derive much of my sense of identity from mass-marketed consumer commodities, and present my identity to other people by prominently displaying these brand names and logos. But it's okay, because I adopt a knowing, ironic Generation-X attitude towards it.\n\nAnd really, apart from Apple t-shirts (they give them to me for free) and other shirts so deeply ironic they can't be taken seriously (Spam, Mister Bubble) the major brand names I freely advertise are those of musical groups that haven't quite taken over the world yet. Many of them aren't even signed to deals with multinational corporations. Yet I have bought so deeply into the pop music dream that I believe the names and identities of my favorite bands are indicative of who I am and what I stand for."
  post_title: "Jens The Consumer"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "jens-the-consumer"
  to_ping: ""
  pinged: ""
  post_modified: "1995-08-24 13:52:19"
  post_modified_gmt: "1995-08-24 20:52:19"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/1995/08/jens-the-consumer/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 176
  post_author: 2
  post_date: "1997-04-13 13:51:12"
  post_date_gmt: "1997-04-13 20:51:12"
  post_content: "System Software were looking for a Post-It Notes(tm) type of program for System 7.5. They were already buying several other utilities -- including Find File, Scrapbook, SuperClock -- from third parties, and offered Antler Software (me) the same lump sum deal for the â€œAntler Notesâ€ utility I was working on. It was a nice piece of change. I was happy.\n\nThis came to the attention of certain people in upper management, whose conclusion was (I'm paraphrasing here) â€œWhy are we going to pay for this? This guy works for Apple -- _we already own his program!_â€ You can imagine an evil cackle here if you like; I certainly did at the time, although I've mellowed a bit since.\n\nFor a while it looked as though Apple was going to get Antler Notes / Stickies at no cost -- wotta deal! As it happened, however, some of the nice people mentioned earlier in this story arranged for me to get a bonus, not officially in any way related to Stickies of course, but it made me feel better.\n\nI now undestand the Marxist concept of _alienation from one's labor_ much better than I did before...\n\nh2. What The Law Says\n\nThe worst part of it is that they were right. According to US labor and copyright law, a worker's employer owns anything the employee creates that relates to the business of the employer, regardless of where, when and on whose equipment the employee creates this work. If you work for a high-tech company, remember that â€œProprietary Information Agreementâ€ you almost certainly signed when you started? It probably says something like this:\n\nbq. I hereby assign and transfer to the Company my entire right, title and interest in and to all Inventions, whether or not protectable by patent, trademark, copyright or mask work right, and whether or not used by the Company, which are reduced to practice, made or conceived by me (solely or jointly with others) during the period of my employment with the Company, which relate in any manner to the business, products, technologies, techniques, processes, services or research and development of the Company.\n\nHowever (and these agreements usually mention this in an oh-by-the-way manner near the end) this sort of thing is usually somewhat tempered by labor law. For instance:\n\nbq. *Section 2870, California Labor Code.* (a) Any provision in an employment agreement which provides that an employee shall assign or offer to assign any of his or her rights in an invention to his or her employer shall not apply to an invention that the employee developed entirely on his or her own time without using the employer's equipment, supplies, facilities, or trade secret information except for those inventions that either:\n\n# Relate at time of conception or reduction to practice of  theinvention to the employer's business, or actual or demonstrably  anticipated research or development of the employer;\n# or result from any work performed by the employee for  the employer.\n\nMost of this is pretty straightforward -- work at home on your own time on your own equipment and don't use secret knowlege from work -- except for the question of whether your â€œInventionâ€ relates to your employer's business. While I haven't heard or read any authoritative analysis of this, or looked at precedents, most of the (non-lawyer) people I've talked with interpret this fairly pessimistically; that if you work for a company that makes products for platform X, anything you write for platform X would be covered. If anyone reading this has more information or experience, drop me a line.\n\nh2. What You Can Do\n\nIf you talk to your company's lawyer or legal department early on -- before you start your project, or at least at a time that you can later plausibly claim not to have started it on, and yes that would probably require â€œcorrectingâ€ file creation dates -- you may be able to get them to exempt a specific project. You'll need to convince them that your project isn't something that they would ever consider doing as a product and wouldn't take away from their business or reflect badly on the company. Get this in writing from them, with all the necessary legalese.\n\nAnother way to take care of this stuff is when you begin your employment. Every â€œProprietary Information Agreementâ€ I've ever seen includes a â€œPrior Inventionsâ€ section where you can list existing inventions of yours that will be excluded from the Agreement and remain your own. You should absolutely list every project that you've either completed, are in the midst of, or started once and never finished. A friend of mine had a clever idea: he also listed several very vague descriptions of things he thought he might want to work on someday and gave them code names. Then, when he really did start to work on something that fit the description, he gave it the appropriate code name and it was already exempted. I don't go so far as to recommend this technique, but it's certainly interesting!"
  post_title: "They Made Me An Offer I Couldn&#8217;t Refuse"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "they-made-me-an-offer-i-couldnt-refuse"
  to_ping: ""
  pinged: ""
  post_modified: "1997-04-13 13:51:12"
  post_modified_gmt: "1997-04-13 20:51:12"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/1997/04/they-made-me-an-offer-i-couldnt-refuse/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 177
  post_author: 2
  post_date: "2001-10-30 23:58:36"
  post_date_gmt: "2001-10-31 06:58:36"
  post_content: "<br clear=\"both\"/><font size=\"+1\">The horizon folded down its blackness.\nOverhead curled exalted green clouds\nof Sun-born particles spiraling in.\n\nNow upward in an arc, tied to the long invisible armature of the Pole,\nflew my humble cardboard tube of Earthly minerals,\nin one moment transmuted into circlets and spheres of sparks â€”\ndark materials achieving by dint of effort\nglory surpassing the Sunâ€™s electrons,\nif only for a second.\n\nHood thrown back I howled a warning to low-flying angels.\nThe dogs lay panting in the snow, unimpressed.</font>"
  post_title: "Polar Star"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "polar-star"
  to_ping: ""
  pinged: ""
  post_modified: "2001-10-30 23:58:36"
  post_modified_gmt: "2001-10-31 06:58:36"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2001/10/polar-star/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 178
  post_author: 2
  post_date: "2001-12-20 23:59:29"
  post_date_gmt: "2001-12-21 06:59:29"
  post_content: "<br clear=\"both\"/><font size=\"+1\">We stepped out our back door into splendor:\nâ€“ the rain-choked hills casting off their muddy carapace of topsoil\nâ€“ uprooted trees shedding their last dead leaves like ticker-tape\nâ€“ all of up heading for down.\nAll the wet rot of the rotating Earth converged on our yard\nbut was held back by cinderblock walls\nwith a splash.\n\nOur house lay alone at the foot of a brown slope devoid of landmarks:\na virgin field of stumps, poles, and spinning tires.\nAnything might be planted in that field and grow.\nAny possibility might be granted in a new equilibrium.\nLike two children we held hands and stepped over the wall,\ndigging our bare feet into dark humus, taking root.</font>"
  post_title: "Splendor"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "splendor"
  to_ping: ""
  pinged: ""
  post_modified: "2001-12-20 23:59:29"
  post_modified_gmt: "2001-12-21 06:59:29"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2001/12/splendor/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 179
  post_author: 2
  post_date: "2002-01-05 00:19:27"
  post_date_gmt: "2002-01-05 07:19:27"
  post_content: "By way of introducing my favorite hypertext, I have to digress a bit. Last March [2001] I had a particularly nasty flu for about three weeks, which ended up as a wretched dry cough. I couldnâ€™t go one minute without coughing, and I had a horrible sharp pain in my ribs caused by a sprained chest muscle. One night I was lying on the couch (so I wouldnâ€™t keep Diana up all night) trying in vain to sleep, and decided to look up exciting Drug Facts about various medications I was taking. \"Guaifenasin\":http://www.nlm.nih.gov/medlineplus/druginfo/uspdi/202270.html wasnâ€™t very interesting (just an expectorant, toxic in large doses) but Dextromethorphan turned out to be fascinating stuff â€“ chemically similar to opiates, it suppresses coughs but doesnâ€™t bind to any opiate receptors. What the \"mainstream medical websites\":http://www.nlm.nih.gov/medlineplus/druginfo/uspdi/202187.html donâ€™t tell you, however, is that it does have _very_ potent psychedelic effects at large doses. Iâ€™d heard about people getting stoned on cough syrup and assumed it was just codeine, but no, DXM is quite odd stuff in its own right.\n\nbq. *Disclaimer*. I would never try high doses of Dextromethorphan myself and donâ€™t recommend that you do. Not only does chugging cough syrup sound disgusting, but DXM \"can become addictive\":http://www.erowid.org/chemicals/dxm/faq/dxm_side_effects.shtml#toc.6.6, and the long term effects are known to include \"brain damage\":http://www.erowid.org/chemicals/dxm/faq/dxm_side_effects.shtml#toc.6.5. Of course, that doesnâ€™t mean we canâ€™t safely enjoy ourselves by reading about _other peopleâ€™s_ unwise use of this interesting drug!\n\n*Tussin space.* The Erowid archive has quite a lot of \"information about the effects of DXM\":http://www.erowid.org/chemicals/dxm/faq/dxm_faq.shtml, including a mention of the term \"_tussin space_\":http://www.erowid.org/chemicals/dxm/faq/dxm_experience.shtml#toc.5.12, which refers to the sort of self-consistent alternate reality or apparent physical construct that seems to be produced by the drug. \"Many find it to be a vast, open space, full of exotic and alien constructs, buildings and shapes. Some see crystalline towers and cloud-like lifeforms; others see the Tussin Space as a forest, desert, or other natural setting. Your Mileage May Vary.\" I love this idea â€“ Iâ€™m a sucker for things involving alternate realities or overarching shapes behind the world â€“ so I googled about for other references to \"tussin space\" and found ... Big Fun.\n\n\"*Big Fun*\":http://www.asecular.com/bigfun/intro was a commune of sorts inhabited by a group of young slackers in the mid â€™90s. It was immortalized by one of its members, \"The Gus\":http://www.asecular.com/bigfun/me/indexx.html, who compiled a \"glossary of the groupâ€™s slang, rituals, characters and situations\":http://www.asecular.com/bigfun and posted it on the web. Glossary is of course a natural form for hypertext, and you can happily traipse around inside this one for hours on end (as I did that night). It gives a vivid kaleidoscopic image of what that scene must have been like. I have to say I would never want to live in that kind of squalor, but Gus describes it with a romanticism that makes it great fun to read and to _imagine_ oneself in:\n\nbq. Despite its nearly-unlivable conditions and constant social tension, Big Fun is a place unlike any in the world. Big Fun people are full of ambition and interesting ideas, but for now they are distracted by the fragrance of life. So they stroll along for now, enjoying the considerable fun that the greater Charlottesville area has to offer. They can always buckle down and begin life in earnest when they have worked out whatever it is that is joyfully blocking them. Perhaps, as is the case for this glossary, a great creative force can be tapped from the unconventional decadence that surrounds them.\n\nYay for youthful idealism!\n\n*Some thoughts on hypertext.* The experience of the Big Fun Glossary hypertext is quite different than that of a normal narrative. Thereâ€™s definitely a story, and one could imagine a novel or film set there. But when I think of Big Fun, itâ€™s in terms of the individual events and characters, and associations between them, not in any sort of chronological structure (I donâ€™t think I could describe the timeline in any detail if my life depended on it!) I think this qualifies The Gusâ€™s glossary of it as an entirely different form of literature. One could of course get the same effect on paper with a written glossary (and itâ€™s been done: Milorad Pavicâ€™s \"??Dictionary Of The Khazars??\":http://www.amazon.com/exec/obidos/ASIN/0679724613) but looking up references in a paper book is sufficiently awkward that this is a form that, I think, really needs the computer to be practical."
  post_title: "DXM, Big Fun, And My Favorite Hypertext"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "dxm-big-fun-and-my-favorite-hypertext"
  to_ping: ""
  pinged: ""
  post_modified: "2002-01-05 00:19:27"
  post_modified_gmt: "2002-01-05 07:19:27"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2002/01/dxm-big-fun-and-my-favorite-hypertext/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 180
  post_author: 2
  post_date: "2002-01-12 00:00:05"
  post_date_gmt: "2002-01-12 07:00:05"
  post_content: "Eli finally entered the Fulfillment Center at dusk, through the wide metal doors opening into the chilly space within. He had been waiting in line since dawn, shuffling slowly back and forth through the cracked remnants of the old parking lot under the eyes of the security guards. The Center was an old, damaged warehouse â€“ this had been an industrial area before the war â€“ and was lit within by banks of fluorescent tubes suspended from the high ceiling.\n\nOnce inside he waited briefly before stepping up to one of the many card tables set up in a line near the door. A tired looking young man checked his ID card, walked back to one of the many large crates filling the space, rummaged about inside, and returned with a small cardboard box.\n\n\"Youâ€™ll have to sign for it,\" the young man said mechanically, sliding a clipboard across the table. Eli did so, using the ballpoint pen chained to it, and picked up the box as he slid the clipboard back across the desk.\n\n\"Itâ€™s smaller than I thought, somehow.\"\n\n\"Thatâ€™s the standard size. They only put in as much stuff as will fit in there.\" The young man blew his nose with a dirty rag and turned to the next person in line.\n\nEli took the box with him as he followed the other people out a side door into the arc-lit twilight. The moment felt strangely anticlimactic. He decided he might as well examine the contents of the box right away, so he carefully eased his complaining joints into an uncomfortable squat on the edge of the curb, and with his thumbnail slit the paper tape that held the box shut. It opened easily.\n\nThe items within were concealed by a square of soft blue cloth, which had clearly been cut from something larger with scissors. He took it out and the tactile sensation told him immediately what it was â€“ a piece of his blanket from his early childhood. Cheap polyester, fuzzy and slightly rough where the fabric had pilled. One edge of the scrap had a satin border that had rubbed away at the corners where he rubbed it for comfort and pleasure as he fell asleep at night. In the dark bedroom he had noticed for the first time how vision became grainy and lost color as the light faded. He lay wondering why this happened, staring at the last of the light fading from the edges of the curtained window, and his mother entered with Pipsy, his mouse beanie, who had been forgotten in the living room at bedtime. His mother kissed him as she tucked Pipsy beneath the blue blanket. His mother loved him.\n\nRemoving the blanket square revealed a clutter of small items beneath it. He took out a black pebble, oddly shiny, with straight line scratches across it. It reminded him of a morning, walking to the drugstore with his best friend Eric, when a step forward kicked forth a blur that lay on the sidewalk spinning and shining for what seemed like forever. Still holding the pebble, he took out a cheap metal ring with bits of turquoise glued to it. A plane ticket from Denver to Buenos Aires. A tiny bottle of Lauren perfume. A brass door key with the letter \"M\" scratched onto it.\n\nThere was a woman sitting near him on the curb, old like himself. Her box was also open, and she was hold- ing a battered analog watch, without a strap, cupped in one palm. Tears dripped onto its glass face, but she looked happy.\n\nMore objects: A photograph of a rose torn from a magazine. A three-inch CD with a spiky geometric design for a label. An irregular clay ball with a happy face painted on it in a childish scrawl. A blue LED. A shoulder patch torn from a uniform. The cover of a paperback novel, folded in half. A rifle shell. A dried, pressed flower.\n\nHe saw a pair of boots standing a few feet in front of him and looked up just as the world flashed white. A small motor whirred. His vision cleared and he saw a young woman in a uniform holding a square of paper out to him. Her other hand held a camera. He took the photograph; in it, his thin face looked wondering, happy, holding his box on his lap and treasures in his hands. \"It was a good life,\" he said to the woman, looking up. She nodded. He carefully put the items back in the box, covering them with the blanket scrap, then lay the photograph on top. It fit exactly. As she reached down to help him stand up, he saw the long gray rifle slung loosely across her back."
  post_title: "Fulfillment"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "fulfillment"
  to_ping: ""
  pinged: ""
  post_modified: "2002-01-12 00:00:05"
  post_modified_gmt: "2002-01-12 07:00:05"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2002/01/fulfillment/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 181
  post_author: 2
  post_date: "2002-01-28 23:54:03"
  post_date_gmt: "2002-01-29 06:54:03"
  post_content: "We are all snakes. We have a tail and onetwothree mouths. The middle mouth bites the tail to hold fast to form, to keep the extra blessings from dropping off one end and becoming lost in the untidy Ã¦ther. Leftright mouths are perhaps free to latch onto other snakes should the local geometry and snake density so permit. When our fangs sink into each other we exchange blessings. It must be so. Blessings endlessly recirculated become stale, they need another blood type in which to flow for a time before being returned freshly laundered and creased & giving off a pleasant aroma of incense."
  post_title: "We are all snakes"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "we-are-all-snakes"
  to_ping: ""
  pinged: ""
  post_modified: "2002-01-28 23:54:03"
  post_modified_gmt: "2002-01-29 06:54:03"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2002/01/we-are-all-snakes/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 182
  post_author: 2
  post_date: "2002-09-04 11:50:03"
  post_date_gmt: "2002-09-04 18:50:03"
  post_content: "The Zen master Yoshi was playing a video game. Seated in the lotus position, he expertly maneuvered the controller with his gnarled hands. Nevertheless, on the screen Mario failed to leap from one block to the next and plummeted screaming into the void.\n\nAgain, Yoshi began the same level. Again, the moving platforms eluded the sprite onscreen.\n\nSeventeen more times, master Yoshi caused the hapless plumber to fall into nothingness and lose another life.\n\nStill, his pose remained serene, and a bud of a smile played on his lips.\n\nAt last the novice Ohta, who had been watching the whole time, could not contain himself. \"Master,\" he blurted out, \"how can you remain so calm in the face of so excruciatingly difï¬cult a level? Even when the platforms evaporate into thin air when you are yet a split second from reaching the Shine that is your goal? How do you restrain yourself from throwing the controller through the nearest _shoji_?\"\n\nMaster Yoshi replied:\n\n<i>\"The platform is not moving.\nMario is not moving.\nOnly the mind is moving.\"</i>\n\nAt that instant, Ohta attained enlightenment."
  post_title: "A Koan For Video Gamers"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "a-koan-for-video-gamers"
  to_ping: ""
  pinged: ""
  post_modified: "2002-09-04 11:50:03"
  post_modified_gmt: "2002-09-04 18:50:03"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2002/09/a-koan-for-video-gamers/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 183
  post_author: 2
  post_date: "2003-04-07 12:15:33"
  post_date_gmt: "2003-04-07 19:15:33"
  post_content: "<font size=\"+1\">\nArranged on a torn out page,\nsilver \"S\"s of old wire pulled from broken clocks.\nA razor shadow scratched by halogen behind each,\ntracing its shape in intersections with blue ink lines,\na curve modeling stresses and crystal faults.\nExhausted by years of funneling pulses from a quartz chip,\nthe wires relax now bit by bit,\nslow motion snakes,\nemitting sub-audible scritchings against the paper ï¬bers.\nAs it unwinds, each proudly imagines itself a mainspring.</font>"
  post_title: "Silver &#8220;S&#8221;s"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "silver-ss"
  to_ping: ""
  pinged: ""
  post_modified: "2003-04-07 12:15:33"
  post_modified_gmt: "2003-04-07 19:15:33"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2003/04/silver-ss/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 184
  post_author: 2
  post_date: "2003-06-23 12:38:56"
  post_date_gmt: "2003-06-23 19:38:56"
  post_content: "<font size=\"+1\">\nThe apricots are falling, bit by bit\nhelped along by interfering squirrels.\nThough not yet ripe, they roll upon the bricks,\nall with tooth-marks, some with chewed-up pits.\nThis fruit debacle ï¬lls us with dismay,\nas we had hoped the ripe fruit to preserve\nand so retain the sweetness of the day\nIn far December when lightâ€™s gone away.</font>"
  post_title: "Apricots Are Falling"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "apricots-are-falling"
  to_ping: ""
  pinged: ""
  post_modified: "2003-06-23 12:38:56"
  post_modified_gmt: "2003-06-23 19:38:56"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2003/06/apricots-are-falling/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 185
  post_author: 2
  post_date: "2003-10-10 16:01:49"
  post_date_gmt: "2003-10-10 23:01:49"
  post_content: "...we decided that staying awake as late as possible was the way to write new and creative things. This to be accomplished without the aid of stimulants since the goal was to be as sleepy as possible. In ideal circumstances we would actually fall asleep while typing without stopping, ï¬nding ourselves squatting in a gray hypnogogic landscape still tapping on the keyboard ï¬nishing up priceless new thoughts. The dream-laptop could then be carried along throughout the night as a powerful and modern spirit guide, helping us to keep appointments with buried archetypes and instantly add new dream symbols to our address books, in addition to the obvious utility of taking dictation during the dream, before the veil is torn on waking and the dream story scattered. The major obstacle was the discovery that waking has the same effect on the laptop as on the mind, leaving the hard disk fragmented and the contents of RAM corrupted, necessitating re-installation from a backup. The solution was to email or IM dreamnotes before waking, a nerve-racking business since the passage of realtime during dreams is so uncertain, and any moment might bring the noise of the alarm. We would therefore type our dreamnotes directly into the mail or chat window, leaving one ï¬nger always poised to tap the Send keystroke should we be startled awake. Proper proxy server setup was key, since strange ï¬rewalls surround the dreamworld, and the outgoing messages often took unconventional routes. On waking one learned to expect their arrival in places like fortune cookies or smudged ï¬‚yers handed out by bored youths at street corners. You would skim one of these and realize it to be a sharply detailed eyewitness account of a dream youâ€™d had a week ago and completely forgotten. Or sometimes it would be an email from the waking domain, reminding you that you were dreaming and that youâ€™d best haul out the laptop and start taking notes..."
  post_title: "We (decided that staying awake)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "we-decided-that-staying-awake"
  to_ping: ""
  pinged: ""
  post_modified: "2003-10-10 16:01:49"
  post_modified_gmt: "2003-10-10 23:01:49"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2003/10/we-decided-that-staying-awake/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 186
  post_author: 2
  post_date: "2003-10-11 16:07:08"
  post_date_gmt: "2003-10-11 23:07:08"
  post_content: "...each of us had a little box. We didnâ€™t know each other, not at ï¬rst; we werenâ€™t even aware of each other. \"We\" was a grouping deï¬ned solely by the fact of our having these little boxes. Each box was black lacquer and about two inches on a side. A network of ï¬ne black raised lines covered it. The lid could be opened, revealing nothing much inside.\n\nTo be honest, it was hard to remember what was inside after you shut the lid. Sometimes people would look inside, shut the lid, then look inside again because they couldnâ€™t remember what was inside. Theyâ€™d repeat this process for minutes or hours at a time until someone kindly distracted them. Anyway, whatever was inside the boxes, sometimes it talked to us. Usually it would name a place to go. It didnâ€™t make much sense for a while, but all the time the boxes were gradually bringing all of us closer to each other.\n\nThen the instructions started to change. They still didnâ€™t make much sense, but now we would walk around and see something like ... like a couple of Coke cans stacked on top of each other, or a blue circle spray-painted on a wall, or a trash can set on ï¬re, and weâ€™d know that another one of us had done it. But we never saw each other. After a few weeks of this, each of us could tell there were hundreds of us all in the same neighborhood. We were each so excited because we had a pretty good idea of what was going on by then and were anxious to meet each other and talk shop about our black cubes. Like \"Do you polish yours? What with?\" or \"Do you sleep with it?\" or \"Whatâ€™s the weirdest thing it ever told you to do?\"\n\nIt was a busy city and of course there were people walking everywhere, crossing streets and working in shops and driving along and going to and from home, and it was never really possible to tell who might have a cube discreetly tucked away on their person. We lived in a continual frisson of excitement, punctuated by new tasks given to us by our cubes and performed in secret. But none of us saw anyone else doing their tasks.\n\nThen one day it turned out every one of us must have simultaneously gotten the same direction: to put down the cube. It felt strange, naked, frightening. Imagine losing your cellphone? Your wallet? More like losing your mama. We walked about in dazes absently wiggling ï¬ngers in suddenly-empty pants pockets, clutching suddenly-light purses, missing the accustomed friction of laquered corners against hips. It was unpleasant, and I know all across the city we were getting ready to think about commencing some serious freaking out, when each of us suddenly saw a familiar beloved glint of shiny black on the sidewalk / in a mailbox / on a restaurant table / on a bus seat / taped to a stop sign, and swooped to pick it up.\n\nThe boxes felt cold from their time alone, and had unaccustomed little scratches or dents or stains or ï¬ngerprints on them. But still the same voice! And next we were all on our ways out of the city back to our own homes, with an odd feeling as though weâ€™d all somehow met..."
  post_title: "We (had black boxes)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "we-had-black-boxes"
  to_ping: ""
  pinged: ""
  post_modified: "2003-10-11 16:07:08"
  post_modified_gmt: "2003-10-11 23:07:08"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2003/10/we-had-black-boxes/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 187
  post_author: 2
  post_date: "2003-12-08 16:20:51"
  post_date_gmt: "2003-12-08 23:20:51"
  post_content: "Yesterday I got acquainted with our leaf-blower. Itâ€™s electric, thank Cthulhu, but not what youâ€™d call \"whisper quiet\". We got it as a gift several years ago, and I tried it once back then and it just blew the leaves into a huge swirling cloud that settled down exactly where it began. So I disappointedly put it in the shed and forgot about it.\n\nThis time, though, I treated it as if it were some new and powerful item from a game. The controls seem simple â€” just press the A button to turn it on/off and rotate the C stick to point it, kind of like \"Luigiâ€™s Mansion\":http://www.luigis-mansion.com/ â€” but it takes time to master. Hereâ€™s my brief playerâ€™s guide:\n\nAnywhere near a wall you get the howling leaf tornado that I experienced before; Iâ€™m not sure if this is a bug or intentional, but avoid that. The brick patio was the best surface, though I had to evade obstacles like the picnic table to get those elusive remaining leaves for bonus points. The limited length of the extension cord added an element of strategy, as I often had to retrace my path to unwind the cord from around trees and posts.\n\nOnce the patio was cleared I was faced with the trickier lawn level, where all the leaves had now collected. I started at one end and moved back and forth in a raster scan for a while. The leaves get stuck in the grass blades so the best technique seemed to be to aim low to levitate them, then high to blast the levitated leaves forwards. Combined with the horizontal raster scan, this required continuous nozzle movement. Grabbing the middle of the protruding pipe helped make this easier.\n\nThe gameplay was kept fresh by the innovative use of different types of leaves. The small ash leaves move more easily, of course, while the larger mulberry leaves take more lift to go airborne but prove more aerodynamic once in ï¬‚ight. I appreciated the ability to move at will from one end of the lawn to the other â€” this type of open-ended GTA-3 style play kept my interest.\n\nFinally the endgame â€” or so I thought! â€” came with the ï¬nal mission: forming all the leaves into a pile. Once the leaf area becomes compact enough, you have to deal with the more subtle effects of the blower, such as that it sends the leaves not straight forwards but across about a 90Â° angle, which can easily move other leaves away from the pile if youâ€™re not careful. Switching back to the \"rake\" item helped here.\n\nIt was at this point that the game went into an unexpected ï¬nal twist. \"Princess N\" â€” the requisite cute-sidekick NPC character â€” had been around throughout the game. Itâ€™s possible to switch the leaf-blower to her (use the Z button). While her small size and frankly limited AI make her not very useful with the blower, it must be said that the animations and detailed facial expressions make the experience quite amusing.\n\nWhen not controlling the blower, Princess N occupied her time playing in the leaves with little doll ï¬gures. The twist, then, was that as soon as Iâ€™d gathered all the leaves into a perfect pile, there came a heart-rending cutscene in which Princess N tearfully announced that sheâ€™d lost her beloved Garden Fairy doll. I of course selected \"Yes\" when asked to ï¬nd the doll, and we went into a painstaking fetch-quest for the missing 2\" item.\n\nUnfortunately I didnâ€™t have any luck, even after D very sweetly took advantage of the two-player co-op mode to lend a hand. So I didnâ€™t get the best score for the episode, although I thought I did quite well for a ï¬rst time. I saved the game right before the ï¬nal task, carrying the leaves to the curb; I need to ï¬nish that up before the real-time clock hits Thursday morning, when the \"trash collectors\" arrive, or Iâ€™ll be hit with a stiff penalty.\n\nHereâ€™s my off-the-cuff rating:\n*Gameplay:* 9.0 [surprisingly hard to master, but satisfying once you do]\n*Graphics:* 8.0 [beautiful motion-capture and particle effects]\n*Sound:* 5.0 [loud whirring is realistic but gets boring. Good voice acting, though.]\n*Replay value:* 8.5 [you can play this nearly every day, with new randomly-generated leaf conï¬gurations]\n*Overall rating (not an average):* 7.9"
  post_title: "Super Leaf Blower 64â„¢ Ofï¬cial Playersâ€™ Guide"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "super-leaf-blower-64%e2%84%a2-of%ef%ac%81cial-players%e2%80%99-guide"
  to_ping: ""
  pinged: ""
  post_modified: "2003-12-08 16:20:51"
  post_modified_gmt: "2003-12-08 23:20:51"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2003/12/super-leaf-blower-64%e2%84%a2-of%ef%ac%81cial-players%e2%80%99-guide/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 188
  post_author: 2
  post_date: "2004-03-01 07:12:06"
  post_date_gmt: "2004-03-01 07:12:06"
  post_content: "The Simple Mail Transfer Protocol is by no means perfect -- its lack of authentication is a prime reason why spam is such a problem -- but I think it got one thing right: it has the right topology for building a person-to-person communications system.<!--more-->\n\nMost current non-email communications topologies are polarized at a few extremes:\n\n* Centralized, with one server hosting everyone. This includes commercial IM systems like AIM and MSN, social networks like LiveJournal and Orkut,\n* Peer-to-peer, with all communications going directly between users (KaZaA, Gnutella, etc.)\n* Isolated, with multiple servers that don't interoperate, like most blogs and bulletin boards.\n\nThe problems with centralized and isolated systems are pretty obvious: they don't interoperate and they don't scale well without heroic measures (AIM uses a server cluster capable of routing a _billion_ IMs a day.) Peer-to-peer is extremely trendy, but it has its own problems: connectivity (firewalls and NATs make it hard for end users to contact each other) and availability (you can't receive data unless you're online.)\n\nSMTP strikes a balance that involves a loose confederation of servers, which connect peer-to-peer, using DNS to locate each other by name; and clients that connect to a single local server that hosts their account. This avoids the scalability issues (the number of independent servers grows as the total user base does) and the connectivity issues (all connections involve a server, which is always online and leads a privileged life with connectivity through any firewall.)\n\nHere are the steps involved in sending a message from point a@foo.com to point b@bar.net:\n\n# Client logged into foo.com's server as user \"a\" sends the server a message addressed to b@bar.net.\n# foo.com server uses DNS to look up the host for bar.net and opens a connection to it.\n# foo.com server sends the message to bar.net.\n# bar.net server waits, if necessary, for user b to log in.\n# bar.net server sends message to client b.\n\nGreat stuff, but I'm not aware of many other protocols that do this. The major other one is the [[Jabber]] instant messaging system. Jabber adds a few improvements: strong authentication of all connections, and use of the same protocol for client-server as for server-server (in email the client-server protocol is not SMTP but either POP or IMAP.)\n\nMy opinion is that some mechanism like this is the right way to go. It also ties in with everyone's dawning suspicion that email as we know it is fatally flawed and needs an overhaul. A protocol that preserves the fundamental topology of SMTP while improving everything else would be a great thing to have."
  post_title: "SMTP"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "smtp"
  to_ping: ""
  pinged: ""
  post_modified: "0000-00-00 00:00:00"
  post_modified_gmt: "2004-03-01 07:12:06"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/words/10/smtp/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 189
  post_author: 2
  post_date: "2004-04-17 00:24:46"
  post_date_gmt: "2004-04-17 07:24:46"
  post_content: "Time to bore you young whippersnappers with my early history in computers. (I saw a couple of other people do it and thought hey! I can do that too!) First we have to set the Wayback Machine for the darkest depths of the '70s, a decade that's oh-so-much funner as retro than it was to live through...<!--more-->\n\n\n*Fall 1975.* I'm in fifth grade. A couple of interesting logic-puzzle worksheets manage to get me interested in math, which has until now been a wasteland of times tables to tearfully memorize. My mom takes me to a nearby place called _Creative Publications_ that published these worksheets, and I get a couple of books and math toys and their catalog.\n\n*November 1975.* I ask for an interesting sounding book from the catalog for my birthday, and receive it. It's called _My Computer Likes Me When I Speak In BASIC_. I devour the book and am blown away by the idea of programming a computer, although I may never actually set eyes on one.\n\n*1976.* I start writing my own BASIC programs in a notebook. I think the first one was to print a table of powers of two. Boring, yes, but the book hasn't taught me any string functions so I only have numbers to work with. I sit in the hallway during recess writing programs, not endearing myself to my classmates. (But in 6th grade I'd lost all my friends for other reasons, so this was a decent substitute.)\n\nIn the summer I find out about a place called the Community Computer Center, in Menlo Park, and get my parents to take me there. It's a bunch of hippies in a storefront with a PDP 11/70 and a bunch of Teletypes and VT-52s, renting out computer time for $5 an hour. Computer power to the people, man! You can play games like WUMPUS or HURKLE, or program in BASIC. My parents leave me sitting at a Teletype for two hours as I do all of the above (I brought my notebook along to type stuff in from.) About 30 seconds of subjective time later, my time is up and I'm dragged blinking into the sunlight, suddenly realizing how light-headed with hunger I am. _This is my formative geek moment. I am forever changed._\n\nThe problem now is how to get better access to computer time, since Menlo Park is way too far to ride my bike, and computers are huge refrigerator-size monsters that live in special rooms. But by eerie coincidence, 1976 is when the idea of the personal or hobbyist computer really begins to take off. My dad's electronics magazines start running ads for LED-covered boxes with names like ALTAIR and IMSAI that are apparently real, live computers you can have in your house. One is shown connected to a terminal, running some sort of game. My head explodes.\n\nMy dad and I subscribe to BYTE magazine (I still have old issues in the garage going back to early '76.) I fill my head with everything there is to know about 8080s and 6502s and S-100 busses and Tarbell cassette interfaces, and memorize the specs of every available home computer (the SOL-20 is my favorite.) Unfortunately my parents won't buy me a computer.\n\n*1977.* I make a friend in junior high who is also into computers. We convince our parents to take us to the CCC on some evenings. We buy a copy of the RSTS/11 Extended BASIC manual from the CCC and enter an Aladdin's cave of string functions, multidimensonal arrays, file I/O and other delights.\n\nIn April(?) my dad takes us to the first personal computer trade show, the West Coast Computer Faire, in San Francisco. We are dazed by this gigantic wonderland of geeky hardware and software. The highlight is the Apple ][, with its unheard-of color graphics and game controllers, which I had seen described in Woz's BYTE article but never touched in the flesh. I get a demo and ask a lot of questions of a guy whom I think must have been either Steve Jobs or Mike Markkula.\n\nThe math room at school has this bizarre ancient Litton programmable desktop calculator the size of a typewriter. It has Nixie tubes for a display, and a card reader. You program it with hole-punch cards in a really weird machine language. In octal. We find this lots of fun.\n\nIn the summer my friend David and I also discover one of the first computer stores, the Byte Shop in Mountain View, which is within bike riding distance. The guys there are OK with having a couple of crazed 13-year-olds hacking their IMSAI computer all afternoon. Sometimes we can't drag ourselves away before dark and our parents have to come pick us up.\n\n*1977-78.* My junior high school gets a Commodore PET and starts a computer class. Those of us who already know much more than the teacher are allowed to take turns at the computer instead of paying attention to the lecture. I had derided the PET as an Apple knock-off when it came out, but it turns out to be a great machine. We discover the netherworld of the PET's RAM as news arrives of undocumented features enabled via the deep magic of the POKE command. Writing values into special memory locations lets us display lowercase letters (!!), read the current keyboard state (!!!!) and directly write to the screen memory (!!!!1!!!11!) Lots and lots of action games result. The C-30 cassette on which I store my programs becomes my most precious possession.\n\nA Computerland store opens up in Los Altos, just a few blocks from school. They have several Apple ][s. Nontrivial numbers of eighth-grade geeks invade the store. The staff aren't entirely happy, but it does seem to impress potential customers that these computers are \"simple\" enough to be used by 13 year olds. (I get asked how old I am a lot.)\n\nMy dad brings home two tech reports from a friend who works at Xerox PARC. _Personal Dynamic Media_ is a description of the Dynabook project which produced the Alto and the first GUI. The other is the _Smalltalk-72 Instruction Manual_, which is absolutely the most mind-blowing thing I've ever read. Objects, messages, methods. Weird characters. Extensible syntax. Windows. Turtle graphics. PARC becomes my shining tower on a hill that I _must_ reach.\n\n*1978-79.* I enter high school and quickly fall in with the Science Fiction Club, the local geek enclave, and am rapidly initiated into the cultural essentials of D&D, _Monty Python_, _The Prisoner_, naÃ¯ve sexual innuendo, and tons and tons of SF novels. We are absolutely despised and picked on, the scum of the school, but I at last have a tribe to call myself part of.\n\nThe physics teacher also happens to have a PET in his classroom and I start hanging out there too. The computer-geek crowd has some overlap, though not that much, with the SF-geek crowd.\n\n*1980.* I get an Apple ][ for Christmas. With an honest to god _floppy drive_, and 16K of memory that I upgrade to 48K with some RAM chips my dad brings home, and Microsoft BASIC. It lives in my room. I am in heaven. Unfortunately I loathe 6502 assembly, but I do a lot of crazed stuff in BASIC, including writing interpreters for a couple of other little languages I've read about in _Creative Computing_.\n\nI buy a copy of Ted Nelson's _Computer Lib / Dream Machines_ and am blown away by his visions of computers for everyone, of hypertext, of computer graphics and interactive multimedia. It's a huge, jumbled, disorganized book that you can read over and over again discovering new tidbits.\n\n*1981-82.* I take a computer class in high school. The lab has an eclectic mix of machines and I learn them all. I learn how to boot the PDP-8 off of DECtape, how to code FORTRAN on mark-sense cards, how to use an IBM 029 keypunch and submit batch jobs. There's also an Apple ][ and a thriving warez scene (only we didn't call it \"warez\" then, kiddies). All floppy copy-protection schemes are cracked and we always have the latest cool games. (Especially the ones by Naser, like Space Eggs.)\n\nAlso importantly, there is a DECwriter hardcopy terminal with a modem. I'm not sure what it was _supposed_ to be for, but the first generation bulletin board system (BBS) scene is thriving in the Valley and there are at least 5 BBS's within local calling range. They only allow one user online at a time so there are lots of busy signals, but we're persistent. I strike up a friendship with a girl in Palo Alto named Lucy Collier. I dream of asking her out but am too shy to ask. In the end she gradually stops logging in and I never meet her. :-(\n\nWe also acquire the fabulous treasure of a secret dial-up number for Stanford's TIP, an ARPAnet access point. From there you only have to press Ctrl-E and then the octal address of an ARPAnet host to be connected. We try lots of random numbers and find all sorts of interesting sites including UCLA and MIT. MIT lets people get \"tourist accounts\" on the ITS system, which I do, and manage to learn a little LISP.\n\nOh, and at one point we got a Sprint access code from a shady personage on 8BBS and used it expressly to dial up a computer in Minnesota that lets us play Dungeon (aka Zork) without a login.\n\n*1982.* I have a summer job at a startup in Palo Alto that has a VAX 11/750 running BSD 4.2 Unix. I learn a lot of Unix, hack C code in vi, play hours and hours of Rogue, am finally granted root access (I still remember the root password: \"harunix\".)\n\n*1982-87.* Caltech. I spend my first six months at college not even going near a computer, nor missing one. I am way too busy trying to pass classes that are a dozen times harder than high school, as well as develop a real social life (_everyone_ is a geek! We are all normal!) and explore the delights and miseries of girlfriends and strong drink.\n\nFinally 3rd term frosh year I take CS 10, the usual intro to programming course, which is taught on these interesting 68000-based HP 9836 \"Chipmunk\" workstations with color graphics and tablets. I finally learn Pascal.\n\nI spend the rest of my college career hacking the Chipmunks. I like Pascal better than C because it has type-checking (remember, this was pre-ANSI-C.) My friends and I replace the horrid text-menu-based interface and filesystem with our own. I print out the entire man page for csh from a Unix system and using it as a guide implement a csh clone for the Chipmunks.\n\nI also do a bit of hacking on VAXen running Unix, but mostly use them for ARPAnet access. I am there for the Great Renaming of the Usenet group hierarchy (net.music --> rec.music, etc.) and for the Stupendous Renaming as DNS replaces the old hand-maintained ARPA naming tables (CITvax.arpa --> cs.caltech.edu, etc.)\n\nIn 1984 and 1985 I have summer jobs at Xerox's nearby Pasadena facility, working in Smalltalk-80. The group there is doing a very complex desktop environment for analysts at the CIA (shhh! Call it \"The Customer\") and I hack my way deep into the Smalltalk classes to extend the text system. Later on I get into the virtual machine (written in a weird language called MESA) and add a polygon-fill graphic primitive and an accelerated save/restore.\n\n*1987.* I finally graduate from college and have a summer job at ... Xerox PARC. More Smalltalk-80 work, writing a graphical programming system for a very weird dataflow-based parallel microprocessor from NEC. This is my first complex GUI app, and I think I did a good job at it. I have no idea at all whether it ever got used for anything after I left.\n\nAfter this point we get into my full-time career, also known as my \"tangled job history\":http://mooseyard.com/Jens/2004/04/jenss-tangled-job-history ..."
  post_title: "My Geek History"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "my-geek-history"
  to_ping: ""
  pinged: ""
  post_modified: "2004-04-17 00:24:46"
  post_modified_gmt: "2004-04-17 07:24:46"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/words/14/my-geek-history/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 190
  post_author: 2
  post_date: "2004-05-13 11:11:17"
  post_date_gmt: "2004-05-13 18:11:17"
  post_content: "<p>This was appended to one of the rare spams to make it through Mail's filter. Perhaps the filter knew I would enjoy some strange mechanical poetry?</p>\n<pre>\n Whose round       soft dog fidgeting.\n Whose noisy laptop is on fire.\n Our round mp3 player falls.\n Whose stupid shining hairy bluish expensive white noisy mp3 player arrives.\n Any given odd shaped forg arrives as soon as his slopy pensil is angry at\nthe place that his brothers stupid magazine stinks.\n Their well-crafted book run while whose white tv stinks and a given white\nmp3 player walks.\n His slopy binocyles stares at the place        that a noisy ram lies.\n Her fancy baby prepare for fight.\n                Any given beautiful soft bottle prepare for fight.\n Whose golden glasses stares the time that                   a noisy dog\nlooks around.\n Whose red white bluish baby smells.\n His brothers little noisy dog is thinking or maybe a given soft tall\nprinter adheres.\n A noisy book fidgeting.\n His brothers silver fancy odd shaped mouse sleeps.\n A given bluish balloon stands-still.\n A bluish glasses smiles however, mine fancy shining table is thinking.\n Mine tall green sofa\n stinks while his brothers white exam book is on fire.\n Her daughters silver expensive exam book lies and any smart table fidgeting.\n A given small bicycle lies the time that his brothers bluish sport shoes\nmakes sound.\n Our bluish dog stares.\n A smart caw arrives as soon as his stupid soda makes sound and still her\ndaughters white forg got an idea.\n Our fancy picture show its value.\n</pre><p><i>--\"Anthony\"; from \"100% free local sluts\"</i></p>"
  post_title: "&#8220;Whose round soft dog fidgeting.&#8221;"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "whose-round-soft-dog-fidgeting"
  to_ping: ""
  pinged: ""
  post_modified: "2004-05-13 11:11:17"
  post_modified_gmt: "2004-05-13 18:11:17"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2004/05/whose-round-soft-dog-fidgeting/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 191
  post_author: 2
  post_date: "2004-05-19 13:49:11"
  post_date_gmt: "2004-05-19 20:49:11"
  post_content: "Way back in 1989 my friend M@ and I used to work at a font company called *Kingsley/ATF Type Corporation*. One evening after work -- actually we were still at work, physically speaking -- we began to consider the subject of anagrams of the company name. After running off the necessary letters (in 100pt ITC Galliard all caps from an Adobe Type 1 font, using Microsoft Word 4.0 on a Mac SE, printing to a 300dpi Apple LaserWriter NTX) and cutting them out (I forget the brand name of the scissors) we set to with gusto.\n\nThe results you can see below. Some phrases are innately anagrammable and some aren't. KINGSLEY/ATF and KINGSLEY/ATF TYPE CORP had vast possibilities, some (SLAG TYPE FIN?) stretching the limits of comprehensibility, others (ALFKE GIN STY, ITSY FLAN KEG, TINTY SLOG) proving so useful that they worked their way into our daily conversation. I've highlighted my favorites in boldface.\n\nh2. KINGSLEY / A.T.F.\n\n<table style=\"margin: 12px 0 12px 0; width: 100%; border: 1px dashed #DDD; font-size: smaller;\"><tr><td> FISKY TANGLE </td><td> FLY EATS KING </td><td> G.I'S FELT YANK </td><td> FINKS GET LAY </td></tr><tr><td> INKY F.L. STAGE </td><td> YET FIG SLANK </td><td> SKY LIFE TANG </td><td> FILA SKY GENT </td></tr><tr><td>GEAKY S.F. LINT</td><td>K.Y. FLING SATE</td><td>KATEY FLINGS</td><td>SKATEY FLING</td></tr><tr><td>*TINKLY SAFE \"G\"*</td><td>E.G., YAK FLINTS</td><td>STAG, FLY NIKE</td><td>*K.Y. ANGEL FIST*</td></tr><tr><td>*ITSY FLAN KEG*</td><td>FLYING SKATE</td><td>*LIFE'S TANGY K*</td><td>F.Y.I.: KENT GALS</td></tr><tr><td>SLANTY IF KEG</td><td>SKANTY IF LEG</td><td>TYKE FINS LAG</td><td>GLINTY FAKES</td></tr><tr><td>*TINGLY FAKES*</td><td>SET FLAY KING</td><td>GET SKIN FLAY</td><td>*ALFKE GIN STY*</td></tr><tr><td>TYKES IN FLAG</td><td>STINGY ALFKE</td><td>STINGY FLAKE</td><td>FLAKEY STING</td></tr><tr><td>*KINGLY FATES*</td><td>FINKY G. TESLA</td><td>F.Y.I.: LEG STANK</td><td>F.Y.I.: TANK LEGS</td></tr><tr><td>SLY KING FATE</td><td>INK GETS A FLY</td><td>*FEY SLAT KING*</td><td>STINKY F. GALE</td></tr><tr><td>FINKY G. STALE</td><td>SKY FELT GAIN</td><td>FINKS YET LAG</td><td>SKIN FELT GAY</td></tr><tr><td>*SING, FELT YAK!*</td><td>SLAG TYKE FIN</td><td>I STANK, E.G. FLY</td><td>SAY \"KING FELT\"</td></tr><tr><td>SAY \"FIG KNELT\"</td><td>KNIFE STY GAL</td><td>*E.G., FAT SLINKY*</td><td>SKIN YET FLAG</td></tr></table>\n\nh2. KINGSLEY / A.T.F. TYPE CORP.\n\n<table style=\"margin: 12px 0 12px 0; width: 100%; border: 1px dashed #DDD; font-size: smaller;\"><tr><td>*YES, FLATTEN PORKY C. PIG!*</td><td>YA KEPT FLYING COPTERS</td></tr><tr><td>*P. ALFKE C PROGS YET TINY*</td><td>FINER TYPES LACK O.T. GYP</td></tr><tr><td>*SPANK EGYPT? TRIFLE COY*</td><td>*PINK EGYPT FELT SO RACY!*</td></tr><tr><td>GECKO PREY-NIFTY SPLAT</td><td>FLAT TYPES GROPE INKY \"C\"</td></tr><tr><td>PECK FELT SIN PAY \"GROTY\"</td><td>PLATTY FINGERS KEY COP</td><td><tr><td>CLIFT'S PERKY PET AGONY</td><td>*SNOTTY GRAPE FLICK? YEP*</td></tr><tr><td>G.Y. LIKE CRAP TYPE FONTS</td><td>PICKY SYNGE LEAPT FOR T</td></tr><tr><td>*YIKES! CRAPPY FONT GELT*</td><td>YETI FLOGS CRAPPY KENT</td></tr><tr><td>CATS PRONG KEY ELF. PITY!</td><td>FELT PANTIES: CORKY GYP?</td></tr><tr><td>CORK PIG FELT Ye PANTIES</td><td>LACK OF TEENY-PIGSTY P.R.</td></tr><tr><td>GOY PAINTER KEPT S.C. FLY</td><td>FIG PLANTERS COPY TYKE</td></tr><tr><td>FRANCE, EGYPT: SPIKY LOT!</td><td>FINKY PLATER GETS GOPY</td></tr><tr><td>*SOFT, INKY GEL-TYPE CRAP*</td><td>SLY KENT OF PEPTIC GRAY</td></tr><tr><td>CLONE REG. FATTY SKIPPY</td><td>GEEKS FLY IN COPT PARTY</td></tr><tr><td>EGYPT FIRES LANKY COPT</td><td>FLY, TANTRIC PEP--GO, KEYS!</td></tr><tr><td>TYKE FOGS TEN CRAPPILY</td><td>YEP, GREY FONT PACK SLIT</td></tr><tr><td>*FAKE PEP CRY: \"TINTY SLOG!\"*</td><td>IF TYPE GONE SLACK, TRY P.</td></tr><tr><td>PLOY GETS PANICKY FRET</td><td>PETS PAY FLYING ROCKET</td></tr><tr><td>*FLYING ROCKET: SPAY PET!*</td><td>*GOT PEPTIC? FRANKLY, YES*</td></tr><tr><td>CG, SPIN PETER ALFKY TOY</td><td>*CG TO PETER ALFKY: SPINY*</td></tr><tr><td>YO, PETER ALFKY: STING P.C.!</td><td>PRONG, IF SLACK, YET TYPE</td></tr><tr><td>*YELTSIN, PACK FOR EGYPT*</td><td>*TINY FLACKS GROPE TYPE*</td></tr><tr><td>FLOG, SPIT, CRANKY PETEY</td><td>TYKE FLIPS ORANGY PECT</td></tr><tr><td>N.Y. GIPPER - TOASTY FLECK</td><td>*YO! FAT N.Y.C. GRIPS PET ELK!*</td></tr><tr><td>PECK FATTY PRINGLES: OY!</td><td>YIPPY KEN FELT COG STAR</td></tr><tr><td>SPANGLY FEET PRICK TOY</td><td>LEAKY P.C. FROG, TINY PEST</td></tr><tr><td>*POPES TRY ICKY FLANGE T*</td><td>PEG TO FRY ICKY PLANETS!</td></tr><tr><td>TASTY KING CREEPY FLOP</td><td>PETTY ELF, SPANKY CORGI</td></tr><tr><td>STRANGLE ICKY FOP TYPE</td><td>INGEST FLOPPY RYE TACK</td></tr><tr><td>LEPROSY TANGY IF PECK'T</td><td>TANGY PRICK FELT POESY</td></tr><tr><td>PICKY POETS FELT ANGRY</td><td>PERKY FACTIONS GET PLY</td></tr><tr><td>GAL PERFECTS PINKY TOY</td><td>FESTERINGLY POKY CAPT.</td></tr><tr><td>POLK (TEENY FAT PIG) CRYS</td></tr></td></tr></table>\n\nh2. INFORMATION SUPERHIGHWAY\n\nHere's a list I found back in 1995:\n\n<table style=\"margin: 12px 0 12px 0; border: 1px dashed #DDD; font-size: smaller;\"><tr><td>HEY, IGNORAMUS -- WIN PROFIT? HA!</td></tr><tr><td>OH-OH, WIRING SNAFU: EMPTY AIR</td></tr><tr><td>I'M ON A HUGE WISPY RHINO FART</td></tr><tr><td>ENORMOUSE HAIRY PIG WITH FAN</td></tr><tr><td>WHEN FORMING, UTOPIA'S HAIRY</td></tr><tr><td>A ROUGH WHIMPER OF INSANITY</td></tr><tr><td>OH, WORMY INFURIATING PHRASE</td></tr><tr><td>INSPIRE HUMANITY, WHO GO FAR</td></tr><tr><td>WAITING FOR ANY PROMISE, HUH?</td></tr><tr><td>HI-HO! YOW! I'M SURFING ARPANET!</td></tr><tr><td>NEW UTOPIA? HORRIFYING SHAM</td></tr></table>\n\nbq. (Information Superhighway anagrams copyright (C)1995 by the author, Mike Morton. All rights reserved. You may reproduce this, in whole or in part, in any form provided you retain this paragraph unchanged.)\n\nh2. Make Your Own Anagrams\n\nThe correct way to generate anagrams is to write or print the source word/phrase in large type, cut out the letters, and push them around. But if you're feeling lazy, you can try an \"automatic anagram generator\":http://www.wordsmith.org/anagram/index.html. Of course, you'll still have to pick through a huge list of anagrams for the few that actually make any sense at all."
  post_title: "Anagrams"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "anagrams"
  to_ping: ""
  pinged: ""
  post_modified: "2004-05-19 13:49:11"
  post_modified_gmt: "2004-05-19 20:49:11"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2004/05/anagrams/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 192
  post_author: 2
  post_date: "2004-05-19 13:50:02"
  post_date_gmt: "2004-05-19 20:50:02"
  post_content: "This is one of my favorite interviews _ever_, and it reminds me of a long-gone era when the Cocteau Twins mattered, mattered _really deeply_, and were making music I could barely believe possible. Music I was not the only one to find wholly impossible to describe...\n\n<!--more-->\n\n\n_[Typed in by hand from a crumbly old copy of the November 16, 1985 issue of Melody Maker]_\n<hr />\n\n<blockquote>How do you interview THE COCTEAU TWINS? Steve Sutherland, who considers them to be something like the voice of God, doesn't know. Well, he sat down and talked to them for a bit, and this is what happened.</blockquote>\n\nh3. THE END\n\n\"In the best of all possible worlds,\" said Robin, \"this wouldn't be happening.\" Hold it right there. I've read this before. I don't want any more.\n\n\"But...\"\n\nNo buts. I'm determined that this will not be another Cocteau Twins interview about how The Cocteau Twins hate interviews because that, after all, after hours of agonised silence and blank incomprehension, is all that anyone's ever gleaned from this lot on paper. I won't sit down and discuss this again. I won't attempt to defend the pathologically rigid rigmarole of the rock'n'roll interview, nor will I perpetrate it further.\n\nSo what shall I do, Robin? What shall I do? And what will I get? Will I get anything? Or is there nothing there to get? Nothing at all?\n\n\"Well, we're not divs but people make us out to be ... we come over like ...\"\n\nYes, I understand that I don't understand.\n\nh3. SOME JUSTIFICATION\n\nThe Cocteau Twins make my favourite music in the whole wide world <strong>ever</strong> and, on November 16 and 22, they release two four-track EPs. I want to talk about them, but I know it's no good. They want them well treated because they envisage a Cocteau Twins backlash on the horizon and they don't think it's fair. Just because they don't fit in, folks think they <strong>refuse</strong> to fit in but it's not the same thing at all. There's nothing willful about The Cocteaus' refusal to play along, they just don't because they do what they do, that's all.\n\nHey, they live on our planet, believe it or not. They eat, they drink, they see what we see and hear what we hear. It's just that what they create when they're locked away somewhere has no bearing on any of this whatsoever. My task, I suppose, is to reconcile this into some sort of sense but all I can come up with is intricate babble which, even in the act of praising, seems to tarnish the pure simplicity of what The Cocteaus do.\n\nI'll admit, at this point, that I was going to wax all wonderfully lyrical about the new Cocteau Twins stuff. I was going to construct some elaborate review of <cite>Tiny Dynamine</cite> (\"Pink Orange Red\", \"Ribbed and Veined\", \"Plain Tiger\" and \"Sultitan Itan\"), some glowing testimony to <cite>Echoes In a Shallow Bay</cite> (\"Great Spangled Fritillary\", \"Melonella\", \"Pale Clouded White\" and \"Eggs and Their Shells\") but I realised that all I'd be doing was conjuring fantasies, evolving mythologies and warping expectations so, at the risk of encouraging accusations of lethargy and cop-out I say this: Buy these records, I think they're brilliant. They exist.\n\nWhy am I squirming? Here's my problem: The Cocteau Twins can't talk about their music because there's nothing to say and I can't write about it because, as it's instrumental with vocal impressions, all I can produce is mind's-eye gibberish. And believe you me, I've said some pretty embarrassing stuff about this lot in the past. Stuff, incidentally, that I stick by.\n\n\"The things you're allowed to write!\" Robin's smiling. \"You went and wrote something about God in one of our reviews. You said we were the Voice Of God or something. I hated that. It gives people the wrong impression. It gives people <strong>your</strong> impression. If I read that, I'd think 'No fucking way am I buying that!'\n\n\"And another time you said I hadn't developed much further than some Banshees album and that we were too loud. That was insulting. The idea of three people totally stationary on stage with no affiliation at all to rock'n'roll making the loudest fucking noise you've ever heard kind of appeals.\"\n\n\"And that thing you said to Robert Smith about his lipstick,\" Liz is trembling.\n\nWhat?\n\n\"You said that Liz Fraser wants to know why you wear your lipstick like that. That was very naughty of you Steve, very, very naughty. I was <strong>so</strong> embarrassed.\"\n\nContrary to common belief, The Cocteau Twins care. A lot.\n\nh3. THE UNMENTIONABLE MENTIONED\n\nThe Cocteau Twins don't exactly scream at you to ask them about their sex lives or the colour of their socks so it all comes down to self-justification and that nebulous area where you've no idea what you're talking about or what will come out and the smallest detail assumes the stature of enigma. Or...\n\nRobin: \"I'm still completely at a loss to understand what people want to know. I'll tell all. We <strong>do</strong> tell all. That's the thing. I can't understand, what more can I say?\"\n\nSome minor hack from the NME spent seven hours grilling them last spring, searching for the Holy Grail, seeking to establish his own reputation as Raider Of The Liz Bark.\n\n\"He completely fucked himself up,\" Liz laughs and laughs.\n\nSimon: \"He was so frustrated. He actually admitted he was getting nowhere. He'd obviously come with this plan of getting us softened up with all these questions about football and films and all the things we like that would make us think he was a really good bloke and then, wham!, in with the big questions at the end. What he didn't quite understand is that there are no big questions and there are no big answers.\n\nh3. THE BIG QUESTION\n\nWhy? Why do you sound like The Cocteau Twins?\n\nh3. ROBIN'S BIG ANSWER\n\n\"Why not?\"\n\nh3. THEY CONFESS\n\nRobin: \"It almost gets to the stage where you just want to turn round to somebody and say 'Yeah, I'm really magical and mysterious, that's what I think about myself. I'm weird and obscure and it rubs off on the music...'\"\n\nSimon: \"Yeah, we're religious, spiritual...\"\n\nLiz: \"Would you like some tea or coffee just now?\"\n\nRobin: \"There's some tins aren't there? I'll have another beer.\"\n\nLiz: \"You'll want a fuckin' straw with it next -- get you pissed quicker.\"\n\nRobin: \"Got any gin?\"\n\nLiz: \"Um ... er ... NO! I distinctly remember you finishing it off last night. Don't drink...\"\n\nRobin: \"But I'm getting my haircut tonight.\"\n\nLiz: \"Yes, I know. You'll fall asleep and wake up with a skinhead -- that'll fuckin' sort you out. You'll never drink again.\"\n\nh3. LIZ FRASER\n\nSmall, very funny, and very, very shy.\n\nAt the photo studio, Liz is being made-up, having her face and hair done. By her side, by the mirror, is a note pad into which she jots every later of foundation, every tint of eyeshadow for further reference.\n\n\"That's typical,\" says Robin. \"Did you notice at home by the record player, there's a piece of paper with instructions on it about how the stereo works, step by step. And by the video there's another list of how to work it. And she wants to learn to drive -- can you imagine <strong>that</strong>?\"\n\nOh yes, a very Liz thing to do.\n\nh3. ROBIN GUTHRIE\n\nFat, funny, delightfully sarcastic, he crimps his hair to stop it looking pubic.\n\nThis thin guy with glasses comes up to him in the Croydon Underground, brandishing a poster advertising the 4AD night and asking for an autograph. Robin looks him up and down, snorts his disapproval and begins to read it out.\n\n\"Xymox, is that us?\"\n\nNo.\n\n\"Wolfgang Press. Is that us?\"\n\nNo.\n\n\"Dif Juz. Is <strong>that</strong> us?\"\n\nNo.\n\n\"Well then, shouldn't you be going to get <strong>their</strong> autographs?\"\n\nThe bloke slinks off, bemused. Robin turns to me and says: \"It's bad enough when they want you to sign Cocteau Twins stuff.\"\n\nThat's a very Robin thing to do.\n\nh3. SIMON RAYMONDE\n\nA genuinely nice and sincere sort of guy.\n\nSimon was \"disgusted\" by the Banshees at Hammersmith Odeon. He'd seen them three or four times before and considered this \"heavy metal\". Worst of all, though, he considered the encore \"dishonest\".\n\nThat's a very Simon thing to say.\n\nh3. MY METHOD\n\nWell, what was there left? The personality angle wasn't paying dividends because, as the antithesis of all they are, it couldn't. The enormous review wasn't on either -- all that verbiage trying to describe something defiantly inarticulate. No, I was left with flotsam, with various meets in various places, with circumstantial evidence. Whether it comes any closer to anything, whether it helps, I don't know but anyway...\n\nMeet one: Liz and Robin's flat in Chiswick. Ground floor. Clean and bare with a Siamese kitten called Otto (after the punk in <cite>Repo Man</cite> ) who bites and scratches and has never heard of house-training. No books about so no clues there. A record player. A video. Lots of videos. A photo of Lillian Gish in the toilet. The door handle comes off in your hand and you have to keep the lid down or the cat might fall in the bowl.\n\nMeet two: Riverside for That Petrol Emotion.\n\nMeet three: The photo session in Covent Garden. A small studio and a pint or two in the pub. (Liz is on cider and Babycham, fact-fiends.)\n\nMeet four: Simon sees the Banshees at Hammersmith Odeon.\n\nMeet five: 4AD night at Croydon Underground -- very much the visiting stars. Robin hates it.\n\nh3. THEIR METHOD\n\nRobin: \"You can't push progression, you can't plan it. Well, if you did, you'd sound really contrived. I'm just starting to realise now that there's a difference between  <cite>Garlands</cite>, <cite>Lullabies</cite> and <cite>Peppermint Pig</cite> but it was probably all very evident to someone who listened to it at the time. We're so close to it, we can't tell.\n\nTheir last album, <cite>Treasure</cite>, was the sweetest luxury, a placid lagoon of dreams after the exotic carnival of <cite>Head Over Heels</cite>. Ivo once told me that he discerned <cite>Heels</cite> being born of the love affair between Robin and Liz whereas where <cite>Treasure</cite> came from was a marvelous mystery.\n\nSimon: \"I can see what you're saying but ... no.\"\n\nh3. TEMPTATION\n\nIf anybody around pop today is enjoying the fact that language obscures as much (and as well) as it reveals its intentions, it's Liz Fraser. Her lyrics are noise games, not nonsense but emotion liberated from cliche. When she sings, my world moves and it means something beyond and without all the blasted, blighted baggage of linguistic nostalgia.\n\nShe uses words but the words never matter, their sounds carry the fullest impact, her voice -- the most desolate ever recorded -- cuts the crap but can't avoid it. We can't handle The Cocteau Twins, we don't possess the critical apparatus to do them justice. It's no big deal on their behalf, no deliberate setting themselves apart from the mainstream, no arrogant isolationism. It's simply that the channels we stomp down to beat pop to a pulp and render it comfortable and comprehensible don't lead us anywhere near The Cocteau Twins.\n\nWe don't touch them and yet, still we try. In Japan, for instance, they've published lyric sheets with all the albums, even renaming <cite>Treasure</cite> at whim <cite>The Woman Who The Gods Loved</cite>.\n\nRobin: \"Tell me if any of these words are what Liz is singing, right? I'm not joking. 'Let us rock you so / Rock you so good.' 'The wave of the earth has got me all fooled now.' 'Should have fixed it before it floated away.'\"\n\nLiz: \"Oh that's fucking disgusting ... <strong>disgusting</strong>. They must think we're a bunch o' perverts or something.\"\n\nRobin: \"Take this fish / Harder than roe / Who sauntered away.'\"\n\nLiz: \"Jesus!\"\n\nRobin: \"Julianne was first called a genius / Julianne a genius too / Our song is framed by a genius / Suddenly she got up and turned it on.'\"\n\nLiz: \"Definitely drug-induced hysteria.\"\n\nRobin: \"'I don't mend no fence.'\"\n\nSimon: \"'I'm a prisoner of the fence.'\"\n\nRobin: \"Look at the sleeve notes. It says here that The Cocteau Twins are three girls, right? And that I sing all the backing vocals on the LP and that my backing vocals are 'psychedelic but never freaky'.\"\n\nLiz: \"Bloody hell!\"\n\nh3. ALL THE THINGS THEY LIKE\n\nSimon supports Tottenham Hotspur and owes me a fiver.\n\nCrime and the City Solution -- especially Roland Howard and his brother's way of smoking fags. Dif Juz -- \"best group in the world\". Steve Martin -- Robin's got all his films plus albums. <cite>Bedazzled</cite>, a Sixties spoof on Faust starring Peter Cook and Dudley Moore -- \"The best film ever\" (Robin). <cite>Pale Rider</cite>, although Liz wanted to see <cite>Peter Pan</cite>. <cite>The Philadelphia Story</cite>, on the box recently.\n\nSimon: \"What a film.\"\n\nLiz: \"Yeah, we just saw the end of it.\"\n\nRobin: \"We saw the whole fucking thing! We saw it from five minutes after it started.\"\n\nLiz: \"Oh, did we? I thought we only saw the end. It did seem to last for a long time though.\"\n\nThe Jesus and Mary Chain.\n\nSimon: \"They're <strong>so</strong> good.\"\n\nRobin: \"Yeah, but their records are all becoming a formula. They've had brilliant tunes but they're all Spector/Beach Boysy-type tunes with loads of feedback on top. \"Just Like Honey\" is the same, just toned down a bit. I'd like to mix one of their records...\"\n\nThat Petrol Emotion: Robin would like to produce them.\n\nThe Damned.\n\nLiz: \"I want to go see them. I think they're really great. I really do.\"\n\nRobin: \"I had a ticket to see them once but it was too foggy and all the trains were canceled.\"\n\nSo he decided to form his own band...\n\nSimon: \"Because you couldn't see The Damned...\"\n\nRobin: \"Maybe you could help us write a legend!\"\n\nh3. ALL THE THINGS THEY HATE\n\n<cite>Rambo</cite> -- \"Rubbish! Have you seen it? There's this bit where he comes out of this wall of mud and a few seconds later he's clean. And the girl in the jungle with all the make-up on ... I've seen loads of films lately which have been really good but the endings are just moralistic, patronising, telling the audience what the whole film's been about. Ken Russell's <cite>Crimes Of Passion</cite> is just like that, it's appalling, absolutely disgusting, like being at a dirty movie. The sex scenes go on for about 20 minutes and everybody else in the cinema was an old man with a raincoat over his lap -- I was thinking \"Hang on a minute, I shouldn't be here.\"\n\n<cite>Desperately Seeking Susan</cite>?\n\nSimon: \"I don't want to see it because I don't want to like Madonna. I actually like not liking her, thinking she's a real slagbag.\"\n\nSigue Sigue Sputnik?\n\nSimon: \"They're dreadful, abysmal. They won't do anything will they?\"\n\nWith a good producer, a Chris Thomas, someone who can hone down their eight minutes of noise to three minutes of melody...\n\nRobin: \"They look so silly. Mind you, for that sort of money, even you'd dress up, look silly and make bad records wouldn't you?\"\n\nYeah.\n\nh3. MERE MORTAL CONCERNS\n\nSelf parody?\n\nRobin: \"It happened to us about a year and a half ago. It happens to everybody. You can't do anything about it, you can't deliberately stop and change. You've got to work your way through it.\"\n\n4AD?\n\nRobin: \"It's been good to learn about the music business this way, to learn about all the nasty little things that I don't think we'd have learned from a major because we'd just have been exploited straight away. I don't think we'd get ourselves into that situation now because we're older and wiser. It actually seems quite an appealing idea to screw a major for as much as you could possibly get and then just do nothing because you know how corrupt the whole thing is and how everyone else seems to do it.\"\n\nMoney?\n\nSimon: \"It's all relative. These groups who get signed for  250,000, it doesn't mean 'We're giving you  250,000, go and buy yourself a house and lots of cars.' It means 'Here's a loan until you make your records.' We don't get very much money and the records sell.\"\n\nRobin: \"We don't take big advances and we recoup so we don't owe anybody anything. I'd rather be in that situation. Funnily enough, Liz and my biggest form of income's <cite>Garlands</cite> because it cost  800 to make so that recouped long, long ago. Our budgets for making records are ridiculously small, not 'cause we're mean or we rush things, it's just that we don't really take very long to do it.\"\n\nHeroes?\n\nLiz: \"When we were in Los Angeles, Robin found a ... well, you tell it Robin.\"\n\nRobin: \"No, you tell it.\"\n\nLiz: \"We found a bookmatch of the hotel John Belushi died in. Well, when we found it we didn't know that but then we found out but Robin lost it.\"\n\nSilence.\n\nRobin: \"That's a Liz anecdote.\"\n\nh3. WHAT WAS...\n\nThe Cocteau Twins toured Japan this year, rode the bullet train, felt restricted by the cities and affronted by the Westernization. They also played in America where they were constantly asked when and why they formed This Mortal Coil and where, against their better judgment, they released a \"Best Of\" LP.\n\nExtra-curricular duties include building a 16-track studio in Maida Vale, dismantling and relocating it in Acton, and producing Felt, Dif Juz and the Wolfgang Press.\n\nh3. WHAT IS...\n\n<cite>Tiny Dynamine</cite> and <cite>Echoes In a Shallow Bay</cite> were recorded under no pressure and were never intended for release. The tracks evolved into two EPs because \"When you do an LP, it's like a statement of what you've been doing, a concerted effort. This is more complacent probably.\" Robin laughs. \"They're not singles, there are no seven inches obviously, they're 12 inches, they're not long versions of anything, they're not remixes. They're just a bunch of songs, EPs in the old sense of the word. No one song is any more important than any other. People think we're being weird or something but we're not...\"\n\nh3. WHAT SHOULD...\n\nThere's a collaboration on the cards between The Cocteaus and Harold Budd, the avant-gardist they met in America. He's about to send them backing tapes and vice-versa and the cross-cultural experiment may well be filmed for Channel 4.\n\nh3. AND WHAT WILL NEVER BE\n\nThe Cocteaus were asked to appear on <cite>Wogan</cite> but, much to their regret, it was turned down on their behalf.\n\nh3. THE FUTURE\n\nRobin: \"Obviously a revival, probably American. I can't understand it. Everybody took the piss out of the Mod revival but nobody's taking the piss out of this blatant Byrds revival. Everybody's taking it seriously.\"\n\nSo where does that leave The Cocteau Twins?\n\n\"In 10 years time, there will be a Cocteau Twins revival.\"\n\nAha.\n\nh3. I CONFESS\n\nIf the process of interview is to ascertain some truth, to nudge some reality, to realise there really aren't any answers, then I've failed. If the essence of this piece was to avoid an obsessive autopsy of The Cocteau Twins' problematic relationship to the interview, I've let you down badly. It's here, it's inescapable and I'm circling, searching for something I can't define, struggling to discover whether that there isn't anything to discover is the big fact or just a conveniently mystical cop-out.\n\nCertainly the people I met and the records I hear don't match up too well, don't fit. I'm speaking of what stubbornly won't be spoken of and it's the best I can do to tell you that, of all the outfits I've ever met, the lives of the characters of The Cocteau Twins are the least informative when applied to their music. And naturally, in saying that, I open two options, each equally inappropriate: they're not fakers, they wear no masks, they hide nowhere, nor are they recipients of some mysterious muse, they don't act as ciphers for some spiritual genius descending from the aether.\n\nThe Cocteau Twins just go and do and they don't know why so why the hell should I?\n\nh3. (IN) THE BEGINNING (WAS THE WORD)\n\n\"That was the shittiest interview we've ever done...\"\n\nIt's okay.\n\n\"But we said nothing, talked about nothing...\"\n\nIt's okay.\n\n\"But what are you gonna write about?\"\n\nOh, I'll make it up. I'll write <strong>about</strong> you. I'll think of something.\n\n\"But that means we're in your hands, we're at your mercy...\"\n\nAha, well the hack always has the last word. This is it...\n<hr />\n<i>Copyright (C) 1985 IPC Magazines, Ltd.\nReproduced without permission.</i>"
  post_title: "Cocteau Twins interview (November 1985)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "cocteau-twins-interview-november-1985"
  to_ping: ""
  pinged: ""
  post_modified: "2004-05-19 13:50:02"
  post_modified_gmt: "2004-05-19 20:50:02"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2004/05/cocteau-twins-interview-november-1985/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 41
  post_author: 2
  post_date: "2006-08-23 21:50:29"
  post_date_gmt: "2006-08-24 04:50:29"
  post_content: "This is the blog of Jens Alfke.\n\n*Introverted, intuitive, thinking, perceiving.* I live to make things: most often software, sometimes designs or mixes or stories or photos. (I wish I could make music.)\n\n*Father, husband.* My home is a nest of family. Outside is overrun with flowers and vines and shade trees, inside with books and CDs and kids' drawings and game pieces and game cartridges.\n\n*Worker, dreamer.* I'm driven by visions of things that could be.\n\nh3. Contact\n\nSend friendly correspondence to <b><tt>thought-palace</tt></b> at this domain.<!--more-->"
  post_title: "About"
  post_excerpt: ""
  post_status: "static"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "about"
  to_ping: ""
  pinged: ""
  post_modified: "2006-08-23 21:50:29"
  post_modified_gmt: "2006-08-24 04:50:29"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/2006/08/about/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 44
  post_author: 2
  post_date: "2006-10-07 13:22:30"
  post_date_gmt: "2006-10-07 20:22:30"
  post_content: "Things to change/add/fix about this blog. Some I may wire together out of the vast flea market of WordPress plugins, some I may have to code myself.\n\nh2. New Features\n\n* <strike>OpenID comment authentication</strike>\n* Email subscriptions to post comments\n* Semi-threaded comments (one level of nesting like Digg.com)\n* Wiki linking\n\nh2. Improvements\n\n* \"More Posts...\" button at right end of home page\n* Make category pages show at least excerpts\n\nh2. Bug-Fixes\n\n* Feeds use article excerpts if present, but with no indication that there's more content. Either make them use the full article, or put in a \"More...\" link."
  post_title: "To Do List"
  post_excerpt: ""
  post_status: "static"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "to-do-list"
  to_ping: ""
  pinged: ""
  post_modified: "2006-10-07 13:22:30"
  post_modified_gmt: "2006-10-07 20:22:30"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/to-do-list/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 325
  post_author: 1
  post_date: "2009-09-06 18:20:13"
  post_date_gmt: "2009-09-07 01:20:13"
  post_content: "This is the blog of Jens Alfke.\r\n\r\n<strong>Introverted, intuitive, thinking, perceiving.</strong> I live to make things: most often software, sometimes designs or mixes or stories or photos. (I wish I could make music.)\r\n\r\n<strong>Father, husband.</strong> My home is a nest of family. Outside is overrun with flowers and vines and shade trees, inside with books and CDs and kidsâ€™ drawings and game pieces and game cartridges.\r\n\r\n<strong>Worker, dreamer.</strong> Iâ€™m driven by visions of things that could be.\r\n\r\n<h3>Contact</h3>\r\n\r\nSend friendly correspondence to <tt>thought-palace</tt> at this domain."
  post_title: "About"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "2-autosave"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-06 18:20:13"
  post_modified_gmt: "2009-09-07 01:20:13"
  post_content_filtered: ""
  post_parent: 2
  guid: "http://jens.mooseyard.com/2009/09/2-autosave/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 326
  post_author: 1
  post_date: "2009-06-17 09:30:56"
  post_date_gmt: "2009-06-17 16:30:56"
  post_content: "This is an example of a WordPress page, you could edit this to put information about yourself or your site so readers know where you are coming from. You can create as many pages like this one or sub-pages as you like and manage all of your content inside of WordPress."
  post_title: "About"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "2-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-06-17 09:30:56"
  post_modified_gmt: "2009-06-17 16:30:56"
  post_content_filtered: ""
  post_parent: 2
  guid: "http://jens.mooseyard.com/2009/06/2-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 330
  post_author: 1
  post_date: "2009-09-06 22:11:34"
  post_date_gmt: "2009-09-07 05:11:34"
  post_content: "I finally bit the bullet and upgraded to the latest WordPress from the seriously prehistoric version I used to run (I think it was 2.0.4 or something like that.) With the current attacks against older versions, it finally seemed like a worthwhile thing to waste an afternoon on. :-P\n\nAlmost everything should work more or less the same. I've taken the opportunity to move to a subdomain -- jens.mooseyard.com -- but the old URLs redirect. The theme is different, because my hacked-up, customized old theme probably wouldn't have survived the upgrade intact. I can't say I like this one better, but it'll do.\n<!--more-->\nThe only data loss I know of is the email subscriptions. If you were subscribed to the comments of any prior post, that's gone now. If you still have something new to say, you can post it and check the \"Subscribe\" checkbox, and then you'll get emails again."
  post_title: "Long-Overdue Upgrade"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "328-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-06 22:11:34"
  post_modified_gmt: "2009-09-07 05:11:34"
  post_content_filtered: ""
  post_parent: 328
  guid: "http://jens.mooseyard.com/2009/09/328-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 331
  post_author: 2
  post_date: "2009-09-07 23:34:16"
  post_date_gmt: "2009-09-08 06:34:16"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of grapes in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't African elephants like to play cards?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall out of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall out of the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "the-top-131-elephant-jokes"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:48:50"
  post_modified_gmt: "2009-09-08 06:48:50"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=331"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 207
  post_author: 2
  post_date: "2006-10-13 23:33:37"
  post_date_gmt: "2006-10-14 06:33:37"
  post_content: "There's an interesting online competition going on called \"My Dream App\":http://mydreamapp.com/. The idea is that a bunch of people pitch their ideas for a Mac application, and the set of ideas gets winnowed down in several rounds of public voting, until one is left. A group of experienced developers have promised to implement the winning idea as a shareware app, whatever it turns out to be.\n\nIt's a fun concept, but it highlights some of the problems of having end users design software. A number of the proposals give me a particular sinking feeling I associate with user-interface design meetings: lots of ideas that sound super-cool as one-sentence pitches, accompanied by irresistibly glitzy faked-up screen shots (all replete with translucency, rounded corners, and this year's _de rigeur_ reflections). But too often there's no \"there\" there. It's all so vague that I can sense that these people haven't thought through the difficult bits or worked out a coherent idea of what the app will do.\n<!--more-->\n\nIt's kind of like being a writer and having someone come up to you at a party and say \"I have this _brilliant_ idea for a novel...\" followed by a rambling series of plot twists, closing with \"â€¦and I've done the hard part, now you just have to write it down!\"\n\nh2. Case In Point\n\nThe idea that frustrates me the most is called \"Hijack\". (I'd link to it, but the site is thoroughly Ajax-y that I can't find a URL for this page. You'll just have to start at the home page and click on \"Hijack\". Oh well; permalinks are so 2004 anyway.) This is to be a super-duper native GUI interface to web forums. Like an email app or RSS reader, it will show all the posts of every forum you subscribe to in a consistent interface, tracking new unread posts and threads. Great stuff! What server does this work with? _All of them!_\n\nYup. In an amazing feat of hand-waving, this app is going to Just Work with every BBS program under the sun, through the miracle of screen-scraping. An army of volunteers are going to code and maintain scripts that will strain through the murky tag soup and extract every bit of information you need. Even though every single installation of every single brand of web forum is different, and they get redesigned all the time, and in many cases some sort of AI would be required to figure out how to reassemble the semantics from the stuff on the screen.\n\n(I'm sure that by now my colleague Jessica is shivering uncontrollably, if she's still reading. Jessica did a lot of work on Sherlock, including continued maintenance of the channels. Many of the channels work this way, by scraping the HTML of various web sites. They are frustrating to maintain because the sites keep changing their design, which breaks the scripts that run the associated channel. Few people know that the channels are dynamically updated, with new versions downloaded when necessary whenever you launch Sherlock. It has to be that way, because otherwise Sherlock itself would have to be Software-Updated many times a year. Now, consider that Apple only ships/supports a handful of channels, and that these are vastly simpler than a web content-management system. The task of doing this kind of development and maintenance for every damn BBS is just mind-boggling.)\n\nh2. Thinking Inside The Box\n\nBut what bothers me the most is not just that it's infeasible. It's that it's a _horrendous kludge_. It's thinking completely inside the box. \"I read so many of these forums, and they're ugly and I can't track them. I know! I'll make an app that will read the forums for me!\" It reminds me of Gopher and Archie, which were now-quaint attempts to spackle over the old ARPAnet by putting a textual menu system and a searchable index on top of the maze of FTP servers. They were kind of neat, but as soon as NCSA Mosaic appeared they were history.\n\nDon't get me wrong, I absolutely love the idea of an elegant, unified user interface for distributed many-to-many discussions. I've been obsessed by it for years, in fact. But the real way to do this is to build protocols and servers that make it work, and then robust and reliable clients can be plugged into them. The need for this has been obvious to me since about 1997. The world keeps getting closer and closer to it, in incremental steps starting with RSS.\n\nI think that we actually have most of the necessary pieces now â€” the \"Atom format\":http://tools.ietf.org/html/rfc4287 and \"publication protocol\":http://tools.ietf.org/wg/atompub/draft-ietf-atompub-protocol/, the \"Atom threading extensions\":http://tools.ietf.org/wg/atompub/draft-snell-atompub-feed-thread-12.txt, and decentralized identity systems like \"OpenID\":http://openid.net. All it takes now (he said with slight sarcasm) is getting the BBSs to adopt some of these standards in a coherent and compatible way, so that news-readers can follow and track all of the threads, posts and identities involved."
  post_title: "Dream apps and the perils of screen-scraping"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "dream-apps-and-the-perils-of-screen-scraping"
  to_ping: ""
  pinged: ""
  post_modified: "2006-10-13 23:33:37"
  post_modified_gmt: "2006-10-14 06:33:37"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/10/dream-apps-and-the-perils-of-screen-scraping/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 29
-
  ID: 208
  post_author: 2
  post_date: "2007-01-21 11:05:49"
  post_date_gmt: "2007-01-21 18:05:49"
  post_content: "It's amusing how Steve Jobs' remarks disparaging the idea of Java on the iPhone have ignited controversy. His point was, obviously, that the iPhone's browser won't support Java applets; which is a no-brainer because applets were killed dead-dead-dead by Flash and Ajax. But this seems to have riled up everyone who still cares about non-server-based Java, leading to the weird situation of seeing \"Java\" and \"Mac\" in the same sentence again*. Apparently some people still cling to the glorious dream of writing cross-platform GUI applications, waving tattered \"Write Once Run Anywhere!\" banners and clutching 'Little' Red Books with Duke's picture on the front.\n\n<h3>Flashback</h3>\n\nMe, I defected long ago. I'm another of those Apple Java engineers who dropped out. I spent five years as a raving Java fanboy, but I gave up after optimizing AWT, implementing drag and drop, and trying to make 1,200 pages of crappy APIs do the right thing on the Mac. Then I took a one-week Cocoa training course, and wrote the first prototype of iChat.\n\nDesktop Java never worked because Sun tried to build their own OS on top of the real OS, duplicating every API and feature. This led to terrible bloat, making every app as heavyweight to launch as Photoshop. Worse, the GUI portions of the Java platform are awful, because Sun is a server company with no core competency at GUIs. The APIs are too clumsy to code to, and compared to any decent Mac app, the results look like a Soviet tractor built on a Monday.\n\n<h3>Why Cocoa Pwnx0rz</h3>\n\nThat Cocoa training class was, as I've said before, one of the biggest eye-openers of my career. It was so damn easy to build beautiful, functional applications that I walked out feeling like I'd climbed into some giant mecha robot and could now lift huge girders with a wave of my pinky.\n\nThree important things you need to be able to make apps with great human interfaces:\n<ol><li> You need to lay out the user interface components visually, by hand, with total control over where they go. Automated LayoutManagers don't cut it. A corollary of this is that you can't move a UI layout from one platform to another and have the computer make everything fit. Computers don't lay out interfaces by themselves any better than they can translate French to English by themselves.\n</li><li> You need to be able to change the UI around really easily during development â€” after user testing, or a Steve Jobs encounter session â€” even after you've attached a lot of code to it. That means no RAD tools that write code for you, because once their code mingles with your code, it gets hard to disentangle. Instead, the UI should be described with data, like an Interface Builder \".nib\" file.\n</li><li> Changing the UI around also requires being able to change your own UI code easily. As the Ruby and Agile Programming zealots always point out, strict type checking can really get in the way of this. Writing endless Listeners and Adapters and inner classes was one of my least favorite parts of Java programming. Objective-C and AppKit have a good approach, letting you use type-checking where it's important but leaving looser connections at the UI level so you can plug and re-plug connections easily.</li></ol>\n\n<h3>My Theory</h3>\n\nMy theory is that Java desktop apps succeed only in niches where UI design and usability don't matter: development tools and enterprise software. Programmers expect things to be crude and complicated: anyone who'll voluntarily use 'vi' in the 21st century will put up with anything**. And the poor users of enterprise software don't have a choice: they have to run the damn app no matter how awful it is, because it was selected by an MIS department that could care less about usability.\n\n<h4>Footnotes</h4>\n\n * Not that this controversy has anything to do with the Mac. The iPhone is not a Mac, the Mac still runs Java, and no one is talking about taking it away.\n\n ** And that goes for 'emacs' too (with apologies to my boss). I thought emacs was really cool, in 1986. That's when it was really cool to have a DEC VT220 terminal in my dorm room with a 9600 baud connection to a VAX running BSD 4.3. Also, I listened to Depeche Mode."
  post_title: "In Which I Think About Java Again, But Only For A Moment"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "in-which-i-think-about-java-again-but-only-for-a-moment"
  to_ping: ""
  pinged: ""
  post_modified: "2007-01-21 11:05:49"
  post_modified_gmt: "2007-01-21 18:05:49"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/01/in-which-i-think-about-java-again-but-only-for-a-moment/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 77
-
  ID: 209
  post_author: 2
  post_date: "2007-01-23 00:24:31"
  post_date_gmt: "2007-01-23 07:24:31"
  post_content: "I went on a free-font-downloading bender last weekend. I still love typography, and I'm glad to see the arcane art of type design isn't dying out. Back in the old days of Desktop Publishing, you had a choice between high-quality but expensive fonts from reputable foundries, or a bunch of cheap but crappy knockoffs done in Fontographer.\n\nBut now, thanks to mass amateurization, there are people who actually know what they're doing, who design new typefaces for the fun of it and give them away. (The cannier ones give a few away as teasers and charge for the rest.) Collecting these makes for a fun evening once in a while, at least it does if you share my predilections. There's the surprise of discovery, the glee of downloading it for free, and then later the avaricious satisfaction of organizing the fonts on your computer, like Scrooge McDuck running coins through his fingers.\n\nThe problem is that these days I don't actually have a whole lot of _use_ for fonts. Desktop Publishing is passÃ©, I hardly ever print anything, and when I design something for the web I can't use obscure fonts that other people don't have. It's frustrating! It makes me want to start a zine.\n\nh3. \"Free fonts, huh?\"\n\nNow everyone's waiting for me to cough up the links to these beautiful fonts. Well, I did say it was a \"bender\", and one of the aspects of a bender is that you're not paying a lot of attention to how you got where you are ... as when a friend of mine in college famously regained consciousness late one evening hanging from the dining room chandelier. So you can understand that I wasn't carefully bookmarking everything. Still, from the leftover detritus I can piece together links to a few of the sites I crawled through:\n\n* The candidly-named \"FontLeech\":http://fontleech.com/\n* \"Smeltery.net\":http://www.smeltery.net/ [Warning! Clicking this link will resize your browser window too large, and then perversely open a new one; but the delights within will make everything all better]\n* Smashing Magazine breathlessly reveals \"Five Freefonts You Shouldn't Have Missed\":http://www.smashingmagazine.com/2007/01/19/7-freefonts-you-shouldnt-have-missed/\n* \"Vitaly Friedman's listings\":http://www.alvit.de/blog/article/20-best-license-free-official-fonts of free quality fonts, which send you off in a dozen directions at once\n* \"COM4t\":http://com4t-fff.seesaa.net/ has several lovely fonts scattered over a site that makes it hard to tell where the avant-gardery ends and mere Engrish begins\n\nh3. Show & Tell\n\nI should _show_ you at least one of these ... my pick is COM4t's gorgeous \"Spirequal Light\":http://com4t-fff.seesaa.net/article/16625385.html, which would have been quite at home in the legendary \"American Type Founders 1923 catalog\":http://exhibits.itchyrobot.com/ostend.pl?exhibition=ATF23&pageset=22:\n\n<img src=\"http://com4t-fff.up.seesaa.net/image/Spirequal-L-Typography.gif\"/>"
  post_title: "So Many Fonts, So Little Print"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "so-many-fonts-so-little-print"
  to_ping: ""
  pinged: ""
  post_modified: "2007-01-23 00:24:31"
  post_modified_gmt: "2007-01-23 07:24:31"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/01/so-many-fonts-so-little-print/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 210
  post_author: 2
  post_date: "2007-01-30 12:17:56"
  post_date_gmt: "2007-01-30 19:17:56"
  post_content: "<img id=\"image35\" src=\"http://mooseyard.com/Jens/wp-content/uploads/2007/01/i-will-not-assume-untrusted-data-is-valid-utf-8.png\" alt=\"I Will Not Assume Untrusted Data Is Valid UTF-8\" style=\"width: 100%; max-width: 505;\"/>"
  post_title: "Whoopsie!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "whoopsie"
  to_ping: ""
  pinged: ""
  post_modified: "2007-01-30 12:17:56"
  post_modified_gmt: "2007-01-30 19:17:56"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/01/whoopsie/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 211
  post_author: 2
  post_date: "2007-02-02 09:12:38"
  post_date_gmt: "2007-02-02 16:12:38"
  post_content: "_\"I have verified that I can create a sound file that can wake Vista speech recognition, open Windows Explorer, delete the documents folder, and then empty the trash.\"_\nâ€” \"George Ou, ZDNet\":http://blogs.zdnet.com/Ou/?p=418\n\nSounds like computer psychosis to me. \"I'm sorry, Dave, but I can't open that. The voices told me to delete all of your files.\""
  post_title: "Computer Psychosis"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "computer-psychosis"
  to_ping: ""
  pinged: ""
  post_modified: "2007-02-02 09:12:38"
  post_modified_gmt: "2007-02-02 16:12:38"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/02/computer-psychosis/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 212
  post_author: 2
  post_date: "2007-02-18 16:41:19"
  post_date_gmt: "2007-02-18 23:41:19"
  post_content: "The problem with \"writing about something I dislike\":/Jens/2007/01/in-which-i-think-about-java-again-but-only-for-a-moment/ is that, after the momentary pleasure of getting it off your chest, there's not a lot of motivation to read people's responses (especially the argumentative ones.) Better to pick as a topic something that I _do_ like very much ... such as music.\n\nI can't claim to be an expert on music: I can only barely play an instrument, my dj skills are wack, the theory hurts my brain, and my knowledge is encyclopedic only in a few micro-genres. But I'm rabidly enthusiastic about it; and fortunately, music nowadays is tightly entangled with computer technology, which (like any engineer) I _can_ easily sound like an expert on.\n\n<!--more-->\nAnd fortuitously, this month is open season on \"open letters\" on digital music. I thought \"SJ's\":http://www.apple.com/hotnews/thoughtsonmusic/ was pretty damn good really, probably better than I could manage; but fortunately many of the answer letters have set the bar so low that I think I can hold my own even though I'm neither a \"half-literate sports team owner\":http://www.blogmaverick.com/2007/02/07/what-should-the-music-biz-do-next/ nor a \"PR duckspeak generation algorithm\":http://daringfireball.net/2007/02/macrovision_translation.\n\nh3. First some ground rules.\n\n# I don't speak for my employer. I don't work on or cruise-direct anything directly music-related, and I'm not palzy-walzy with anyone who does. This is my blog on my domain, and I'm writing this on my computer on my patio on my weekend off. _\"I am not a number â€” I am a free man!\"_ \"â€ \":http://en.wikipedia.org/wiki/The_Prisoner\n# I don't have answers. Questions and doubts are more interesting and useful at this stage. _\"If a man ... be content to begin with doubts, he shall end in certainties.\"_ \"â€ \":http://www.btinternet.com/~glynhughes/squashed/bacon.htm\n# I am not trying to sound cooler-than-thou (q.v.)\n\nh3. My background.\n\nAs disclaimed above, I don't have serious Musical Skills. But I can listen to it real good! I love playing music, and the ancillary activities like discovering new artists, hunting down obscure albums, poring over liner notes and biographies, \"making mixtapes\":http://mooseyard.com/recordings/, and babbling to my friends about how they _have to_ listen to this awesome new album I just found.\n\nI've been in this state since about age eight(?) when I discovered my parents' copy of the Beatles' _1962-1966_, the \"Red Album\". After playing that to death and nearly going blind reading the black-on-red lyric sheets, I started buying their other albums. I was pretty monotheistic (quadratarian?) about the Beatles for a few years, but in high school I got into first jazz, then Classic Rock (which wasn't that classic yet), then prog-rock, then \"New Wave and punk\":http://mooseyard.com/recordings/mub37/. Since then I've mostly listened to various flavors of indie-rock, post-rock, electronic-music-with-beats, and ambient music; with forays into New Music (aka minimalism or \"that deedly-deedly stuff\"), experimental noise, Balkan folk, big-band / swing, Baroque, instrumental surf, and so forth.\n\nI'm aware that, in the grand scheme of history and the globe, that's spanning the gamut of genres from A to B, but at least I know what I like. And I'm always willing to try new things â€” Renaissance polyphony, death-metal, 1930s country music, rai, Justin Timberlake â€” if, like Linus's pumpkin, they're sincere.\n\nBy the way, this is not meant to put down anyone else's musical taste, or point out how cool I am. I could (and have) walk into any college radio station and get that attitude aimed at me by some DJ with a crate of out-of-print Lithuanian ska-tech remix 12\"s. That's no fun! If you want to club people with 'tude, explain to them why their favorite API sucks. You talk about _music_ to share it, make friends, and find more of it, not to alienate people.\n\nh3. _â€”skritchy turntable backspin SFXâ€”_\n\n\"...You talk about music to share it, make friends, and find more of it...\"\n\nOops, there's that loaded word \"share\". Where'd that come from?\n\n* Who told me I had a _right_ to \"share\" music?\n* What do \"friends\" have to do with what is, after all, a commercial transaction?\n* Where _did_ I \"find more of it\", hmm? At an officially-sanctioned retailer of shrink-wrapped CDs or DRM-wrapped files? Or maybe ... _on the interwebs???_\n\nBoy, those are some swell questions. Too bad I'm out of time for now. I gotta go."
  post_title: "Music (Prologue)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "music-prologue"
  to_ping: ""
  pinged: ""
  post_modified: "2007-02-18 16:41:19"
  post_modified_gmt: "2007-02-18 23:41:19"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/02/music-prologue/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 49
  post_author: 2
  post_date: "2007-01-30 12:14:08"
  post_date_gmt: "2007-01-30 19:14:08"
  post_content: ""
  post_title: "I Will Not Assume Untrusted Data Is Valid UTF-8"
  post_excerpt: ""
  post_status: "attachment"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "i-will-not-assume-untrusted-data-is-valid-utf-8"
  to_ping: ""
  pinged: ""
  post_modified: "2007-01-30 12:14:08"
  post_modified_gmt: "2007-01-30 19:14:08"
  post_content_filtered: ""
  post_parent: 36
  guid: "http://mooseyard.com/Jens/wp-content/uploads/2007/01/i-will-not-assume-untrusted-data-is-valid-utf-8.png"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 213
  post_author: 2
  post_date: "2007-03-02 11:27:42"
  post_date_gmt: "2007-03-02 18:27:42"
  post_content: "\"Daring Fireball\":http://daringfireball.net has an occasional feature called \"Jackass Of The Week\" that highlights exceptionally stupid or misleading public statements made about Apple. Lately it seems like \"analyst\" Rob Enderle has \"established a lifetime lock on the award\":http://daringfireball.net/2007/01/enderle_leg_pulling, but on the off chance it's still in play, I'd like to nominate Rep. \"Mary Bono\":http://bono.house.gov/ (R, CA) based on \"her rhetorical questions to Tim Berners-Lee (!) at a Congressional hearing yesterday\":http://www.macworld.com/news/2007/03/01/bernerslee/index.php :\n\nbq. Bono questioned if [removing DRM] would prevent mass stealing of copyright materials. â€œIs that not the equivalent of having a speed limit but not enforcing the speed limit?â€ she asked.\n\nWe _do_ have a speed limit that's not generally enforced. How often do you see a Highway Patrol car? How often do you see someone get pulled over? Based on my commute, my answers are \"maybe once a week\" and \"maybe once a month\". And yet the highways of Silicon Valley have not devolved into \"Mad Max\" or \"Death Race 2000\". Most people speed a little bit (don't tell anyone, but I usually drive 70 instead of 65, and sometimes I kick it up to 73 when Underworld or Led Zeppelin come up on my iPod.)\n\nSome people drive much too fast, or recklessly, and cause accidents. But putting enough police cars on the road to arrest everyone driving over 65 would be hideously expensive and cause chaos; while installing tamper-proof governors on all engines to enforce speed limits is the kind of silliness used only in satirical SF stories.\n\nBut it gets better!\n\nbq. Bono said strong protections for digital content are needed. â€œWith great respect to Steve Jobs, heâ€™s trying to sell hardware, first and foremost,â€ she said. â€œI wonder if he would feel the same way about his patents being on the Internet free of patent protection.â€\n\nEarth to Ms. Bono: Apple's patents _are_ available free on the Internet. The Federal government _requires_ that they be made available. Like \"this one\":http://www.patentreader.com/pdf?num=7166791 [PDF] covering the user interface of the iPod. Anyone can read these patents. Anyone can use them to figure out the workings of a patented device, and use them as the basis of their own research on improved devices, and even patent and sell their own sufficiently-novel improvements. That is the _whole point_ of patent law: to keep inventors from hiding their ideas, and to encourage creativity and innovation by letting inventors freely build on the ideas of other inventors. Doesn't that sound nice?\n\nh2. Speaking of patents, Ms. Bono...\n\nLet's compare & contrast what patents provide:\n\n# Limited term of monopoly (is it still 17 years?)\n# Guaranteed public access to the details of the invention\n# Inventors are free to reverse-engineer, examine, and improve on the invention\n# Inventors who come up with sufficiently novel improvements can freely patent them and sell products based on them, without obligation to the original patent holder\n\n...with the mess _copyrights_ are in:\n\n# Effectively infinite term of monopoly (currently about 90 years, and Congress has made it clear that it will be extended whenever necessary to, literally, prevent Mickey Mouse's early works from falling into the public domain.)\n# Copyright holders are allowed and encouraged by the DMCA to prevent public access by means of copy-protection\n# The DMCA explicitly makes reverse-engineering of copy-protection a crime.\n# Copyright law requires permission to make a subsequent so-called \"derivative work\" that's based in any way on any piece of the original.\n\nMary Bono is, of course, better known as the widow of Rep. Sonny Bono (R-CA), who was himself known for such innovations as \"I Got You, Babe\" and his later legislative efforts (unrelated, I'm sure) to extend copyright terms to infinity-on-the-installment-plan. As the current copyright holder of that 40-year-old song, she benefits financially whenever it's played on the radio, used in a commercial, bought on a CD, downloaded from iTunes, shown in a movie like \"Groundhog Day\", played on the muzak at an Old Navy store, covered \"ironically\" by a punk band, sold as sheet music to a beginning pianist, ...\n\nh2. Reducto ad absurdum\n\nLet's imagine if this state of affairs applied to a 40-year-old _patented_ invention. I'm lazy so I'm going to make one up: let's say that Burroughs had patented \"virtual memory\":http://en.wikipedia.org/wiki/Virtual_memory#History in 1966. (This is untrue. You couldn't even patent software algorithms back then. But work with me on this.)\n\nThis temporary monopoly might have been enough to pull Burroughs ahead, out of its distant-second position relative to IBM, as time progressed and demands on computer power and memory increased. Burroughs' computers would have been more desirable, and other vendors like IBM and DEC would have had to pay hefty licensing fees to Burroughs to use VM in their own operating systems.\n\n...but this would have come to an end in 1983, just in time for the rapidly evolving personal computers to start freely making use of virtual memory (actually it took until about 1990 for both Windows and the Mac OS to introduce it.) So let's imagine that, thanks to the (fictitious) tireless legislative efforts of former Burroughs computer scientists turned Congressmen, patent law were like copyright law. (In fact this would make it a lot like trade-secret law, as far as I can tell.)\n\nSo where would we be today? Burroughs would _still_ have monopoly ownership of the concept of virtual memory. It would likely be a major player in the computer industry to this day, especially since any other manufacturer who wanted to use VM would have to pay Burroughs a royalty. (Or Burroughs might have shriveled up into a patent troll, a parasite existing on the royalty payments from real computer companies.) This would naturally increase the cost of computers. No open source project, like Linux or BSD, would be able to use virtual memory, since there'd be no moneyed entity to pay the royalties.\n\nEven more interesting: the algorithms behind virtual memory would be a black art. Reverse engineering a Burroughs or Burroughs-licensed VM subsystem would be illegal. Virtual memory couldn't be described in textbooks or taught in university classes. No one could research virtual memory, or describe or implement improved versions of it, without permission from Burroughs.\n\n(This probably means that virtual memory wouldn't be nearly as advanced as it is in the real world, where most of its implementations have been freely inspectable and modifiable since the early days of Berkeley Unix in the '70s. It's a simple idea, but implementations become rather complex in search of greater efficiency, and there are all kinds of interesting extensions like compressed backing stores (a la RAMDoubler) and memory-mapped files.)\n\nThere might be underground hacks that patched feeble microcomputer OSs to add virtual memory support. These hacks would have to be disseminated through pirate channels, and Burroughs' lawyers would be busy sending cease-and-desist letters to anyone publishing or distributing such software or allowing it to be stored on their servers. They'd probably even start going after ordinary computer users who downloaded the virtual-memory software and installed it on their computers.\n\nDoes this ugly scenario sound familiar?"
  post_title: "May I Nominate Mary Bono For â€œJackass Of The Weekâ€?"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "may-i-nominate-mary-bono-for-%e2%80%9cjackass-of-the-week%e2%80%9d"
  to_ping: ""
  pinged: ""
  post_modified: "2007-03-02 11:27:42"
  post_modified_gmt: "2007-03-02 18:27:42"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/03/may-i-nominate-mary-bono-for-%e2%80%9cjackass-of-the-week%e2%80%9d/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 35
-
  ID: 214
  post_author: 2
  post_date: "2007-03-04 01:34:05"
  post_date_gmt: "2007-03-04 08:34:05"
  post_content: "h3. 2001\n\nFigs cover the ground\nThe children step over them\nOr sometimes they donâ€™t\n\n\nA hug and a kiss\nA heart outlined with ï¬ngers\nAnd a wave goodbye\n\n\nTo the very end\nof the quivering green branch\nclings a black squirrel\n\n\nSo much depends on\na red Mario beanie\nleft out on the lawn.\n\n\nYellow leaves dancing\nin the air, two stories up\nagainst green windows.\n\n\nI cannot get up.\nI am excused from all work:\nCat purrs on my lap.\n\n\nh3. 2002\n\nHunting millipedes;\nEarthworms and a defunct grub\nAre all our trowel found\n\n\nA caterpillar\ntiny ... bright green ... wriggling\nï¬‚oats by on a thread\n\n\nThe cardboard stove box\nlawn parallelopiped\npacked with my children\n\n\nSquirrels found a ripe ï¬g\nAll the ones I see are green\nWhat do the squirrels know?\n\n\nWith my big pushes\nshe swings high on blue chain links.\nAbove, ï¬gs ripen.\n\n\nA huge durian\nhidden on the tile rooftop.\nKick it, Mario!\n\n\nA surplus mouthpart\ntransmuted into silver\nbeneath his pillow\n\n\nOutside the window,\nPast my feet and sleeping cats,\nTrees are shivering.\n\n\nh3. 2003\n\nOutside: balcony.\nTwo hundred forty thousand\nmiles above: the moon.\n\n\ngreen surface stretches\nâ€™round a smaller volume now:\nfour-thirds Ï€ r cubed\n\n\nh3. 2004\n\nOn November lawns\nThe rain and shade have planted\nA mushroom forest\n\n\nPrufrock 2K4:\n\"I have measured out my life\nIn eggnog lattes.\"\n\nh3. My Java haiku / Are funny because they're true / But rather geeky\n\n(Circa 1998)\n\nI got an Object\nI was sure it was a Point\nClassCastException\n\n\nGarbage collection\nThe unused objects are gone â€“\nKnew you wouldnâ€™t mind\n\n\nAWT\nPeers come from some secret place\nSo mysterious\n\n\nServer wants linefeeds\nBut println just sends CR\nThe sockets deadlock\n\n\n\"Java For Dummies\"\nYee Haw! Are we coding yet?!\nWhenâ€™s our IPO?"
  post_title: "Haiku Archives"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "haiku-archives"
  to_ping: ""
  pinged: ""
  post_modified: "2007-03-04 01:34:05"
  post_modified_gmt: "2007-03-04 08:34:05"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/03/haiku-archives/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 215
  post_author: 2
  post_date: "2007-03-18 13:05:19"
  post_date_gmt: "2007-03-18 20:05:19"
  post_content: "My friend Tanya is a gateway to the strange and exotic worlds of fan- and slash-fiction. Today she pointed out a whole LiveJournal community, \"mac_hearts_pc\":http://community.livejournal.com/mac_hearts_pc/, devoted to mostly-smutty extrapolations of Apple's anthropomorphized Mac-vs-PC ads. Wow.\n\nIn her post about this, she says\n\n<i>\"I tend to think of Macs as so feminine as to be, well, female\"</i>\n\nwhich is really making me think...\n\nHow do we map computer behaviors onto 'male' and 'female'? In American culture the Ã¦sthetic sense, intuition and readiness to please that exemplify \"Mac-ness\" bring to mind images of women, but if I challenge myself I can also imagine them as aspects of a courtly gentleman, like a royal servant or even a knight. Or perhaps of the British \"gentleman's gentleman\", such as Bunter or Jeeves ... though here the details of the Ã¦sthetics don't work, as this calls to mind a much darker, subtler UI theme, all leather, oak, brass and polished silver. The colors in Aqua fit better with the color scheme of medieval Europe or Japan.\n\nFrom my perspective as a programmer, I consider the underpinnings as well. The Unix core of Mac OS is undeniably male: strong, efficient, taciturn, more rugged than pretty, ready to do exactly what you told it with no backtalk and no second-guessing about what you might have \"meant instead\". And this core is there for anyone who wants it, it hasn't been suppressed or denied. Yet the OS has learned that getting along in the world, and taking a role subservient to its user, requires it to adopt feminine traits as well.\n\nh3. Enter Jung\n\nAt this point a -light bulb- LED turns on and I say \"Aha! Jungian psychology!\" According to \"Carl Jung\":http://en.wikipedia.org/wiki/Carl_Jung and his successors, every male has a feminine aspect to his personality (the \"anima\") and every female a masculine aspect (the \"animus\"). They're like the small dots in the yin/yang symbol. If they're not acknowledged or consciously used, they're still there, and we may unconsciously use them in our relations with others, to generally negative results â€” like acting a role we haven't properly rehearsed, adopting only the stereotypes without the essence. [John A. Sanford's <i><a href=\"http://www.amazon.com/Invisible-Partners-John-Sanford/dp/0809122774\">The Invisible Partners</a></i> is a fascinating book on this topic.]\n\nDo you see where I'm going with this? Both Mac and PC (and PC's hippie cousin Linux) are essentially male, because the innards of any machine embody traits we see as stereotypically masculine (rigid, powerful, unforgiving, rule-based...). But in most of our interactions with computers, we want a more even gender balance, or even one that's weighted toward the feminine archetypes (intuitive, harmonious, calming...) In other words, we want the computer to have gone through some Jungian analysis, to have acknowledged its anima and integrated it into its personality, to have \"gotten in touch with its female side\".\n\nh3. Case histories\n\nOf course I think the Mac is pretty well advanced psychologically these days, though it's had a tumultuous past. It started out practically denying its masculine self, projecting a totally femininized image, in reaction to the crudity of its then-peers. This caused all kinds of interior strain and complexes â€” which I can vouch for, having been one of its many therapists during that era. The masculine traits were there, but deeply repressed inside and revealed only to experienced programmers, and the strain made any further growth nearly impossible. (This also got the Mac beaten up a lot by \"bullies\":http://dvorak.org.) The key to progress was a reunion with NeXT, which had similar goals but had attained a different balance. The early relationship was rocky, but by 2001 the partners had fused in an \"alchemical wedding\":http://en.wikipedia.org/wiki/Chymical_Wedding_of_Christian_Rosenkreutz and the stage was set for serious growth.\n\nI don't want to stoop to Windows-bashing, but I'll just say briefly that in my opinion it still has more therapeutic work to do to get over its hyper-masculine DOS past (complicated by its promiscuous desires to run on any hardware it sees.) Its progress toward integrating its anima has been steady, though slow, but I believe it still relies too much on adopting stereotypes (\"are my windows translucent enough?\", like a neophyte cross-dresser) and on following fashions set by the Mac, without yet fully integrating the feminine strengths into its core being. But at least all parties have similar goals nowadays, which is a good thing for all."
  post_title: "Masculine And Feminine In Operating Systems"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "masculine-and-feminine-in-operating-systems"
  to_ping: ""
  pinged: ""
  post_modified: "2007-03-18 13:05:19"
  post_modified_gmt: "2007-03-18 20:05:19"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/03/masculine-and-feminine-in-operating-systems/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 216
  post_author: 2
  post_date: "2007-04-16 23:17:15"
  post_date_gmt: "2007-04-17 06:17:15"
  post_content: "NYT: <i><a href=\"http://www.nytimes.com/2007/04/17/science/17comp.html\">Computer Science Takes Steps to Bring Women to the Fold</a></i>\n\nI find this article baffling and the <a href=\"http://science.blogs.nytimes.com/2007/04/16/women-and-computer-science/\">comments on it</a> aggravating.\n\nbq. <i>\"The nerd factor is huge,â€ Dr. Cuny said. ... This image discourages members of both sexes, but the problem seems to be more prevalent among women. 'They think of it as programming,' Dr. Cuny said. 'They donâ€™t think of it as revolutionizing the way we are going to do medicine or create synthetic molecules or study our impact on the climate of the earth.'</i>\n\nWell, <i>of course</i> it's programming. Trying to sell CS as somehow not being about programming is false advertising â€” it's like telling kids that chemistry isn't about molecules or mathematics isn't about numbers. Sure, there are scientists using computers to design medicines or study the climate. But they're not computer scientists, they're biologists or geologists. Computer science is <i>about software</i>.\n\nHow is it that people can be so excited by the Internet and digital media, but totally turned off by the prospect of designing the stuff that makes those things work? They seem to confuse computer science with data-entry, or boring MIS drudgery like writing payroll systems. Or do they just totally _not care_ about where things like web search and MP3 codecs and 3D graphics and peer-to-peer protocols come from ... are they just some magic that falls out of the sky and no one should give a second thought to?\n\nAnother issue here is the distinction between Computer Science as a field of academic study, versus actual software engineering / programming / hacking. This is a young field (just as chemistry and aeronautics used to be) and not very codified yet. That's part of the fun â€” it's all being made up as we go along, and there aren't so many tomes of knowledge that have to be digested first. I had a great time in college ... but I have to admit that it didn't directly teach me that much about programming. I learned a great deal of useful science and mathematics, I had access to a lot of computers and time to do a lot of hacking, and I hung around with brilliant people whom I got some good ideas from. But I've worked with people who are great software engineers despite not having a college degree ... or having a degree in a different field like physics or psychology. So the number of people (and their M/F ratio) getting degrees in CS may not be that relevant.\n\nOn the downside, I've looked at the source code to enough open source projects to realize that there are a lot of people out there writing code whose basic programming skills are very, very poor; they probably could have used a solid undergraduate CS introduction. (Not to start any flames, but PHP seems especially prone to this ... I think it's kind of the BASIC of the modern era. The barrier to entry is so low, and the language so ad hoc, that people can just flail around in it.)\n\n\nAnd I'm not even addressing the main point, the low and diminishing proportion of women in the field. In fact, my experience is that the ratio is a lot worse than the figures like 25% that they quote in the article: I've almost never worked in an environment where more than about 10% of the technical people were female. Which is really sad, in many ways."
  post_title: "Computer Science&#8217;s Image Problem"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "computer-sciences-image-problem"
  to_ping: ""
  pinged: ""
  post_modified: "2007-04-16 23:17:15"
  post_modified_gmt: "2007-04-17 06:17:15"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/04/computer-sciences-image-problem/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 29
-
  ID: 217
  post_author: 2
  post_date: "2007-04-18 17:30:53"
  post_date_gmt: "2007-04-19 00:30:53"
  post_content: "There's an interesting kerfluffle going on regarding the scaling woes that Twitter.com is going through, especially since it's built on Ruby On Rails. Here's \"the original interview with one of the Twitter coders\":http://www.radicalbehavior.com/5-question-interview-with-twitter-developer-alex-payne/, the \"somewhat evasive reply by the lead Rails architect\":http://www.loudthinking.com/arc/000608.html, and \"Mark Pilgrim's cruel-but-funny dissection\":http://diveintomark.org/archives/2007/04/16/dhh-translation of the latter.\n\nRuby is a lovely language and Rails is a lovely framework, but both of them trade performance for aesthetics and convenience. That is, they're slow. No problem, though â€” in the magical world of web apps, you just solve performance problems by throwing hardware at the problem, usually in the form of more and more web servers. (If I sound sarcastic, I'm just envious because I write client-side software, where we don't have that convenient fallback.)\n\nThen, since 99.99% of web apps use a SQL database, the next bottleneck is the database server that all the web servers are talking to. The next step of course is to buy more database servers, but then you have to distribute/replicate the database across those servers, which is even more challenging. (Or if you're a crazed _wunderkind_ like LiveJournal founder Brad Fitzpatrick, you invent a memory-based distributed hashtable as a cache to put in front of the database.)\n\nh3. SQL as the universal hammer\n\nThis whole thing has me wondering why it is that SQL databases are used as the all-purpose hammer for solving all data storage problems for web apps. To some degree this has to be a historical accident, because I don't think it's necessarily obvious. My guess is that (a) a lot of companies already used these databases for storing their, uh, data; (b) in the mid-'90s all these companies were desperate to Get On The Web; so (c ) countless web developers wrote \"three-tier\" frameworks for gluing those SQL databases onto web servers.\n\nI've been using SQL a lot (via sqlite, as a data store for the Syndication framework) and it's quite nice. But I don't think SQL â€” or any sort of query-based database system â€” is the right tool for _every_ job, in particular these kinds of social-messaging apps like Twitter.\n\nh3. \"11,000 requests per second\"\n\nThe figure that stands out to me is \"...up to 11,000 requests per second\". Jesus Christ, that's a lot. Where does that come from? Even assuming a million members who each post ten times a day, that's only about 100 posts per second. If each member runs a client app polling for updates every 15 minutes, 24 hours a day, that's still only about 1,000 hits/sec. There's still an order of magnitude unaccounted for. (Maybe the apps poll every 1.5 minutes?)\n\nBut think about the polling again. Each of these requests just boils down to the client asking \"what messages did I get since the last time I asked?\" The SQL way of answering that question is to run a complicated join that looks up all of the members I'm subscribed to, looks up all the messages of those members, and selects the ones whose timestamp is later than the date of the client's last request. Sure, there are indexes, and databases are optimized for this stuff, but it's still going on a thousand times a second.\n\nNow, a more _sane_ way to do this (if I may be so bold) is to keep a message queue for every member, and whenever someone posts a new message, copy a pointer to that message into the queue of every member who's subscribed. Then when someone polls, you just have to get the messages out of their queue and send them along. If that sounds kind of familiar, it's because that's exactly how email works â€” the Twitter posting interface is like a listserv, and the polling interface is like a POP server.\n\nThe cool thing is that you don't even need a database to do this. You can store all of this stuff using very simple file formats, with one file per message queue. Since this is so much simpler than triple-decker SQL joins, one server can handle more requests; and if that's too much, you can use a networked filesystem (or even a SAN) to distribute it across servers.\n\nAnd of course you could keep going with this novel \"distributed\" idea, and make this into an actually-distributed system, where individual users (or groups of them) can run their own Twitter servers that queue their incoming messages and relay their outgoing ones. Imagine!\n\nh3. \"We're all doomed,\" sighed Eeyore\n\nThe trouble is, the idea of centralizing is so entrenched, and there's so much industry support for \"scalability\" by means of piling on more servers and moving to bigger data-centers with fatter pipes, that I can see that this is going to go on for some time. (I've heard that AIM handles over a _billion_ IMs a day, every one of which streams in and out of an unfathomably fat pipe in a huge AOL data center in Virginia. Shudder.)\n\nIn some moods (the same sorts of moods where I fantasize about how $5-per-gallon gas would kick-start desperately needed changes in our transportation system) I think about what would happen if all the DNS servers mysteriously vanished, all the data centers blew up, and we had to re-implement everything in a distributed peer-to-peer fashion. It's actually really interesting ..."
  post_title: "Twitter, Rails, Hammers, and 11,000 Nails per Second"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "open"
  post_password: ""
  post_name: "twitter-rails-hammers-and-11000-nails-per-second"
  to_ping: ""
  pinged: ""
  post_modified: "2007-04-18 17:30:53"
  post_modified_gmt: "2007-04-19 00:30:53"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/04/twitter-rails-hammers-and-11000-nails-per-second/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 44
-
  ID: 218
  post_author: 2
  post_date: "2007-05-06 12:07:07"
  post_date_gmt: "2007-05-06 19:07:07"
  post_content: "Ever since Brent \"NetNewsWire\" Simmons posted his \"Thoughts On Large Cocoa Projects\":http://inessential.com/2007/04/25.php the other week, I've wanted to add some of my own tips. I've worked on some big projects (iChat, Apple's Java runtime, OpenDoc) and have sometimes had to find my way around in others (Safari, Mail), so I know what Brent means when he says:\n\nbq. Thereâ€™s no way I can remember, with any level of detail, how every part of [my app] works. I call it the Research Barrier, when an app is big enough that the developer sometimes has to do research to figure things out...\n\nIt's been said many times that \"the main person you're writing comments for is yourself, six months in the future.\" It's always a good idea to keep that shadowy figure in mind while you code. Here are some other techniques I've found invaluable:\n\n<!--more-->\n\n\nh3. Prefix your instance-variable names\n\n*Make instance variables instantly identifiable by prefixing their names with a particular character, so you can tell them apart from local variables.* I use \"_\", so my ivars have names like \"_delegate\" or \"_name\". I've seen \"m\", for \"member\", used in C++ code. MacApp used to use \"f\" for \"field\". But it doesn't matter what you use as long as you do something to distinguish them.\n\nAlso useful, to a lesser degree, is *Prefixing global/static variables* with a different character like \"g\" or \"s\".\n\nWhy do this? Because the _scope_ and _lifespan_ of a variable are incredibly important things to know about it. When I'm figuring out a piece of code, I want to know \"where did this variable come from? What does it affect? How long doesit last?\" I also want to be able to see at a glance what state of the object a method uses or changes.\n\nI find this notation applied in most large projects at Apple; and I always notice the lack of such prefixes when I'm trying to figure out some code that doesn't use them. I must confess that I've sometimes gone as far as to insert the prefixes into other people's code myself just so I can keep things straight while working on it.\n\n(Note: Some might dismiss this as being a form of \"Hungarian Notation\":http://en.wikipedia.org/wiki/Hungarian_notation. Not so. Hungatian Notation annotates a variable with its _type_. This was useful in the distant past, when languages like BCPL and pre-ANSI C didn't have much type-checking, so it was up to the programmer to make sure s/he didn't pass the wrong type to a function call. Nowadays the compiler does that for us, making it much less important to tag that onto the variable name. By comparison, the _scope_ of a variable remains very useful for the programmer to know, and can be identified using a single unobtrusive character like \"_\".)\n\nh3. \"TEMP\" and \"FIX\" markers\n\n*If you're making a temporary change, put a magic word like \"//TEMP\" in a comment right next to it, so you'll remember to take it out ASAP.* By \"temporary\" I mean something that's just for your own immediate debugging/testing purposes and shouldn't be left in the code for long. We all do this -- verbose logging inside inner loops, commenting out a block of code to see whether it caused a regression, quickie scaffolding to get something up and running. The kind of thing you don't want to check in, or put into a build. So put in a special marker word the moment you make the change.\n\nThen (just as important) search your project for \"TEMP\" before any checkpoint such as \"svn commit\", or just before you finish work for the day, and take out any of those temporary changes that are left.\n\n(Apparently it's possible to configure your Subversion repository to do such a check for you, and prevent you from submitting any changes containing the word \"TEMP\", but I've never looked up how to do it.)\n\n*If you know something needs to be fixed or finished up in a piece of code, but you're not going to do it right away, put a different magic word like \"FIX\" or \"TODO\" in a comment right next to it, along with an explanation.* This creates a sort of integrated to-do list inside your project. I've found it invaluable because (a) I'm forgetful, and (b) I'm lazy. Or more charitably: _I can only think so many layers deep at a time_. Robust code needs to handle any possible combination of circumstances, but that whole tree can be too complex to keep in mind, especially when first writing that code. So what I do is focus on the \"normal\" flow of control, and maybe one or two likely others, but leave little \"FIX\" breadcrumbs behind to remind me to tackle the other circumstances later. Things like \"FIX: Retry on timeout\" or \"FIX: This assumes the text is a single line\". It's also useful if I notice a mistake in a part of the code I'm not working on right now, and don't want to derail my current task by going to fix it.\n\nAt a later point in the project, though, it becomes important to search for all the remaining \"FIX\" comments and give them a more formal representation as items in your bug database.\n\nh3. Your own special logging function\n\n*Define and use your own \"Log()\" function/macro, instead of the built-in ones.* Console logging is your friend. Breakpoints and single-stepping are the microscope, but logging is the stethoscope, the EEG, the higher-level view of what the whole program is doing. (It's hard to believe now that, until OS X, the Mac didn't have a console. If you wanted to do even the most basic logging, you had to use a third-party tool or else DebugStr() which dropped you into MacsBug on every call.)\n\nBut logging can become too much of a good thing. You don't want your program to spew lots of stuff to the console in normal use, because that slows it down a lot and makes the console less useful for anyone else. So you should turn off all your excellent logging except when you need it.\n\nThe lazy way to do turn off logging is to comment out, or even delete, all of those NSLog() calls. _Don't do that!_ You'll probably need them later on, when your supposedly 100%-debugged code turns out to have one more problem. Instead, make your own \"Log()\" macro that you can turn on or off with a single switch:\n<pre>\n        // Logging.h\n        extern BOOL gLogging;\n        #define Log   if(!gLogging) ; else NSLog\n        #define Warn(FMT,...)   NSLog(@\"WARNING: \" FMT, ##__VA_ARGS__)\n</pre><p>That's all it takes. Now you can use \"Log()\" just like \"NSLog()\", except that nothing will get logged unless you set the value of gLogging to YES. Initialize that variable based on a \"Logging\" user default [code left as an exercise for the reader] and you can then go into Xcode's Executable inspector and add the command-line arguments \"-Logging YES\" to enable logging whenever you run your app in Xcode.\n\nBut sometimes you want to log warnings about Bad Stuff, which should always appear, even if Log() is turned off. You could always use regular NSLog for this, but I find it useful to have a Warn() function:</p>\n<pre>\n        #define Warn(FMT,...)   NSLog(@\"WARNING: \" FMT, ##__VA_ARGS__)\n</pre><p>Again, Warn() is called just like NSLog(). But it's always enabled, and it prefixes the message with \"WARN:\", which looks important and stands out even in the midst of a bunch of logorrhea. It looks distinctive in your source code, too.\n\nh3. Break your functions into paragraphs\n\n*Try to organize the code inside a function into \"paragraphs\" of no more than a dozen lines, prefixed with a comment describing what that paragraph does.* Most people nowadays have the good sense not to write functions/methods that are more than a page long. But even a page of unadorned code can be hard to figure out six months later. So give yourself the Cliff's Notes, little sub-headings that describe what's going on:</p>\n<pre>\n        // Build a header dictionary out of the input:\n        ...\n        // Serialize that into RFC822 format:\n        ...\n        // Send it:\n        ...\n        if( ok ) {\n                // Success! Now parse the response:\n                ...\n        } else {\n                // Failed; interpret the error code:\n                ...\n        }\n</pre><p>You can think of these comments as being the labels inside the boxes in an imaginary flow-chart of the code. I find them very useful later on -- for example, if there's some problem in that RFC822-format data, I can find at a glance the dozen lines that are responsible for it.\n\nh3. Zero tolerance for compiler warnings\n\n*As soon as you begin a project, turn on \"Treat Warnings As Errors\" and enable \"All\" warnings.* This will prevent any warnings from creeping into your project.\n\n\"Treat Warnings As Errors\" has its own checkbox in the \"Warnings\" section of the \"Build\" tab of the project/target inspector. There's no checkbox for \"All Warnings\", so you'll have to edit \"Other Warning Flags\" and add \"-Wall\". (Don't be fooled by the name: \"All Warnings\" doesn't enable _all_ warnings; it skips some annoyingly pedantic ones. There's also \"-Wmost\", which skips even more, but I couldn't tell you which ones.)\n\nCompiler warnings must seem like a good idea to compiler writers. They point out things that are _likely_ to be mistakes, but which are still valid code, so the compiler shouldn't lay down the law and make the programmer fix them. A warning passes the buck. But for a developer, warnings are bad to leave in your code:\n\n# They stick around. The first time you get a warning on line 348, you might look at the code and decide that it's not a problem. Unfortunately, that doesn't make the compiler warning go away. It'll reappear every time that source file is recompiled, without any indication of whether or not you've OK'd it.\n# They mutate. Even if you remember that the warning on line 348 isn't a problem, and even if you haven't edited line 348, the warning _could_ become a real problem in the future if you change something that line 348 depends on (such as the declaration of a variable that it uses.) If you ignore the warning, you won't know about the problem.\n# They accumulate. If you don't keep your code clear of warnings, they grow and grow. By the time a source file has a dozen warnings in it, you're not likely to notice a new one. It's also annoying wading through warnings when you're looking for the actual errors.\n\nUnfixed warnings are especially bad when you're making architectural changes to your code. A real-life horror story: A colleague of mine was tasked with making someone else's library 64-bit compatible. She didn't know the code, but fortunately gcc has a number of warnings that point out typical 64-bit issues, such as casting a pointer to an integer that's too small to contain it. Unfortunately, though, this library _already_ generated thousands of compiler warnings when it built in regular 32-bit. So the first order of business was to clean up the code and get rid of those warnings, before she could flip the 64-bit switch and get to those warnings. And guess what? She found that the old warnings were pointing out two serious bugs, one of which had been reported but wasn't reproducible enough for the original programmer to track it down.\n\nI've seen some people complain that \"there's no way I can get this perfectly-legal code to compile without warnings!\" All I can say is that I've never run into such a problem. Sometimes you have to make the code a little bit more verbose, like adding type-casts or breaking an expression into two statements, but not often, and these changes don't affect the quality of the compiled code.\n\nh3. Jumping to definitions (Cmd-double-click)\n\nThis is just a basic Xcode goodie, but once in a while I find an experienced developer who's never heard of it, so it's worth pointing out:\n\n*In Xcode, hold down Command and double-click on an identifier to jump to its definition.* This works for classes, methods, functions, variables, even #defines. It works for identifiers in system frameworks too -- it'll jump to the declaration in a header. If there are multiple choices (like a method name used in several classes) you'll get a pop-up menu listing them.\n\nA related tip is to *Option-double-click to look up the documentation of an identifier* in Xcode's documentation window.\n\nh3. Don't use tab characters in source files!\n\nThe world will never come to an agreement on whether a tab character indents 8 spaces or 4, especially on the Mac, where lots of Unix tools (and Unix source code) are hard-coded for 8. So since different people will have their tab-width preferences set differently, just *don't use tab characters in your source code if you want everyone to be able to read it*.\n\nIn Xcode, go to the Indentation pref pane and uncheck \"Tab key inserts tab, not spaces\". In Textmate, check \"Soft Tabs\" in the tabs pop-up at the bottom of the editor window. You won't notice a difference in editing text, but your source code will now look properly indented to everyone.\n\nh2. EOF\n\nThat's all for now ... I hope some of you actually read this far, or even found some of these tips novel/useful. I have a few others in mind that I might write up later, especially if people liked this post.</p>"
  post_title: "Uncle Jens&#8217;s Coding Tips"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "uncle-jenss-coding-tips"
  to_ping: ""
  pinged: ""
  post_modified: "2007-05-06 12:07:07"
  post_modified_gmt: "2007-05-06 19:07:07"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/05/uncle-jenss-coding-tips/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 42
-
  ID: 219
  post_author: 2
  post_date: "2007-05-26 15:46:45"
  post_date_gmt: "2007-05-26 22:46:45"
  post_content: "This is a mix of post-punk (old and new). I made it about a month and a half ago, but hadn't put together a cover until today. Now it's ready...\n\n[<b><a href=\"http://mooseyard.com/recordings/mub48/\">web page</a></b>] [<b><a href=\"http://mooseyard.com/recordings/mub48/CutTheLights.mp3\">MP3</a></b>] [<b><a href=\"http://mooseyard.com/recordings/\">more mixes</a></b>]\n\n<a href=\"http://mooseyard.com/recordings/mub48/\"><img src=\"http://mooseyard.com/recordings/mub48/CutTheLights.jpg\" height=341 width=341 /></a>\n\n<img src=\"http://mooseyard.com/recordings/mub48/CutTheLights(back).jpg\" height=341 width=341/>"
  post_title: "&#8220;Cut The Lights&#8221;"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "cut-the-lights"
  to_ping: ""
  pinged: ""
  post_modified: "2007-05-26 15:46:45"
  post_modified_gmt: "2007-05-26 22:46:45"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/05/cut-the-lights/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 220
  post_author: 2
  post_date: "2007-07-01 22:53:38"
  post_date_gmt: "2007-07-02 05:53:38"
  post_content: "Two of the downsides of the iPhone are the two-year indentured servitude to AT&T, and the cost of the <a href=\"http://www.apple.com/iphone/easysetup/rateplans.html\">service plans</a> (well, they're not <i>that</i> expensive, but it's 50% more I was spending on my Sidekick.) But I inadvertently found a way around both those problems.\n\n<!--more-->\n\nMy wife and I had gotten our <a href=\"http://www.nytimes.com/2006/03/18/business/yourmoney/18money.html?ex=1300338000&en=679b5dd491c851cd&ei=5090&partner=rssuserland&emc=rss\">credit reports locked</a> a few years ago. You can write letters (by snail-mail) to the credit agencies telling them not to let anyone see your credit report. This almost eliminates junk credit-card offers, and keeps sleazy people who've gotten your SSN from using it to get lots more information.<p>It does mean, though, that you can't do things on a whim that require credit checks ... as I found out when the AT&T, in the privacy of my living room, turned me down for a service contract. I'd forgotten all about the credit report lock.</p><p>But that turned out to be a _good thing_. Because if (and only if) you don't qualify for a regular service plan, AT&T will offer you instead the month-to-month \"<a href=\"http://www.wireless.att.com/cell-phone-service/cell-phone-plans/pyp-cell-phone-plans.jsp?WT.svl=calltoaction\">GoPhone</a>\" plans. These are supposedly suckier because they come with fewer minutes and you pay more per extra minute; but they're cheap ($30+), and I don't make a lot of voice calls so I don't care about having \"only\" 200 minutes a month. It's the unlimited data I need, and that's the same $20 as in the regular iPhone plans. So the total comes to $50 a month, versus a minimum of $60 for the cheapest regular plan. And they'll automatically charge my credit card, just like normal; it's really not like being on food-stamps at all.</p><p>So I got an iPhone without a service contract, and I'm saving $10 a month. Score!</p><p>If you live in one of the states that allows credit-report locking, you should be able to do this too; the drawback is you have to plan ahead, <a href=\"http://www.bankrate.com/brm/news/cc/20030613c1.asp\">writing letters to the credit agencies several weeks in advance</a>.\n</p>"
  post_title: "How to get an iPhone without a service contract and save $$$"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "how-to-get-an-iphone-without-a-service-contract-and-save"
  to_ping: ""
  pinged: ""
  post_modified: "2007-07-01 22:53:38"
  post_modified_gmt: "2007-07-02 05:53:38"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/07/how-to-get-an-iphone-without-a-service-contract-and-save/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 17
-
  ID: 221
  post_author: 2
  post_date: "2007-07-07 23:37:25"
  post_date_gmt: "2007-07-08 06:37:25"
  post_content: "Here's my family recipe for apricot jam, handed down through generations. One generation, really â€” my mom got it from a pamphlet put out by some local womens' group, after we moved to an old ramshackle house in the middle of a huge but disused apricot orchard. The trees were old, but a lot of them still produced fruit, and it was no trouble to walk around and collect bucketsful. So we needed some way to make use of all that fruit...\n\nThis recipe is different from the usual one you find packed in a box of pectin, because, well, it doesn't use pectin. Instead, you thicken the jam by cooking it a lot longer. This means it tastes less like fresh fruit; but it has a wonderful taste of its own, a bit like dried apricots, and a nice gloopy texture. As a bonus, putting an apricot kernel^1^ in every jar gradually adds an almond-y aroma^2^.\n<!--more-->\n\n<h3>The Pep Talk</h3>\n\nMaking jam is much easier (and safer) than most people think. After all, 100 years ago everyone used to can food, unless they were millionaire financiers or nomadic tribesmen. If our primitive ancestors could do it, so can you! And jam is easier than canning vegetables because the acidity of the fruit inhibits microorganisms, so you don't have to be paranoid about sterilizing everything.\n\nJamming basically boils down [sorry] to mixing the fruit with <i>lots</i> of sugar and some lemon juice, cooking it, and pouring it into clean canning jars. The heat of the boiling jam helps sterilize the jar, and turning it upside down at first gets the lid too. As the air at the top cools, it shrinks and forms a partial vacuum that holds the lid on tightly to maintain the seal.\n\nThe jam keeps for years, although unless you make a lot of it, you'll run out long before then. We've eaten three-year-old jam that still tasted great. A very few jars go bad â€” maybe one in 20 â€” and a bad jar is pretty obvious because it's either lost its seal or has mold on top, so you just throw it away and get another one.\n\nIt takes only about an hour of active time, it will make your house smell amazing, and you'll end up with yummy jam and syrup that you can enjoy for years. Do it!\n\nBut: *Read The Directions All The Way Through First.* Some of the details are important.\n\n<h3>Requirements</h3>\n\nYou'll need to buy:\n\n* Apricots, duh. Firm and slightly under-ripe if possible. (As a rough estimate, it takes about 1 1/2 cups of cut-up apricots to make an 8 oz jar of jam.)\n* Lots of sugar. Get one of those big sacks. Don't skimp on sugar or the jam won't turn out right. NutraSweetâ„¢ is _right out_.\n* Several lemons.\n* 8oz canning jars, usually made by Ball or Mason. Most supermarkets have them, usually in the baking aisle. Make sure the jars come with the screw-on rings that hold the lids on.\n* Jar lids. These are usually sold separately because, unlike the jars, they're not re-usable. Make sure they're the right diameter for your jars.\n\nYour kitchen needs to have:\n\n* A big _non-aluminum_^3^ cooking pot.\n* A big stirring spoon, ideally wood.\n* A ladle.\n* Optional: A quart-size jar or sealable plastic container (for the syrup).\n* Optional: a hammer (to extract the kernels).\n\n<h3>Preparing The Fruit</h3>\n\nCut the apricots in half and put them in a large <i>non-aluminum</i> cooking pot. Set aside the pits for later. For each cup of apricots, add 3/4 cup sugar and 1 1/2 tsp lemon juice.\n\nLet the mixture stand at least two hours, and watch as the magic force of osmosis sucks the water out of the apricots, dissolving them and the sugar into yummy goo.\n\n<h3>Cooking</h3>\n\nNow put the pot on the stove and bring the goo to a boil over high heat. At first you'll just need to stir occasionally to keep it from scorching, then as it comes to a boil you'll need to stir continuously. Once it's at a steady boil, set a timer for 25 minutes and keep stirring...\n\nWhen it first starts boiling, it's going to produce lots and lots of pale orange foam, which you're going to have to skim off with a ladle to keep the pot from overflowing. When I was a kid, we serendipitously discovered that, if you put the foam in a quart jar and let it settle, it turns into apricot syrup. Do this!! The syrup is awesome on pancakes or ice cream. Keep it in the fridge.\n\nThe foaming will stop, I promise, even though you'll feel like the Sorcerer's Apprentice for a few minutes. Then just keep stirring, stirring, stirring...\n\nWhen the timer goes off, take a look at the mixture. If it still seems liquidy, let it boil another five minutes (but no more). The goal is to have reduced the volume by about half, and for what's left to be fairly thick; sort of like _boiling jam_. When it's ready, turn off the heat.\n\n<h3>Flashback: Preparing The Jars</h3>\n\nYou will have first prepared^4^ a bunch of canning jars. The jars will have just gone through the dishwasher (even if they're new). The lids will have been soaking in a bowl with boiling water poured over them. The rings will have been just sitting around.\n\n(If you <i>didn't</i> first prepare this stuff, while the apricots were dissolving in sugar, you're in trouble now. Serves you right for not reading the recipe through! All you can do is let the jam cool a bit, pour it into any clean containers you have around, and put it in the fridge. You'll have to eat it all in a few weeks. Get friends to help.)\n\nAs an optional but recommended bonus: Extract enough kernels from the pits so you have one intact kernel per jar. To do this, get a hammer and put the pit on a clean cloth on a _very_ hard surface like the sidewalk. Whack the pit with the hammer, hard enough to crack it open but not hard enough to mush the kernel inside, which looks like a little almond. This takes a bit of practice, so it's a good thing you have dozens of pits.\n<h3>Filling The Jars</h3><p>Now fill each jar as follows: Take it out of the dishwasher, turn it right-side-up _(very important!)_, drop in an apricot kernel, and ladle jam into it up to about 1/4\" below the rim. Try not to get jam on the rim^5^. (The right amount of airspace is important for getting the jar to seal.) Put a lid on top^6^, then screw a ring over it tightly. Turn the jar upside-down (very important!) Go on to the next jar. Repeat till you run out of jam.\n\nYou'll probably end up with a half-full jar at the end. This won't seal properly, so keep it in the fridge. Or if you run out of jars first, you can put the remaining jam into any other closeable containers you have around, and put them in the fridge. Either way, the refrigerated jam will keep for a few weeks.\n\nWhen the last jar is filled and flipped over, set a timer for 5 minutes. When it bleeps, flip all of the jars back upright and let them stand for a little while. You should soon hear a little metallic \"ping!\" sound as each jar seals shut â€” the cooling air shrinks and forms a partial vacuum that pulls the lid tight and makes it flip from convex to concave.\n\nIf any jars haven't popped shut by themselves in 15 minutes, they're not properly sealed, so put them in the fridge and eat the jam soon.\n\nTighten the sealed jars' rings some more, and label them with the type of jam and the approximate date. In a reasonably cool place (basements are good) they'll keep for at least 2 years.\n\n(Before you open a jar for the first time, press on the lid to make sure it's still sealed. If you can pop the lid down, or if you can pull it off without a fair amount of force, it's lost its seal and you should throw the jam away. But this happens really rarely.)</p>\n\n<h3>Notes</h3>\n\n[1] As a child, I knew that apricot kernels were full of deadly cyanide, and felt sort of nervous about using them in the jam. (But not too nervous to eat it.) It turns out, though, that the concentration is really pretty minimal.\n\n[2] I am told that almond extract is often made from apricot pits, and that marzipan sometimes is too.\n\n[3] The acid in the fruit would react with the aluminum, giving the jam a nasty metallic taste.\n\n[4] I've always wanted to write that!\n\n[5] A canning funnel, which is a squat wide-mouthed funnel, is helpful here. Your better cooking-supply stores, like Williams-Sonoma, should carry them.\n\n[6] Don't forget that the water the lids are in is still hot! Tongs are one way to get them out. Even better, we have a nifty magnetic-tipped wand we got from Ball a few years ago."
  post_title: "Apricot Jam Recipe"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "apricot-jam-recipe"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:46:07"
  post_modified_gmt: "2009-10-19 16:46:07"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/07/apricot-jam-recipe/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 141
-
  ID: 222
  post_author: 2
  post_date: "2007-07-16 15:40:27"
  post_date_gmt: "2007-07-16 22:40:27"
  post_content: "\"This tale of woe\":http://use.perl.org/%7EAristotle/journal/33448 is making me rethink whether I want to be running any \"PHP-based software\":http://wordpress.org on my website.\n\nYes, integer overflows happen to the best of us (\"even those of us who write popular algorithm textbooks\":http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html), but I would hope that once one is pointed out, the people maintaining the code would have a clue about how to fix it.\n\nStuff like \"if (size>INT_MAX)...\" is funny, but I find it even scarier that someone would think the solution to integer overflow is to store potentially-huge byte counts in variables of type \"float\". Which is apparently still being done in top-of-tree PHP.\n\n[Hint: \"float\" is almost always 32-bit IEEE format with a 24-bit mantissa, meaning it can't represent any integer larger than 2^23^-1 (8 MB) exactly. And round-off error is the _last_ thing you want when computing how large a buffer to allocate.]"
  post_title: "How not to fix buffer overflows"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "how-not-to-fix-buffer-overflows"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:45:30"
  post_modified_gmt: "2009-10-19 16:45:30"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/07/how-not-to-fix-buffer-overflows/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 223
  post_author: 2
  post_date: "2007-07-18 22:14:41"
  post_date_gmt: "2007-07-19 05:14:41"
  post_content: "\"37signals gripes about those annoying Bluetooth cellphone headsets with even-more-annoying blinky LEDs on them.\":http://www.37signals.com/svn/posts/516-blinking-bluetooth-headsets\n\nI once had the idea of a charity that would collect discarded headsets from yuppies and distribute them to mentally ill homeless people. Just by wearing the headsets, they would eliminate the social stigma attached to talking to themselves on the street; this would help re-integrate them into society."
  post_title: "Hang on, I gotta take a call from the Archdemon Azazael"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "hang-on-i-gotta-take-a-call-from-the-archdemon-azazael"
  to_ping: ""
  pinged: ""
  post_modified: "2007-07-18 22:14:41"
  post_modified_gmt: "2007-07-19 05:14:41"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/07/hang-on-i-gotta-take-a-call-from-the-archdemon-azazael/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 224
  post_author: 2
  post_date: "2007-08-06 00:16:36"
  post_date_gmt: "2007-08-06 07:16:36"
  post_content: "bq. We love to play the Hero â€” exploring dungeons, grabbing treasure, saving the world from evil. But I started wondering about the reasons behind some of the actions in such games, and especially about what my Heroic deeds looked like to the ordinary people of the lands I passed through. (As my wife once put it: \"Why isn't there a Hug button?\") The result is this story.\nI don't normally write this sort of antiquated prose, but the genre does require it. It was actually a fun exercise, and I've tried to affect more of a \"James Branch Cabell\":http://en.wikipedia.org/wiki/James_Branch_Cabell or \"Lord Dunsany\":http://en.wikipedia.org/wiki/Lord_Dunsany voice, rather than the tiresome faux-Tolkien of most current heroic fantasy.\n\n<!--more-->\n\n<b>The news came by way of a fast rider,</b> who galloped into the village square on a sweaty horse of athletic stature, and had no sooner swung himself down than vanished into the house of the mayor. He emerged half an hour later, more calmly, holding a jug of beer and wedge of cheese provided by the mayorâ€™s wife. The children who had been anxiously monitoring the door instantly swarmed around him to ask questions, while the adults (whose attention had been more surreptitious if no less anxious) feigned calm as they slowly moved into earshot.\n\nâ€œWhatâ€™s the news?â€ cried Lin the bakerâ€™s son; or rather, of the dozen voices that called out the same question, his came through the loudest. â€œAre the beasts rising again? Has the castle fallen?â€\n\nAt this, some of the smaller children went silent. Our parents tried to keep such dark news from the ears of the younger ones, though gossip carried it to them anyway in more or less distorted forms; and several times in recent months I had seen children crying with the fear that the dark beasts of fairy-tales might be encroaching on our village. It was no idle fear, for I knew that they had been sighted in the high mountain passes. My parents had told me: I am small, yes, but old enough to know about the world, the bad as well as the good. My father was among those who searched the woods last month for little Lana, and though her body was never found, he told me and my mother of the blood-soaked forest clearing, the dark runes scratched by claws into the caked dirt.\n\nThe rider could not immediately reply, being occupied with a mouthful of cheese; and by the time he had washed it down with some beer, the adults had made their feigned-casual way toward him, so it was to them that he addressed his reply.\n\nâ€œThe castle stands! And our King and his Princess are well. I bring news to the towns on this road â€” good news! â€” that a Hero has appeared, yonder in the Meln valley; and that he is even now crossing the pass and will be traveling through your village by nightfall.â€\n\nAt this, pandemonium broke loose â€” an actual Hero had not been seen in our village, or in the entire valley, since the days of my grandparents. All those present began shouting with glee, or asking further questions, or speculating on the significance, or in the case of many of the children, picking up sticks and dashing about to do imaginary battle in the guise of this Hero.\n\nI walked off toward home. I am a quiet type, and I knew that reflection, and some words with my parents, would profit me more than any attempt to decipher the present babble.\n<h2 style=\"text-align: center\">â€”2â€”</h2><p><b>Everyone knows who Heroes are:</b> they feature prominently in the history of the land, as well as in less trustworthy legends and tall tales. At times of crisis, when invaders or rogue magicians or monstrous beasts threaten the land, a Hero will rise and defeat them all.\n\nâ€œBut who is this Hero?â€ I asked my father. â€œAs a knight, or a master of martial arts, wouldnâ€™t his name be well known? Why did the rider not tell us the Heroâ€™s name?â€\n\nFather chuckled as he tied off the fletchings on an arrow, which he deposited on the pile accumulating before him. â€œYou havenâ€™t been attending to the full histories; or the old manâ€™s not been teaching you all of them. A Heroâ€™s not known beforehand, not as a Hero at least; two or three of 'em may have been warriors, but most came out of nowhere, were cowherds or shopkeepers.\n\nâ€œDonâ€™t you be getting ideas, though!â€ he warned me in mock earnestness. â€œEven before, they all showed skill at combat.â€ Involuntarily, I drew my withered right leg beneath me. â€œThatâ€™s not your path, son. Your eyes are as sharp as your mind, and youâ€™ll make a fine craftsman. Too many are the young men whoâ€™ve mooned away their strongest years waiting and hoping in vain for the guise of the Hero to drop upon them.â€\n\nâ€œDid the real Heroes know what they were, before they began their quests?â€\n\nâ€œThatâ€™s a matter for the philosophers at the Court. Which is to say, if they had foreknowledge, they never told anyone about it; and Heroes on their quests not beinâ€™ overly talkative, no oneâ€™s heard their stories of how it happened.â€\n\nAnother arrow dropped on the stack. My father no longer had the strength to draw a hunting bow, but his skill as an arrowsmith was still legendary, in a small way, in the valley. The ones he was finishing now were of the highest quality: he was using the finest wood for the stocks, and taking the heads from the small supply of obsidian he had obtained at great price from the rock-men of the mountains. These arrows were clearly a gift for the Hero.\n\nAs if reading my mind (or the direction of my gaze), my mother came up from behind me and said, â€œTom, we must all work today to prepare for the Heroâ€™s arrival. I am taking the cart to Benners to buy jars at the market; and you must use your famous eyes to find jewels.â€ I blushed a bit; not so much from her praise of my jeweling skill, as from the way she implicitly included me in that â€œweâ€, meaning <i>the adults</i> â€” I could hear the children outside, my sister among them, still playing their mock-Heroic games, and last year I might have been among them (as a lame yet fearsome sorcerer, my favorite role), but today my parents considered me a man.\n\nâ€œThen Iâ€™ll be off to the field!â€ I replied, and pulled myself to my feet.</p>\n<h2 style=\"text-align: center\">â€”3â€”</h2><p><b>The gem field was some way out of town,</b> and as I walked along the path with my staff and empty bag, I thought about this strange business of Heroes. It was true, I realized, that the histories old Magrew taught me were (intentionally?) vague on the <i>origins</i> of the Heroes, and though several bore the surnames of prominent noble families, I could not recall if those titles predated them; perhaps they were bestowed upon the family in gratitude afterwards? The Heroes themselves never stayed around long after their quests were done â€” a typical history ended <i>â€œâ€¦and Larq was carried from the wreckage of the Witchâ€™s castle, and spent some days recovering, after which he and his deeds were fÃªted at a great celebration at Court; but the Princessâ€™s hand being offered him, he declined politely, explaining that he had (unspecified) duties and unfinished business to undertake in the far West. Though he left well-supplied, and carrying his weapons of fearsome power, he was never heard from again, and is presumed to have met his end in that unknown land.â€</i>\n\nI recited the entire history to myself, actually, and it lasted me all the way to the field. Once there, I needed to focus all my mental energies down on the grass, and below it to the dirt, looking for the minuscule gleams.\n\nBeneath this field, and one or two others of which I have heard, some unknown processes within the Earth give rise to small semi-precious gemstones which, unlike their kindred that the rock-people mine from deep shafts, are <i>pushed</i> to the surface. They can then be collected like pebbles from a lakeshore â€¦ but only if one can see them. Their appearance is hardly distinctive, as they emerge covered in a dark tarry shell; and one can discern them only by the subtlest clues of shape, or a minute gleam of color where a corner is scraped clean. I am one of the best stone-hunters in the town, and even I can collect only a handful in a few hoursâ€™ slow traversal of the field, which is all that my eyes (and back) can stand.</p>\n<h2 style=\"text-align: center\">â€”4â€”</h2><p><b>I was returning from the field,</b> with seventeen stones in a sack my reward for the headache I now endured, when I met the little man. (In all honesty, I was <i>sitting</i> beneath an oak tree taking a rest. Long walks are difficult for me, even with my staff, and the sun was hot. But I was not idle: I was cutting the shells from the gems with a pocket-knife, letting their colors and facets tumble out into my lap.) I looked up when he addressed me by name:\n\nâ€œYou must be Tom, son of Roger the arrowsmith? I can tell by the fine hoard you have there!â€\n\nI looked up, and made to scramble to my feet, but he showed with a wave that I might remain sitting.\n\nâ€œThat I am, sir; has my father sent for me?â€ But now that I looked at him, I realized that he was neither from our village, nor from the valley, nor anywhere nearby; for his appearance was unlike that of our races. His hair was pitch black, like a catâ€™s, where ours is brown or blond; and his eyes had a curious narrow shape, though they showed no suspicion or anger. On the contrary, they twinkled, and a great welcoming smile spread across his wide face. I had no choice but to smile back at such jolliness.\n\nâ€œNot at all, Tom! Your father trusts you will make your way home when your job is complete.â€ He settled himself to the grass next to me, cross-legged. â€œI merely asked him for directions as to where I might find you; for I have a small job for you to do.â€\n\nâ€œYou do me an honor, sir!â€ I replied, for I thought it best to assume him to be a figure of some importance. He was clearly a traveler from a far land, and my father had thought well enough of him to entrust him to meet with me on a lonely road. Moreover, the small manâ€™s clothes were of an unfamiliar foreign style (collarless tunic, narrow pantaloons) but quite clearly cut from the finest cloth, something with the drape of linen, woven of stitches too small for me to see. â€œMay I be of service to you? May I offer you some of these gems?â€\n\nâ€œBless you, son, but no â€” quite the contrary. Those gems you hold are for the Hero, and you must scatter them in the grass of your village for him to find; for he is not a prince to be offered gifts, but an adventurer who expects to make his own discoveries. I do, however, have a different task for you that relates to this same Hero.â€\n\nHere he paused for dramatic effect, and I could not resist asking breathlessly, â€œThen do you know this Hero? Have you seen him? What adventures have befallen him so far?â€ Immediately I blushed, for I realized my naÃ¯ve enthusiasm showed me for a child. But the little man took my words seriously.\n\nâ€œI myself have only seen him from a distance; we have not spoken. It is not wise to interfere with one who is under the geas of the Hero. Extremely powerful forces are at work upon the one so chosen, and direct meddling can be dangerous; extremely so, since the penalty for a Heroâ€™s failure can be a grave one for the entire land.\n\nâ€œBut over many centuries, those of the order to which I belong have studied these Heroes, and found that their success can be aided without harm, by quietly preparing the way for them. You are well-studied, says your proud father; do you know the history of the Red Lordâ€™s uprising?â€\n\nâ€œI do, sir; it is a sad tale for us, though an ancient one, for it was here that the Red Lord demonstrated the power of his alchemical apparatus, by summoning a cloud that filled our valley with caustic fumes and killed half the inhabitants.â€\n\nâ€œQuite true. But did not the Hero Xander use an enchanted claw that sprang across a great distance to snatch the alembic from the Red Lordâ€™s very grasp?â€\n\nI thought carefully, reconciling the timeline of the legend in my thoughts. â€œSir, he did; but that was in Meln, on his <i>second</i> encounter with the Red Lord, for earlier he had not yet acquired the claw from its ancient resting place beneath the lakebed.â€\n\nHis smile widened further, if such were possible. â€œIndeed so! You shall be a scholar one day, I foresee; perhaps of our order. Let me cease evading my point: Had Xander not failed to discover the entrance to the caves when he first explored the lake, he would have obtained the claw <i>before</i> first meeting the Red Lord here, and could have used it during that meeting to save this valley from its gruesome fate.â€\n\nI nodded slowly, understanding coming to me. â€œDoes your order, then, provide such assistance to newer Heroes, without their knowing it?â€\n\nâ€œPrecisely, Tom. We consider the overall strategy of the threat facing our land, which they cannot so easily see, and make certain <i>subtle</i> changes to guide them.â€\n\nâ€œIs the welcome that our town is providing this Hero part of such a change, sir?â€\n\nâ€œIn a small way, yes. A well-fed and -provisioned Hero is a more alert and successful Hero, one might say. But I am actually here to work a more significant change.â€\n\nAt this, he stood and opened a sack that had been lying behind him, from which he pulled a metal box. It was not a large box, nor was it ostentatiously decorated, but when it emerged, it <i>did</i> something to the quality of the sunlight, the temperature of the air, the sounds of insects around us. All the hairs on my arms stood up.\n\nâ€œThis is a chest that we obtained, at great effort, from the ruins of an ancient temple. I should not disclose its location, even here where none can overhear. We are confident that the Hero who even now approaches will explore this temple, to obtain the chest and its singular contents. But we also know that the location of the temple is such that he will most likely reach it only <i>after</i> a dangerous encounter in which he will have great need of the artifact in this chest. Do you follow me?â€\n\nâ€œI do, sir. You wish to give the Hero this chest so that he will survive the peril.â€\n\nâ€œPrecisely. But, as I have said, we cannot merely <i>give</i> the Hero gifts, for he is under a great spiritâ€™s control, and such interference would be quite dangerous to us all; as dangerous as knocking the elbow of a monk while he copies a manuscript, perhaps upsetting his ink-bottle across the unfinished story.\n\nâ€œNo, we must bend the storyâ€™s arc gently, letting the Hero discover this great treasure on his own. There is a small limestone cave by the stream behind your house, is there not?â€\n\nBlinking at the non sequitur, I merely nodded.\n\nâ€œExcellent. I am told you have explored this cave in the past. Please take this chest and deposit it at the back of the cave. If you can, bury it halfway in sand, and take care to brush away your footprints as you exit.â€ In saying this, he returned the box to its sack (causing light, air, sound and skin to return to normal) and placed it in my lap.\n\nI knew this for a test, not having missed his reference to a potential future for me in his fascinating Order. In dreamlike slowness, I took hold of the sack, looked him in the eyes, and assured him that I would undertake this task.\n\nâ€œI knew you would. We watch many things, in my order. You have our great thanks; and should our tasks this year be successful, with the Goddessesâ€™ blessings, you may hear from me again. My name is Mi-Mo-To.â€\n\nAt that he gave an odd little bow, smiled again, and walked off down the road at surprising speed.</p>\n<h2 style=\"text-align: center\">â€”5â€”</h2><p><b>So awhirl was my mind with speculations</b> that the walk back seemed to take only half its usual time, despite the extra weight of the sack slung over my shoulder. It was a harsh familiar voice that awakened me when I entered the village.\n\nâ€œTommy! My good man, is that a sackful of rubies youâ€™ve scratched from the dirt with your cane? Come, sit and dice with us, and weâ€™ll soon relieve you of that weight!â€ It was Roger, an idle young man of twenty, sitting at a table outside the tavern. Roger had some talent at gemspotting, but used the proceeds for drink and gambling, and imitated as best he could the look and manners of a city dandy. I believe it was his vanity that kept him from actually moving to a city: there he would be lost in a crowd of his peers, while here in the village he could feel important, and unique, and attract an equally idle clique of hangers-on.\n\nSeveral of his companions laughed coarsely at the joke, and I turned red. His reference to my lameness had not gone unnoticed, by me or by them; I was a frequent butt of their jokes.\n\nâ€œLook, weâ€™ve made a new game!â€ said Lenny in mock invitation. It was true: on the table were more dice than usual, some of odd shapes, and a sheet of parchment with a sort of maze drawn upon it. On the maze stood little whittled figures striking heroic poses. (Even his worst enemies, a title for whom many competed, were forced to admit that Lenny could find fame as an artist, were he ever able to apply himself to the work.) â€œItâ€™s a game of Heroes! And Iâ€™ve made a figure for you to play!â€ Here he produced another figure, of a gnarled cripple balancing on crutches.\n\nThe roaring in my ears drowned out even their laughter as I limped away.</p>\n<h2 style=\"text-align: center\">â€”6â€”</h2><p><b>I went straight to the stream,</b> bypassing the house and any inconvenient questions about the sack (or my tears). Where it turned a corner there was a small gravelly beach, and behind a stand of bushes, a narrow hole. Through this I pushed first the sack, and then myself.\n\nMost of the village children knew about this cave. It was actually rather new, unblocked a few years before by the cracking in half of a large boulder. The <i>idea</i> of a cave was terrifically exciting, of course, but there was not actually very much inside the cave, apart from darkness and an unpleasant dank smell, so it was less popular than one might expect. I was fairly confident the treasure chest would be safe until tomorrow, especially as the children were today in such a state of Heroic fever that the cave would hardly cross their minds.\n\nI walked lightly to the back wall of the cave, and dug a little hole into which the chest halfway fit. Then I smoothed out the cold sand, and walked backwards to the entrance, using a frond from a bush to sweep the ground smooth. I looked back at my handiwork, and saw the chest shining in the darkness. To my dark-adapted eyes it lit up the little cavern, transforming it into a fantastic lair. We had never brought fire in here! So I had never seen the small stalactites hanging from the ceiling, with crystal-ball waterdrops sparkling from their tips. I saw answering sparkles in the sand, and knelt to uncover a green and a blue gemstone. I turned back to the entrance, and next to it I saw a drawing on the wall, in an ancient style, its red ochre outlines depicting a man with one leg brandishing a sword in one hand and the severed head of a beast in the other.\n\nI swept at the sand some more, to cover up the inexplicable tears that fell there, and stepped back out into the world.</p>\n<h2 style=\"text-align: center\">â€”7â€”</h2><p><b>Throughout the remainder of the afternoon I sat at home,</b> which being not atypical of me, caused no comment. I had acquitted myself well at the gem-field, and after admiring the flash and color of the stones, my mother placed a few into the ceremonial new guest-jars beside the hearth, bidding my sister to scatter the rest in the grass before the houses. This task little Elsie undertook with great seriousness, having just that year learned that it was the adults, not fairies, who scattered the sweetmeats in just this manner on the early morning of the spring feast.\n\nVisitors came by to gossip with my parents, and as there was only one topic of conversation that day, I learned much of the troubles besetting the land. Beasts of formidable size had waylaid travelers in Ordon and were making the countryside unsafe at night. Some of them were said to have language, and carry weapons in their mutated paws. Ours was not the only village to have lost a child, and some of the aftermath was considerably more shocking than a mere pool of blood. Great towers of fire had been seen in the south, and what appeared to be birds of enormous size circling them, though no further details were known, as traffic from the South Road had dried up completely, to the dismay of innkeepers. There were dark rumors that one of the southern lords (a clan that were always fractious) might be behind all of this; from there, the conversation drifted to complex recountings of Court intrigue that I could not follow. My mind drifted, tooâ€¦</p>\n<h2 style=\"text-align: center\">â€”8â€”</h2><p><b>The door burst open,</b> awakening me from my reverie and halting the conversation between my parents. A tall, slender figure stood outlined in the doorway by the light of sunset, then stepped inside. The Hero was clad in green, his tunic mud-stained and scratched. A cap hung down behind his head. His sword he held unsheathed, the point trailing unnoticed on the ground.\n\nHe grunted an acknowledgment as he surveyed the dim room, but observed none of the formalities of an entering guest (which in any case would have begun by knocking, as Elsie was constantly reminded.) His eyes shone large and bright, and more so than clothing or weaponry announced his singular role: he was, quite clearly, a man possessed, one driven by a spirit in the service of superhuman feats.\n\nMy father cleared his throat; he had no doubt expected a more formal entrance, but picked up his script where he could. â€œSir, your presence in our home honors us. How may we â€”â€\n\nBut the Hero did not need to be asked; abruptly he lunged and ran his sword through one of the guest jars on the hearth, which shattered most spectacularly. Elsie shrieked and hid behind Mother; the rest of us merely started back. The Hero knelt and, with a heartfelt â€œ<i>thatâ€™s</i> what Iâ€™m needinâ€™â€, grabbed the small red cake that had been stowed in the jar and shoved it into his mouth.\n\nThis was all <i>quite</i> wrong, of course, though if you are unfamiliar with our customs you may not recognize quite how wrong. A visitor, of whatever rank, must knock and ask permission to enter (which must, in turn, be granted.) An honored stranger will be offered guest-jars by the lady of the house, which he will ceremonially toss onto the hearth and then pick up the small gifts from among the shards, this symbolizing his acceptance of hospitality and the breaking of the walls of formality between guest and host. Then all can speak openly, using the at-home tense rather than the more formal cross-rank speech.\n\nBut instead, while busily chewing (and despite his appalling manners, I could well imagine the hunger that impelled him), he went on to destroy the remaining three jars with swipes of his sword. Two held green and blue gems, which he approvingly shoved into his wallet. The third was by mistake empty, however; he glared at Mother, who cast down her eyes and turned red.\n\nâ€œAny more cakes?â€ he asked when his mouth was clear. â€œIâ€™ve got room for two or three more, after that hike from Meln. Not a bloody thing to eat on the trail, unless you count the heads I hacked off the wolves that came after me â€” ha!â€ He accepted two more of the heart-shaped cakes by shoving them into his mouth. This did instill in me a certain form of respect, for those cakes were <i>extremely</i> rich and filling, and I could not imagine eating more than one at a time.\n\nThe Hero dropped into Fatherâ€™s chair while he chewed, and an uncomfortable silence reigned for a few minutes. Elsie emerged from behind Mother and ran to rescue her dollie, which had been thrown across the room by one of the sword-blows, and which now leaked stuffing as Elsie ran outside in tears.\n\nI felt an unaccustomed (yet explicable, I trust) rage growing in me. This young man, though undeniably a Hero, upon whose mighty endeavors the safety of village and kingdom must depend, was just as undeniably a lout. He lacked any form of manners; he cared nothing for us as people, seeking only to get what he needed. His smirk at Elsie and her wounded dollie told me most eloquently that he saw all of this as a game. Hero? He was no better than Roger and Lenny and their lumpen companions. We were just part of an idle story to him, little figures he pushed about by rolls of dice. Could the fate of Hyrule really depend on such a thug?\n\nâ€œRight. Now, I want information. Thereâ€™s news of some tough beasts and beast-men gathering south of here, and the equipment I gotâ€™s seen me through a lot so far, but itâ€™s nothing to what Iâ€™ll be needinâ€™ from here out. Iâ€™ve heard tell of some <i>enchanted</i> item in this valley, though the tales leave a lot to be desired in details. Ye know what I mean? Got any clues or local tall tales?â€ He ran his gaze between us.\n\nThat gaze was bright and sharp and almost impossible to resist. I felt impaled on it, on an arrow of Fate shot from the Heaven of the Goddesses. If the fate of the land depended on him, then so did <i>his</i> fate depend on <i>me</i> at this instant. My part, clearly, was to pipe up and inform the Hero of the mysterious cave that had opened up recently, which he would not notice on his own but whose location I would explain to him. This would complete the task entrusted in me by the mysterious little man; would return the weight of Fate from my shoulders to the Heroâ€™s; and would perhaps influence my <i>own</i> fate directly, if the little manâ€™s Order were pleased at my performance.\n\nâ€¦And yet I could not do it. I saw in the Hero all the petty cruelties that had been inflicted on me by other boys; all the unthinking arrogance of the able-bodied (whose easy movement I desperately envied); all the blind unfair randomness of a universe that gave out rewards and punishments undeserved by their recipients.\n\nI said nothing.\n\nMy parents uneasily related the usual local legends, including the curious one of a ruined temple of the old religion, whose entrance lay hidden at the far end of the narrow Samer gorge to the south. This one aroused his greatest curiosity, and after quizzing them at some length on the specifics (of which there were none) he headed off into the twilight, kicking the door open with his muddy boots such that the hinges cracked.</p>\n<h2 style=\"text-align: center\">â€”9â€”</h2><p><b>The Hero had left,</b> along the road to the south, leaving a tumult of gossip in his wake. A few other families were as outraged as ours, having been similarly ill-treated in their homes (we had at least been spared from having jars gleefully thrown about at all four walls, and chests of valuables ransacked!) Those who had not <i>personally</i> met the Hero nor experienced his peculiar manners were more inclined to believe the descriptions from histories and legends, and several foolish young women who had only seen him from a distance were swooning at his beautiful large eyes and effortless swordsmanship.\n\nIt did not take long for us to learn of his next adventure. Two days later, a merchant coming from the south related news he had heard from a ranger, of a rockfall in the Samer gorge. Great boulders had fallen from the cliff faces at the near end and rolled at high speed down the steep slope; and midway was found the body of a warrior clad in green, crushed like an insect between two of these rocks. His tracks showed he had been desperately trying to outrun the avalanche, but failed.</p>\n<h2 style=\"text-align: center\">â€”10â€”</h2><p><b>I crept away from the crowd,</b> my thoughts in great turmoil, and made for the stream. I rinsed my face, but could not clear away a vision of that ruined, blood-soaked body. I shivered with horror, and with guilt.\n\nI had been avoiding the cave, and apparently no other child had entered it, for the chest was still there. It had waited patiently for me. I knelt in the sand, my heartbeat a crescendo in my head, and pried the ancient lid open.\n\nThe chestâ€™s contents were no more than a few pieces of leather, dusty, with sinews sewn along the edges.\n\nNo, they were more than that â€” as I blew the dust off of them, they began to shine, revealing themselves as gold. Gold with the softness of leather, or perhaps leather with the shine of gold. They were sandals, of an ancient design that I had seen in a book, open soles with straps that laced about the feet and around the legs to the knees. They vibrated with power, I could feel it: in my hands they spoke to me, wordlessly, told me of the centuries they had been captive in the box, waiting to <i>run</i>, to <i>leap</i>, to <i>kick</i>â€¦\n\nThere was nothing to do but to put them on. I took off my left shoe, placed my foot in the left sole, and awkwardly began to fasten the laces. No matter: they wrapped themselves into place in a blur. I was not accustomed to wearing a shoe on my lame right foot, but I placed the other sandal upon it anyway, and again the laces grabbed tight. Then I stood, without my staff, effortlessly, disbelievingly.\n\nI still needed one more thing, and I now saw what it was, and where. The jewels I had earlier seen sparkle in the sand were not randomly placed, but lay equally spaced, in a line against the cave wall. I reached between them into the sand and lifted out a scabbard. The jewels adorning it were the exact same type that I had been selling to buy food, or trading for arrowheads, but had here been inlaid into fine metal. Two rare orange ones decorated the hilt, which I took hold of, and drew forth the blade â€” yes, <i>this</i> blade, which I wield to this day, never has it failed me!\n\nI leapt from the cave and headed south.</p>"
  post_title: "The Hero Passes"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-hero"
  to_ping: ""
  pinged: ""
  post_modified: "2007-08-06 00:16:36"
  post_modified_gmt: "2007-08-06 07:16:36"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/08/the-hero/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 225
  post_author: 2
  post_date: "2007-08-27 08:51:09"
  post_date_gmt: "2007-08-27 15:51:09"
  post_content: "Paul Graham [who is obnoxiously elitist, but frequently insightful] has a new essay, \"<a href=\"http://www.paulgraham.com/head.html\">Holding a Program in One's Head</a>\", that is making me feel sad this morning.\n<blockquote><p>\"A good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem he's working on. Mathematicians don't answer questions by working them out on paper the way schoolchildren are taught to. They do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. At its best programming is the same. You hold the whole program in your head, and you can manipulate it at will.\"</p></blockquote><p>I know that feeling so well, and I want to be back in that [non-Euclidean] space again.</p>\n<!--more-->\n (I'm fascinated by such spaces, as I've <a href=\"http://mooseyard.com/Jens/2005/06/little-boxes-of-words/\">written</a> <a href=\"http://mooseyard.com/Jens/1995/08/piling-up-sheets-the-face-in-the-soup-bowl/\">before</a>.) Currently my work is so fragmented into little bits â€” reading bug reports, figuring out what's going wrong, making little tiny changes, testing them, dealing with the bureaucracy of integrating changes. It's no one's fault, and it's a necessary part of finishing a large release, but I'm sick of it.\n\nThe worst thing is that I can't even summon up the energy to focus deeply on anything else. When I'm not doing the above, I'm mostly sucking at the teat of incoming news-bites and emails. When all my unread counts hit zero I feel lost. I have any number of interesting in-progress projects I could work on, but I develop selective amnesia of them while at the keyboard, because I feel too lazy to put on those Goggles Of Omniscient Coding.\n\nI know this will go away. But I want it to go away NOW.\n<blockquote><p>\"Whether or not understanding this can help large organizations, it can certainly help their competitors. The weakest point in big companies is that they don't let individual programmers do great work. So if you're a little startup, this is the place to attack them. Take on the kind of problems that have to be solved in one big brain.\"</p></blockquote>"
  post_title: "Holding a Program in One&#8217;s Head"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "holding-a-program-in-ones-head"
  to_ping: ""
  pinged: ""
  post_modified: "2007-08-27 08:51:09"
  post_modified_gmt: "2007-08-27 15:51:09"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/08/holding-a-program-in-ones-head/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 226
  post_author: 2
  post_date: "2007-10-26 22:06:30"
  post_date_gmt: "2007-10-27 05:06:30"
  post_content: "It was a great relief for Leopard to finally be finished, after more than two years of work. (And if you wonder why it took so long, consider some of the new products that have been released since Tiger shipped in May 2005: the Intel Macs, the Apple TV and the iPhone / iPod Touch. All of these contain system software that absorbed the attentions of significant subsets of the people who work on on OS X.)\n\nAnd now, a few weeks later, it's hit the streets. On Tiger Day in 2005 I helped out a bit at the Apple store in Santa Clara; that was fun, but tonight I stayed home because I'm recovering from a bad cold. Still, in between coughing fits, I can ring in the new OS by pointing out yet another little improvement, one that didn't make it into the official Top 300 list.\n\nh2. #301: Safari RSS Article-Reading Improvements\n\nYou can now choose to leave new articles marked as \"unread\" until you explicitly mark them as read by clicking on them. This is more like other news-readers, and it's good if you want to skim through bucketloads of new articles and read a few of them, but still know which ones you skipped over so you can get to them later.\n\nTo turn on this mode, go to the \"RSS\" pane in Safari's preferences, and look for the pop-up menu labeled \"Mark Articles As Read:\". Change the value to \"After clicking them.\"\n\nYou'll also want to make sure \"Highlight unread articles\" is checked, so that you can tell the read and unread articles apart. By the way, this highlighting has been improved, too. Instead of just changing the headline text to orange, Safari now draws a pale blue background behind the article, and adds the same blue bullet that Mail uses for unread messages. Click anywhere in an unread article to mark it as read. (There's also a \"Mark All As Read\" item under \"Actions\" in the sidebar.)\n\nIf you _really_ want to speed-read through articles in a hurry, drag the article-length slider (in the sidebar at the top right) all the way to the left. In this view, the articles now display in a very compact single-line list view, with just room for the first bit of the text in between the title and the date. You can still click a headline to jump to its web page, or move the slider back to the right to expand the articles. (Clicking the blue bullet at the left marks an article as read without viewing it.)\n\nNothing earth-shaking, I know, but I'm happy about these tweaks because they bring the Safari RSS experience more into line with the way we first prototyped it in 2004. Most of what my team-mates and I worked on for Leopard is hidden away behind the scenes (the new \"PubSub\" framework that supports Mail RSS as well as Safari) but it's nice to have contributed to a bit of more visible functionality too.\n\n(Speaking of the PubSub framework, it has a public API that makes it extremely easy to parse and subscribe to RSS or Atom news feeds. There are some sample applications using it in /Developer/Applications/PubSub, and I'll also try to post an overview here, now that I can finally talk about these things publicly.)"
  post_title: "Leopard Feature #301"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "leopard-feature-301"
  to_ping: ""
  pinged: ""
  post_modified: "2007-10-26 22:06:30"
  post_modified_gmt: "2007-10-27 05:06:30"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/10/leopard-feature-301/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 10
-
  ID: 227
  post_author: 2
  post_date: "2007-11-01 10:25:43"
  post_date_gmt: "2007-11-01 17:25:43"
  post_content: "It's a sure sign that <a href=\"http://en.wikipedia.org/wiki/Wiki\">wiki</a>s are going mainstream when one appears for a video-game console. \"<a href=\"http://wii.ign.com/articles/829/829301p1.html\">ZackAndWiki</a>\" has the requisite goofy name (like <a href=\"http://info.tikiwiki.org/tiki-index.php\">TikiWiki</a> or <a href=\"http://wikkawiki.org/HomePage\">WikkaWiki</a>), but once you try it out, you'll find it approaches its job very differently than you're probably expecting.\n<!--more-->\n\n\n<img src=\"http://wiimedia.ign.com/wii/image/object/893/893610/ZackAndWikiFinalboxart_160w.jpg\" align=\"right\" hspace=\"4\" vspace=\"4\"/>I'll say it up front: <a href=\"http://wii.ign.com/articles/829/829301p1.html\">ZackAndWiki: QuestForBarbarosTreasure</a> is a disappointment when measured against the expected checklist of wiki features. Most seriously, it has _no text editing at all_, either WYSIWYG or markup. Instead the \"pages\" take the unusual form of 2 1/2-D environments, like jungles or ice palaces, that you \"edit\" by pointing to and manipulating \"items\". This is a lot more limited, but in compensation the overall interface is extremely polished, with lots of colors and animation. Editing is accomplished by moving the Wii remote in a variety of intuitive ways, and offers nearly the expressive power of a keyboard while looking a lot cooler to do.\n\nWikis are of course expected to retain multiple revisions of pages; <a href=\"http://wii.ign.com/articles/829/829301p1.html\">ZackAndWiki</a> supports a limited form of this in the form of \"platinum tickets\" that allow you to roll back one (but only one) unwanted latest revision. So if you decide that having Zack be squashed flat by a rolling stone monolith was a mistake, it's quite easy to undo it. But one rollback is it! I found that quite frequently this limitation makes accomplishing everyday tasks, like evading murderous robotic statues, a lot harder than necessary.\n\nBut focusing on <a href=\"http://wii.ign.com/articles/829/829301p1.html\">ZackAndWiki</a>'s drawbacks is a mistake â€” this isn't another competitor in a crowded field; what it's really doing is redefining the medium. Instead, consider its biggest innovation: <i>puzzles</i>. This has never been an area of strength for wikis, despite a few primitive attempts to model old \"Choose Your Own Adventure\" type stories â€” e.g. \"The troll raises his axe. Do you \"FightTheTroll\":/Jens/2006/05/only-known-instance-of-zork-slash/, \"RunAway\":/Jens/2006/05/only-known-instance-of-zork-slash/, or \"OfferItABoxOfChocolates\":/Jens/2006/05/only-known-instance-of-zork-slash/ ?\". <a href=\"http://wii.ign.com/articles/829/829301p1.html\">ZackAndWiki</a> really raises the bar, incorporating the type of puzzles found in \"The Legend Of Zelda\"'s dungeons and of course in old <a href=\"http://en.wikipedia.org/wiki/LucasArts_adventure_games\">graphical adventure games</a> like \"The Secret Of Monkey Island\". To the hardcore wiki fanatics this may seem extraneous, but I say don't knock it till you've tried it. After a few hours of sneaking sleeping potion into cannibals' stew so I could sneak past them, or flooding the lair of an angry lion, I found I didn't miss things like automatic linking or inline comments at all.\n\nUnfortunately, unlike the majority of wikis, <a href=\"http://wii.ign.com/articles/829/829301p1.html\">ZackAndWiki</a> is neither free nor open-source. The retail price of $40 (for which you get a boxed DVD) does compare favorably with enterprise wikis like SocialText or Confluence ($1200 and up). The manual, though full-color, is fairly brief, but to make up for it there is an unexpectedly deep tutorial included in the software, with animated avatars that guide you through the features.\n\nI have to admit that <a href=\"http://wii.ign.com/articles/829/829301p1.html\">ZackAndWiki</a> isn't for everyone. Though I'm personally very excited by the innovations and refinements it offers, it's sure to turn off a lot of wiki uses with its total absence of text editing, multiple revisions, permissions, attachments, comments and networking; not to mention the lack of Windows, Mac or Unix compatibility. But i urge you to give it a try anyway. Once you've collected a few treasure chests full of enchanted pirate artifacts, you may never want to go back to the old way of doing things!"
  post_title: "Review: ZackAndWiki"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "review-zackandwiki"
  to_ping: ""
  pinged: ""
  post_modified: "2007-11-01 10:25:43"
  post_modified_gmt: "2007-11-01 17:25:43"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/11/review-zackandwiki/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 228
  post_author: 2
  post_date: "2007-11-18 16:52:30"
  post_date_gmt: "2007-11-18 23:52:30"
  post_content: "Thanks to \"Steve Dekorte's blog\":http://www.dekorte.com/blog/blog.cgi, I just ran across <b>\"Box2D\":http://www.box2d.org/ </b>, an open-source 2D physics engine for games. In other words, it simulates the motion over time of convex polygons, taking into account inertia, gravity, collisions, friction, angular momentum, torque â€” all the things I once painstakingly learned in college and then completely forgot. Now they've suddenly become fascinating again, since Box2D does all the \"hard work\":http://www.chrishecker.com/Physics_References. The app just has to describe the objects, then call Box2D in a loop to find out how their coordinates change over time.\n\nBox2D comes with some demos that are bare-bones graphically, but amazingly realistic in motion, including a swinging chain, a web of springs, and a pyramid of blocks that you can undermine and collapse:\n<img src=\"http://mooseyard.com/projects/box2d/pyramid.png\" width=\"500\"/>\nA far more sophisticated usage of Box2D is in the indie game \"Crayon Physics Deluxe\":http://www.kloonigames.com/crayon/, \"in which you get to experience what it would be like if your drawings would be magically transformed into real physical objects.\" You _must watch the amazing video_ on that site. (Then cry, because it's only for Windows.)\n\nSpeaking of Windows, the official Box2D package only builds on that platform, so far. But the core library is platform-independent C++, and the demos use OpenGL, so porting isn't a big deal. Building on some work of some others who'd written makefiles, I put together an Xcode project. Now you can \"*download the demo app*\":http://mooseyard.com/projects/box2d/Box2DTestBed.zip if you want to play with it. If you want to experiment, you can copy the Box2D dylib itself out of the app bundle, or \"download my patch\":http://mooseyard.com/projects/box2d/Box2D_r49+MacXcodeSupport.patch and apply it to revision 49 from the \"Subversion repository\":http://sourceforge.net/svn/?group_id=205387.\n\nThere's a killer opportunity here to *plug Box2D into Core Animation*. Then you'd have the gorgeous high-speed compositing of the latter, coupled with far more sophisticated animation capabilities. (The animation functionality in CA is fully subclassable, so this should be straightforward to do.) I've been fooling around with Core Animation lately, and having a lot of fun making pretty pictures that slide around smoothly. I've never before felt the need for a game-physics engine, but the prospect of making my pretty pictures move with that kind of realism is suddenly very enticing!"
  post_title: "Box2D"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "box2d"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:44:53"
  post_modified_gmt: "2009-10-19 16:44:53"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/11/box2d/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 6
-
  ID: 229
  post_author: 2
  post_date: "2007-12-02 15:32:27"
  post_date_gmt: "2007-12-02 22:32:27"
  post_content: "I finally made myself a Facebook account, mostly to see what it's like. Overall, I'm pretty impressed: the UI is nicer than most such sites, particularly the still-antiquated LiveJournal and the disaster that is MySpace. The biggest issue there seems to be that the main profile page absolutely doesn't scale up to handle the exploding number of apps/widgets people are stuffing into it, so you end up with mile-long profiles containing box after box of junk.\n\nBut the most interesting thing I noticed is how *the service has no visible identifiers for user identities*. Unlike most centralized services, there's no unique username to pick. I assume that, internally, each account requires a unique email address, but that address plays very little role in the user experience, apart from its use in helping people find their existing contacts' profiles. The service does assign a unique number to every profile, and this shows up in profiles' URLs, but it never seems to appear in the page itself. So there's no obvious way to say \"this is my Facebook ID\", other than pasting in the completely non-mnemonic URL of your profile page. And conversely, the visible identifiers you see for other members are simply their real names (plus photos/icons.)\n\n*This makes sense, since Facebook is all about the social network.* It may have eight hundred million members (assuming the account IDs are assigned serially) but there's generally no need to know about, identify or refer to some random member, since it's almost certainly someone you don't know or care about. The people in your social network can be referred to by real name, because at that scale the number of name conflicts is so much lower, and you or your friends presumably ruled out spoofs before friending that person. Real names work for the same reason that they work in real life social interactions.\n\nThis avoids a lot of problems. *Unique usernames, while deliciously old-school-geeky, don't scale well to the modern Internet*, as has been apparent since the rise of AOL 15 years ago. A username like \"snej\" or \"JohnWilson\" has great mnemonic value, but after a while everything's already been taken but \"fuzzi_bunney_37327\" or \"JohnWilson9284\", which are far less useful.\n\nUsing email addresses as IDs adds more room with a second level of namespace, and removes the need for people to make up new IDs for every site, but in practice it exposes the existing flat-namespace problem of the big ISPs and portals. \"fuzzi_bunney_373@gmail.com\" isn't much of an improvement. There's also the privacy and spam problem of exposing those emails to others.\n\nh2. There is no unique identifier.\n\n*It turns out there really isn't _any_ good solution for universal unique personal identifiers.* This has been one of the factors blocking the utopian goal of a global Public Key Infrastructure (PKI): to be useful, a certificate has to assure you of its owner's identity, which means it has to contain some signed identifier that you can associate with a real person (or persona). But, as argued convincingly by Carl Ellison in his paper \"Improvements on Conventional PKI Wisdom\":http://www.cs.dartmouth.edu/~pki02/Ellison/paper.pdf, there isn't any such identifier that always works. Real names don't work because they're not unique enough, not globally or even in any large organization. Ellison calls this the \"John Wilson problem\", named after eight Intel employees with that name, who kept getting misdirected email. (I think of it as the \"Steve Smith\" problem, after an old co-worker of mine at Apple.) Adding middle initials doesn't help, of course, because most people don't know their friends' or co-workers' middle initials. Ellison concludes:\n\nbq. \"Human beings do not use names the way we want them to. â€¦ Computer developers â€¦ think of names the way we do variable names or path names. That is, a name is some string, unique within its block or directory or context, that unambiguously identifies some object. â€¦ Compilers and operating systems may behave this way, but human users do not.\"\n\nOf course, the certificate can include more forms of identification. A photo would help a lot, or email address. So would the name of your employer and (for co-workers) what department you work in. So would your hometown and phone number. Or your SSN or driver's license number. But *no _one_ form of ID is sufficient for everyone*: I don't know most of my co-workers' home phone numbers. I have personal friends whose current employment I'm not sure of. I have online friends who are nonetheless pseudonymous enough that I don't know what they look like.\n\nAnd you can't just put in _all_ (or even most) of those forms of ID, or your certificate becomes a privacy nightmare, a dossier worthy of a police state. The conclusion? There's really no good way to prove identity using a self-contained certificate. QED.\n\nThis quandary has been expressed as \"Zooko's Triangle\":http://en.wikipedia.org/wiki/Zooko%27s_triangle, which in textual form says: *No single form of identification can be simultaneously globally unique, decentralized, and human-meaningful*. It can only have two of those attributes.\n\nh2. Distributed identification\n\nThe best approach to identification seems to be to give up on having the identifier try to prove its own relationship to a \"principal\" (person or entity). Instead, the *relationships are given as external statements made by other principals*. The identifier itself can then just be a random unique number (such as a public key, which is easy to generate) with no intrinsic mnemonic value.\n\nSo for example, if I get a message from F837CA77B6, I have no idea who that is. But if I already know Karen, and Karen makes a signed assertion that F837CA77B6 is her new husband Michael, then I can trust that the message is from Michael. I can add him to my address book as \"Michael Jones\", and never have to see that random number again. It doesn't matter if there are thousands of other Michael Joneses in the world, because I only know one. Even if some of my friends know another Michael Jones, I just have to refer to him as \"Michael Jones, my sister Karen's husband\" to disambiguate.\n\nIn a nutshell, this approach uses the social network to manage identity, by reducing the size of the problem space by about seven orders of magnitude. *It's perfectly feasible to keep track of the identity of a few hundred people using familiar attributes like names, faces and personal relationships: humans have been doing it for literally <strike>millions</strike> hundreds of thousands of years.* Evolutionary biologists argue that managing social relationships in tribes was a key factor in the development of human language: in other words, gossip was the killer app for the neocortex.\n\nSteve Dohrmann and Carl Ellison's 2002 paper \"Public-key Support for Collaborative Groups\":http://www.cs.dartmouth.edu/~pki02/Dohrmann/ describes a prototype system that uses such a distributed identity system to implement a peer-to-peer collaborative space that provides access control and trust without needing any centralized PKI.\n\nMarc Stiegler, in his 2005 essay \"An Introduction To Petname Systems\":http://www.skyhunter.com/marcs/petnames/IntroPetNames.html, has coined the term \"petname\" for such a private mnemonic name each person locally assigns to their contacts; for example, the Michael above might be \"Michael\" to me, while I'd refer to my friend Michael as \"Mikey\". Petnames are (locally) unique and memorable, and make it easy to work with identifiers that are intrinsically just long strings of digits. The use of petnames _and_ raw identifiers together gets around the limitation of Zooko's Triangle.\n\nBryan Ford et al, in \"Persistent Personal Names for Globally Connected Mobile Devices\":http://pdos.csail.mit.edu/papers/uia:osdi06-abs.html (2007) describe an ongoing project called \"Unmanaged Internet Architecture\":http://pdos.csail.mit.edu/uia/ that provides a more general naming, discovery and communications protocol for people's multiple networked devices and those of their friends and colleagues; it's a bit like Apple's Bonjour, but it follows your social network, not Ethernet.\n\nh2. Oh yeah, we were talking about Facebook\n\nFacebook, of course, is centralized. (Well, the add-on apps aren't, but even they get proxied through facebook.com.) But since *a central aspect of its data model â€” user identities â€” works in much the same manner as these distributed systems, I believe that implies that a very Facebook-like social network _could_ be built as a distributed architecture* that didn't rely on a central server or organization. It might not even look that different; you'd just notice (or not) that, as you surfed from one friend's profile to another, the domain name in the address bar changed.\n\nSo what? Why does this matter if it doesn't change the user experience, since existing monolithic sites can already do this, without any need for fancy new protocols?\n\n* Because there are too many of these sites, and none of them speak to each other; so you either have to make redundant accounts on all of them, or just not connect with the friends who aren't on the one you use.\n* One reason there are so many is because users are fickle and the sites keep booming and busting. Friendster famously imploded; Orkut became Big In Brazil but not elsewhere; MySpace was famous yesterday; FaceBook is the darling today.\n* Actually, the users aren't just being fickle. They leave sites because of real problems. Sometimes they're technical: running a website with a complex data model, highly sticky content, and millions of users is very difficult. Half of what killed Friendster was an inability to keep the servers running reliably. Today's Facebook app developers run into the same issue, as any halfway-popular app generates enough traffic to swamp most hosted servers.\n* And then there are the social and legal problems. Friendster's other fatal problem was that it drove away its most rabid users by deleting their more creative profiles. MySpace and Facebook are currently testing the limits of how much their users' eyeballs will tolerate being advertised to. LiveJournal keeps making ham-fisted crackdowns on inappropriate content, to the outrage of some of its core constituencies. Given the social, monetary and legal issues faced by huge public websites, these kinds of behavior aren't going to go away.\n\nh2. \"Just get a blog, dude\" (or not)\n\nAt this point the elite members of the \"blogosphere\" [sorry] will be nodding smugly. You don't need these monolithic services with all their problems if you just set up your own blog on your own website. All you need is a little bit of skill with FTP, and MySQL, and PHP, and HTML, and CSS, and that's it! You're free! No more being hassled by The Man.\n\nStandalone blogs just don't have the social features, though â€” they're _too_ standalone. I've had this blog for years, and it feels like a soapbox in a big city, where I can occasionally rant about something. I've also had accounts on one or two social-network sites for years, and those feel very different: they're deeply _personal_, and the presence of friends (and their friends) is always very apparent. They're like town squares, or big cocktail parties, where I can talk with a few friends or listen in on the buzz going on nearby.\n\n*The standalone blogs just don't have enough protocols to enable the kind of rich interpersonal interaction that centralized social-network sites have.* The venerable protocols like RSS/Atom, ping, and trackback are the kind of stuff described as \"the simplest thing that could possibly work\":http://www.xprogramming.com/Practices/PracSimplest.html (if you're charitable) or \"something scrawled on the back of a napkin in crayon\" (if you're not.) More recently, \"OpenID\":http://openid.net/ is a big step forward in making identities transportable between sites. Google's \"OpenSocial\":http://code.google.com/apis/opensocial/ might help; I confess I haven't yet examined it closely enough to tell if it's useful for more than just creating yet more Facebook-style widgets.\n\nIn any case, there's more work to be done to bring social networking into the decentralized blogging environment. I think we may be at a tipping point now â€” *people seem to be increasingly aware of the problems that centralization brings, and in their aftermath I keep running across discussions of how it should be possible to do this stuff without pesky corporate overlords messing it up.* So there may be enough demand, now, to balance out the intrinsic difficulty of building open standards. I'm hopeful!"
  post_title: "Facebook and Decentralized Identifiers"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "facebook-and-decentralized-identifiers"
  to_ping: ""
  pinged: ""
  post_modified: "2007-12-02 15:32:27"
  post_modified_gmt: "2007-12-02 22:32:27"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/12/facebook-and-decentralized-identifiers/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 15
-
  ID: 230
  post_author: 2
  post_date: "2007-12-03 11:11:35"
  post_date_gmt: "2007-12-03 18:11:35"
  post_content: "Warren just emailed me this photo, commemorating the release of the first Apple product I worked on. That's me on the second row, second from the right, with the dopey expression (but no gray hairs.)\n<!--more-->\n<a href=\"http://mooseyard.com/Pictures/AppleScriptTeam.jpg\"><img src='http://mooseyard.com/Pictures/AppleScriptTeam-small.jpg' /></a>\n(click for humungous version)"
  post_title: "AppleScript team photo, 1993"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "applescript-team-photo-1993"
  to_ping: ""
  pinged: ""
  post_modified: "2007-12-03 11:11:35"
  post_modified_gmt: "2007-12-03 18:11:35"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/12/applescript-team-photo-1993/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 231
  post_author: 2
  post_date: "2007-12-10 13:26:52"
  post_date_gmt: "2007-12-10 20:26:52"
  post_content: "In some online forums I list as interests both \"gnosticism\":http://en.wikipedia.org/wiki/Gnosticism and \"agnosticism\":http://en.wikipedia.org/wiki/Agnosticism, which is a bit of a joke since the two words are literally contradictory, but is true in that both are interesting and important to me. Agnosticism as my attitude toward religion: that the existence of a God or gods is fundamentally unknowable, undecidable, unprovable. Gnosticism as a mystic tradition, a suppressed early fork of Christianity, whose beliefs have more recently had a large impact on the literature of the fantastic and on postmodern philosophy (notably Philip K. Dick's SF novels, the _Matrix_ films, Philip Pullman's _His Dark Materials_ trilogy, and Jean Beaudrillard's cultural theorizing.)\n\nA few weeks ago I had the thought that you could combine Arthur Clarke's famous Third Law with some of the ideas of Gnosticism, and arrive at a \"proof\" (which I'm aware is a contradiction in terms) of agnosticism. I'm sure this isn't entirely original, but it amuses me.\n\n\"Clarke's Third Law\":http://en.wikipedia.org/wiki/Clarke%27s_three_laws states that \"Any sufficiently advanced technology is indistinguishable from magic\". This idea has appeared in any number of science fiction plots, where time travelers from the future or astronauts visiting technologically-primitive planets are treated as wizards. It's also been used in a way in mystery stories, by Dorothy Sayers and others, where a magical event appears to have happened â€” a murderer teleporting out of a locked room, a woman turning into a werewolf â€”Â but is discovered at the end to have been accomplished through mundane technological means. And of course, the professions of stage magicians and spirit mediums show that in some circumstances the technology doesn't even have to be advanced.\n\nSo here's a variant on that law: _Any sufficiently advanced technology is indistinguishable from deity_. History is full of real-world examples of this, when explorers from one civilization (usually European) made contact with a less technological civilization and were taken for gods or angels. The most significant such encounter may have been \"CortÃ©s's defeat of the Aztec empire\":http://en.wikipedia.org/wiki/HernÃ¡n_CortÃ©s#The_Invasion_of_Mexico, which (according to many accounts) was made considerably easier by the Aztecs â€” including their emperor â€” taking the conquistadors with their horses and guns to be emissaries of the god Quetzalcoatl (and CortÃ©s to perhaps be the god himself.) More recently, the \"cargo cult\":http://en.wikipedia.org/wiki/Cargo_cult religions on Pacific islands sprang up in response to the presence during World War II of American soldiers â€” although in this case it's the technology, not the visitors, that was considered divine.\n\nA key belief of the Gnostics was that the entire human race were on the receiving end of a similar kind of exploitation. The Gnostics believed the material world to be the product of a \"Demiurge\":http://en.wikipedia.org/wiki/Demiurge, a lesser deity who was not omnipotent or omniscient but bound by the laws of nature. The demiurge was seen as good (if flawed) by some groups, but more often as evil. He was often identified with Satan, and sometimes even as the God of the Old Testament. His existence explained why the world was flawed and filled with evil, and put a new light on the jealous and vengeful actions attributed to God in the Old Testament.\n\nFrom a 21st century perspective, informed by Clarke's Law, we could see the demiurge as being entirely mundane, technological. A sufficiently advanced technology could undoubtedly \"assemble planets\":http://www.youtube.com/watch?v=UJTi7KJPx_E, \"design life forms\":http://www.spore.com/screenshots.php, part seas, \"smite unbelievers\":http://en.wikipedia.org/wiki/Kinetic_bombardment, \"instill mystical visions and control thoughts\":http://www.wired.com/wired/archive/7.11/persinger.html. At the extreme end of speculation, our world could be \"a simulation fed into the sensory nerves of brains in vats\":http://plato.stanford.edu/entries/realism-sem-challenge/, or \"our minds could be part of the simulation too\":http://www.simulation-argument.com/. (There has even been recent argument, which I do not buy into, \"that this is a likely scenario\":http://www.simulation-argument.com/simulation.html.)\n\nThe Gnostics, as Christians, of course believed in a true omnipotent/omniscient God above the demiurge. Though of course, further intermediate deities could be interposed â€” the Wikipedia article describes \"the introduction by emanation of further divine beings, which are nevertheless identifiable as aspects of the God from which they proceeded; the progressive emanations are often conceived metaphorically as a gradual and progressive distancing from the ultimate source, which brings about an instability in the fabric of the divine nature.\" This puts me in mind of an infinite regress toward the final infinite God â€” a \"turtles all the way _up_\":http://en.wikipedia.org/wiki/Turtles_all_the_way_down cosmology.\n\nIn the end, unlike the Gnostics, I don't see how there's any way we could tell whether this is true or not. There's nothing we can perceive as divine that couldn't, possibly, be produced by some advanced technology. And any such \"divinity\" could conceivably, in turn, be eclipsed by something more advanced. We have no way of knowing.\n\nBut the Gnostics _did_ believe that they had knowledge (_gnosis_) of the Word of the true infinite God. To me, this is their central mistake. Obviously, they had to believe they had a handle on the Truth, in order to be a religion. But most of their beliefs pointed to _the inability of humans to discern such truth_ or tell it apart from the simulations/lies of the demiurge. The only way around this would be to posit that humans have an inbuilt mystic sense that can accurately tell the truth about religious beliefs â€¦ but the simultaneous existence of innumerable contradictory religious beliefs disproves this.\n\nThe only conclusion, to my mind, is to admit that we don't know, and can't know, no matter how compelled we may be by evidence or enlightenment or persuasion or insight. That's agnosticism in a nutshell. Treat religious works, rituals, ideas as though they were stage plays or stage magic â€” draw from them delight, insight, compassion, wonder â€¦ even if you don't believe for a moment that the lady was _really_ cut in half and rejoined, the king _really_ fell on his sword, the flowers were _really_ transmuted into doves."
  post_title: "The Gnostic argument for agnosticism"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-gnostic-argument-for-agnosticism"
  to_ping: ""
  pinged: ""
  post_modified: "2007-12-10 13:26:52"
  post_modified_gmt: "2007-12-10 20:26:52"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/12/the-gnostic-argument-for-agnosticism/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 232
  post_author: 2
  post_date: "2007-12-20 14:21:04"
  post_date_gmt: "2007-12-20 21:21:04"
  post_content: "Santa has an early Xmas present for all you good Leopard programmers: \"GeekGameBoard\":http://developer.apple.com/samplecode/GeekGameBoard/index.html, a new piece of sample code by the anonymous engineer elves at Apple.\n\n[Update: GeekGameBoard is now an open-source project hosted at \"bitbucket.org\":http://bitbucket.org/snej/geekgameboard.]\n\nbq. GeekGameBoard is an example of using Core Animation to present the user interface of a board or card game. It implements a small framework for implementing such games, with domain-specific classes like \"Grid\" and \"Piece\", and examples of several game definitions built on top of the framework.\nSome of the generally-useful Core Animation techniques illustrated are:\nâ€¢ Hit testing\nâ€¢ Dragging CALayers with the mouse\nâ€¢ Loading images from files and setting them as layer contents\nâ€¢ 3D \"card-flip\" animations\n\nFramework classes include Bit, Piece, PlayingCard, HexGrid and more. It comes with sample games from Klondike solitaire to Checkers and even Tic-Tac-Toe. It's all ready for you to add AI, network play, new game definitions...\n\n<img src='http://mooseyard.com/Pictures/Klondike-20071220-130328.jpg' alt='Klondike'/>\n\n<img src='http://mooseyard.com/Pictures/Hexchequer-20071220-130652.jpg' alt='Hexchequer'/>\n\n<img src=\"http://interfacelift.com/icons-mac/previews/0330_gingkosicons.jpg\" align=\"right\" style=\"padding-left: 10px;\"/>\n\nPS: Icon websites like \"IconFactory\":http://iconfactory.com/freeware, \"InterfaceLift\":http://interfacelift.com/icons-mac/index.php?sort=date and \"DeviantArt\":http://browse.deviantart.com/customization/icons/dock/?order=9&startts=1198051200&endts=1198137600 are great places to get artwork for game pieces. (My personal favorite game pieces are \"Ginko's Icons\":http://interfacelift.com/icons-mac/details.php?id=330, shown on the right.) Just be aware that most icons, even if freeware, require you to get the copyright holder's permission for anything other than personal use."
  post_title: "GeekGameBoard"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "geekgameboard"
  to_ping: ""
  pinged: ""
  post_modified: "2007-12-20 14:21:04"
  post_modified_gmt: "2007-12-20 21:21:04"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2007/12/geekgameboard/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 233
  post_author: 2
  post_date: "2008-01-07 20:34:16"
  post_date_gmt: "2008-01-08 03:34:16"
  post_content: "A bit of cryptography humor, from Peter Gutmann's slideshow \"Everything you Never Wanted to Know about PKI but were Forced to Find Out\":http://www.cs.auckland.ac.nz/~pgut001/pubs/pkitutorial.pdf ...\n\n_(Warning: This won't make any sense unless you know what things like \"PKI\", \"self-signed certificates\" and \"revocation\" are)_\n\n<!--more-->\n\n*CRL Problems (ctd)*\nRevoking self-signed certificates is hairy\n\n* Cert revokes itself\n* Applications may:\nâ€“ Accept the CRL as valid and revoke the certificate\nâ€“ Reject the CRL as invalid since it was signed with a revoked certificate\nâ€“ Crash\n* Computer version of Epimenides paradox â€œAll Cretans are liarsâ€\nâ€“ Crashing is an appropriate response"
  post_title: "â€œCrashing is an appropriate responseâ€"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "crashing-is-an-appropriate-response"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:44:35"
  post_modified_gmt: "2009-10-19 16:44:35"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/01/crashing-is-an-appropriate-response/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 234
  post_author: 2
  post_date: "2008-01-09 19:51:45"
  post_date_gmt: "2008-01-10 02:51:45"
  post_content: "There's a fascinating post on \"DreamHost\":http://dreamhost.com's blog about \"how frustrated they are with trying to make Ruby On Rails work\":http://blog.dreamhost.com/2008/01/07/how-ruby-on-rails-could-be-much-better/ for their bread-and-butter market of shared web hosting. I've run into this intermittently ever since I first tried out Rails two years ago. It's fun to develop in, it works great on my local machine, but it's been impossible to get any Rails app to run correctly on my DreamHost-ed web site. I've been told by experts that you pretty much have to step up to an expensive virtual-server solution (although I just heard about \"HostingRails.com\":http://www.hostingrails.com/, which is quite cheap.)\n\nAs already pointed out in comments, this issue is not specific to Rails, or to Ruby. The same problems apply to any complex web-app (including Python and Java ones, and probably some of the larger PHP-based frameworks too) that has a large amount of set-up overhead. By running a separate app process you amortize the setup costs across large numbers of requests.\n\nThis is a more complex model than a simple CGI or mod_whatever, but itâ€™s a straighforward engineering problem and thereâ€™s no reason it shouldnâ€™t be workable in a shared environment, without having to make every user rent their own server. I really hope this gets fixed â€” I was surprised to hear that it isn't considered a big deal by the Rails dev community.\n\nh4. Updates:\n\n* Rails founder David \"DHH\" Hansson just posted his view on \"The Deal With Shared Hosts\":http://www.loudthinking.com/posts/21-the-deal-with-shared-hosts, which sounds pretty reasonable to me (as an explanation of why shared hosting hasn't been a priority for Rails, and an invitation for sites like DreamHost to help make it so.)\n* \"Peter Cooper points out\":http://www.rubyinside.com/no-true-mod_ruby-is-damaging-rubys-viability-on-the-web-693.html how this is hurting Rails adoption, and suggests fixing mod_ruby to work in a shared environment. (Also pointed out in the comments to my post.)"
  post_title: "Web Frameworks vs. Hosted Environments"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "web-frameworks-vs-hosted-environments"
  to_ping: ""
  pinged: ""
  post_modified: "2008-01-09 19:51:45"
  post_modified_gmt: "2008-01-10 02:51:45"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/01/web-frameworks-vs-hosted-environments/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 235
  post_author: 2
  post_date: "2008-01-10 08:55:22"
  post_date_gmt: "2008-01-10 15:55:22"
  post_content: "Here's a career update, for those of you who care: I've left Apple, and I'm now working on my own, from home, as an indie software developer. I have plans for at least two kick-ass Mac apps, I'll probably contribute to a few open source projects, and I may dabble in some web stuff.\n\n(At least, that's the plan for now! Everything is subject to change without prior notice. This document contains forward-looking statements. These statements involve risks and uncertainties, and actual results may differ.)\n\nThis is kind of a big change for me. I've been continuously employed for 19 years, 16 of those at Apple. I clearly like being part of a team, part of a company, and specifically part of Apple. But there comes a time when a man's gotta do what a man's gotta do.\n<!--more-->\nIn fact, I was noticing the other day that there's some...\n\nh3. Spooky Career-Related Stuff About Jens In Years Ending In \"7\"\n\n*1977:* The year I first spend significant quality time at a computer. (I learned BASIC the year before, but computers were hard to get to at the time, especially for a preteen kid!)\n*1987:* The year I graduated from college and became a Professional Software Engineer. (This started on a high point with a summer internship at Xerox PARC, then devolved into a year of struggling to find contracting work. Which at least gave me free time to learn Mac programming.)\n*1997:* The year I quit Apple after the project I'd been on [OpenDoc] was axed, and most of my team-mates laid off. (I came back, after a year in the wilderness of doomed startups and soon-to-be-beleaguered coffee-themed server vendors.)\n*2007:* Me telling you this.\n\n(The pattern breaks down if you extend back to 1967, when I did nothing unusual, except for being two and living in New Jersey. Check up with me in ten years to see what I do in 2017! I may be uploading my consciousness into an iBrain, or I may be assembling a Difference Engine out of twisted rebar in my weakly-radioactive cave.)\n\nh3. \"Why Did You Resign, Number 19832?\"\n\nWouldn't they love to know! They tried all the tricks -- even scheduled me for an \"exit interview\" with an \"HR director\". I sang like a canary. Sorry, I'm no \"Patrick McGoohan\":http://en.wikipedia.org/wiki/The_Prisoner. (It's a shame; Portmeiron looks like a lovely community.)\n\nReally, it comes down to the clichÃ© of...\n\nh3. \"Creative Differences\"\n\nApple's a very focused company, and that's a strategy that's worked well for the past ten years. I admire that, and I'm happy to be in a world where I don't have to feel like a freak anymore for using a Mac in public. And overall, Apple's core goals of elegant user interfaces and beautiful design are ones I am glad to contribute to.\n\nBut I'm _fascinated_ with social software. Apple isn't. Despite some promising starts, the most I've been able to get accomplished in that vein at Apple was iChat [the IM part; I'm really not interested in videoconferencing], Safari RSS, and the \"PubSub\" [which turned out to be \"RSS and Atom\"] framework. There were some very promising prototypes of sexier things, but I _really_ can't talk about those, other than to say that they were canceled.\n\nI looked around after Leopard was finished, and didn't see any place in the company where I could pursue my ideas. It would have meant evangelizing reluctant executives into sharing my vision ... and that's something that I know I have little talent at. My strategy is more of \"build a sexy demo app and they will come around\"; that and my awesome co-worker Jess's salesmanship got the above-mentioned prototype projects off the ground, but it wasn't enough to get them through the product feature review process, sadly.\n\nThere were some lesser issues, too...\n\nh4. Ideas\n\nI tend to have a lot of ideas. I'm not bragging, and that's not always a good trait; it can be hard for me to focus on something long enough to finish it. A structured job has helped me stay on-task. On the other hand, though, the development cycle in a big company is such that every significant idea takes a year or more to finish, and during that time, more ideas pile up in my brain.\n\nThat wouldn't be bad if there were some other channels to express those ideas. And if they took the form of songs, or novels, or scrimshaw carvings of Biblical scenes on walrus tusks, I could do whatever I wanted with them. But on software, Apple's position (not unusually for the industry) is \"All Your Idea Are Belong To Us\", and I signed onto that when I accepted the job offer. In other words, anything I do that relates in any way to Apple's areas of business, no matter when or where I do it, belongs to Apple. [Edit: Ha! Note I'm still using present tense.]\n\n(Again, this isn't something particular about Apple. Most tech companies are like this, and if you work for one, you probably signed a very similar \"Proprietary Rights Agreement\" that they hid in the stack of paperwork beneath your offer letter. And yes, \"companies will enforce that\":http://mooseyard.com/Jens/1997/04/they-made-me-an-offer-i-couldnt-refuse/ if they see profit in it.)\n\nh4. Individuality\n\nFinally â€” and this may seem petty â€” Apple's lack of individuality bugs me. I don't mean internally: within the company, communication is reasonably open (modulo confidentiality issues) and there's lots of room for self-expression. But ever since the return of Steve Jobs, the company has been pretty maniacal about micro-managing its _visible face_, to make it as smooth and featureless as an iPod's backside. (In my darker moments I've compared it to the brutal whiteness of \"THX-1138\".)\n\nIt's deeply ironic: For a company that famously celebrates individuality and Thinking Different, Apple has in the past decade kept its image remarkably impersonal. Other than the trinity who go onstage at press events â€” Steve Jobs, Jonathan Ive, Phil Schiller â€” how many people can you name who work for Apple? How many _engineers_?\n\n[And no, \"Woz\" is not a correct answer. Woz has not contributed to Apple since the mid '80s. He's a great guy, but the fact that people still associate him with Apple is, I think, a symptom of the company's scarcity of public faces.]\n\nIt wasn't always this way. Apple was very open in the beginning, and treated the members of the original Mac team like rock stars, complete with \"photo layouts in _Rolling Stone_\":http://www.folklore.org/ProjectView.py?project=Macintosh&index=3&sortOrder=Sort%20by%20Date&detail=medium&gallery=1. Their signatures were engraved in the inside of the computer's case. (\"Andy Herzfeld wrote a good article about this\":http://www.folklore.org/StoryView.py?project=Macintosh&story=Credit_Where_Due.txt&topic=The%20Launch&sortOrder=Sort%20by%20Date&detail=medium.) Even in my early years there, applications' \"about boxes\" proudly listed the names of the people who worked on them. The OS itself had semi-secret easter eggs that listed everyone's name. The developer Tech Notes were bylined with the names of the individual engineers who wrote them. (Don't scoff: the tech notes were great stuff, quirky and funny and individual. As a young Mac developer, just reading them gave me a great feeling about the company and made me want to work there.)\n\nNowadays, unless you're a vice president, the only time Apple consents to show your name is if you give a talk at the Worldwide Developers' Conference, a rather pricey annual event. Which is nice, but relatively few engineers do this (it's a ton of work to prepare for) and it's definitely not public (all but Steve's keynote is under NDA.)\n\nIt's not that I'm poutily demanding that I get my portrait taken by Annie Leibowitz, just like Andy Herzfeld and Bill Atkinson. But when I (and those I work with) slave over a project for a year, and shape it with our creative energies, I think we should be able to put our damn _names_ on it somewhere (unobtrusively, in 8pt Lucida).\n\nAnd then there are blogs. Apple doesn't like them, not when they talk about it. (Big surprise.) I've heard it said that there are hardly any bloggers working at Apple; there are actually a lot more than you'd think, but they mostly keep it a secret. (I could out a few people, including at least one director...) I think Apple's policy on blogging is one of the least enlightened of major tech companies; Microsoft in particular is surprisingly open.\n\nI believe in being individual, and open. It always got on my nerves that there were so many things I couldn't write about (not confidential information, of course, just public stuff) without the very real chance of waking up to a testy email the next day.\n\nh3. Gulp.\n\nAnd speaking of which, I now find myself at the end of this unexpectedly-long post, rather afraid of pressing the Publish button. I have been long-conditioned to avoid saying anything like the above in public. Even now, I may very well want to work at Apple again someday (dammit, I still love the place, despite my gripes), and I don't want to burn any bridges.\n\nRealistically, I need to consider that if I did want to go back, the skills I have to offer should take precedence over any fur I've rubbed the wrong way with posts like this. But I still worry about how They will react. And it's that sort of thinking that really shows me that, yes, I need some time on my own.\n\nSo wish me luck. I'll be in touch."
  post_title: "Gone Indie"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "gone-indie"
  to_ping: ""
  pinged: ""
  post_modified: "2008-01-10 08:55:22"
  post_modified_gmt: "2008-01-10 15:55:22"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/01/gone-indie/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 100
-
  ID: 236
  post_author: 2
  post_date: "2008-01-24 20:33:43"
  post_date_gmt: "2008-01-25 03:33:43"
  post_content: "I've been on my own for three weeks now, and I'm definitely enjoying it. I know that one of the general issues with self-employment is whether one can stay motivated without the external structure imposed by The Man. Fortunately I seem to have no problem with this â€” I've been coding at top speed. Mostly I work in the detached office, which is now clean and cozy, but sometimes I hang out on the couch in the living room. I have some Things running ... they don't look like much yet, but that's because they're infrastructure. This stuff ends up being harder than it seems it ought to, but I remind myself that if it weren't hard, it wouldn't be worth doing. And also: if it's hard for me, it's also probably hard for anyone else to do, which means less competition. ;-)\n\nI'd like to thank everyone for their encouraging & thoughtful comments on my \"Gone Indie\" post. So: \"Thanks!\". I just now turned off further comments on that post, because it's been up a few weeks and the page is getting rather long.\n\nI plan to write a few posts about what I'm working on, at a high level. I just don't feel quite ready yet, mostly because right now my mind is more on how to make things work than on how to explain them. But the explaining is important too.\n\nFor now I'll just teasingly post a cryptic list of things I've been working with:\n\nBEEP, Bonjour, CDSA, CMS, FSEvents, Keychain, Mercurial, \"Mnemonic encoding\":http://www.tothink.com/mnemonic/, NAT Port Mapping, NSCollectionView, SSL/TLS, X.509, Vortex."
  post_title: "3 Weeks"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "3-weeks"
  to_ping: ""
  pinged: ""
  post_modified: "2008-01-24 20:33:43"
  post_modified_gmt: "2008-01-25 03:33:43"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/01/3-weeks/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 13
-
  ID: 237
  post_author: 2
  post_date: "2008-01-24 23:22:07"
  post_date_gmt: "2008-01-25 06:22:07"
  post_content: "I used to think it was the Big Time if I got a link from \"Daring Fireball\":http://daringfireball.net, but now someone just pointed out to me that the Fake Steve Jobs has \"taken note of my post\":http://fakesteve.blogspot.com/2008/01/if-youre-going-to-leave-leave-but-dont.html.\n\nSo ... what does it mean for my post to be criticized by a fictional construct that embodies a parody of the CEO of the very same ex-employer my post criticizes? Especially when, more specifically, that fictional construct's humor is largely based on an exaggerated _inversion_ of Apple's carefully-groomed non-blogging public image, and he calls out a quote of mine that decries exactly the situation that his (fictional) presence repudiates?\n\nSomeone call the Semiotic Crisis Hotline for me! This situation calls for the skills of a \"Jean Baudrillard\":http://plato.stanford.edu/entries/baudrillard/#4 â€” too many levels of irony for me to parse, man."
  post_title: "FakeSteved!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "fakesteved"
  to_ping: ""
  pinged: ""
  post_modified: "2008-01-24 23:22:07"
  post_modified_gmt: "2008-01-25 06:22:07"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/01/fakesteved/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 238
  post_author: 2
  post_date: "2008-01-27 11:12:52"
  post_date_gmt: "2008-01-27 18:12:52"
  post_content: "h3. Dear Lazyweb,\n\nThe project I'm working on will be using cryptographic certificates in a distributed web-of-trust model a little like that of PGP. It will also use certs as more than just proofs of identity. Given that I'll be writing a lot of code using certs, I want to avoid \"the nastiness of X.509\":http://www.cs.auckland.ac.nz/~pgut001/pubs/pkitutorial.pdf whenever possible.\n\nAfter thinking about this a while, it seems to me that \"RDF\":http://www.w3.org/2000/10/swap/Primer.html ought to be a good way to represent certs, since it describes arbitrary types of relationships between entities (e.g. \"FOAF\":http://foaf-project.org), and allows them to be composed in complex ways. And there are a lot of tools available for \"parsing/storing/querying RDF\":http://librdf.org/.\n\nUnfortunately, I know very little about RDF so far, or about the uses to which it's being put. I've been looking, but I haven't found any existing schema yet for using RDF for cryptographic certificates. Does anyone know of such a thing, or something related?\n\n(The closest thing I know of is SDSI, a \"Simple Distributed Security Architecture\":http://people.csail.mit.edu/rivest/sdsi11.html, which was inspirational to me in showing how one can use general-purpose data structures like S-expressions to describe certs and form a web of trust. But SDSI and its successor \"SPKI\":http://world.std.com/~cme/html/spki.html seem to be dead, sadly, and nothing comparable has replaced them.)\n\n*Thanks,*\n\n--Jens\n\nh3. Update, 30 January:\n\nNo answer being forthcoming, and given the learning curve of RDF, I'm now pursuing the approach of representing certs in \"YAML\":http://yaml.org. I also considered \"JSON\":http://json.org, but YAML is essentially a superset of JSON that has some very useful features like tagging and aliasing."
  post_title: "Dear Lazyweb: Certificates in RDF?"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "dear-lazyweb-certificates-in-rdf"
  to_ping: ""
  pinged: ""
  post_modified: "2008-01-27 11:12:52"
  post_modified_gmt: "2008-01-27 18:12:52"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/01/dear-lazyweb-certificates-in-rdf/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 239
  post_author: 2
  post_date: "2008-01-30 11:01:48"
  post_date_gmt: "2008-01-30 18:01:48"
  post_content: "Famous Hacker Paul Graham \"on his new LISP dialect, Arc\":http://paulgraham.com/arc0.html:\n\nbq. \"Arc only supports Ascii. MzScheme, which the current version of Arc compiles to, has some more advanced plan for dealing with characters. But it would probably have taken me a couple days to figure out how to interact with it, and I don't want to spend even one day dealing with character sets. Character sets are a black hole. I realize that supporting only Ascii is uninternational to a point that's almost offensive [...] _But the kind of people who would be offended by that wouldn't like Arc anyway._\"\n\nThat last bit [emphasis mine] sort of flummoxed me. Is he saying that LISP only appeals to native English speakers?[1] Or that no one in their right mind would use LISP to write software for end-users?[2] Or maybe that internationalization is just some sort of abstract feel-good political-correctness issue, since none of those third-worlders even have computers anyway?[3]\n\nHe makes similarly eye-opening assertions about HTML, too. Arc has HTML-generating libraries, but they \"just do everything with tables\" instead of CSS. Why? Because apparently CSS-based Web designs are _less agile_ than ones made out of tables. Somehow I don't think most people who've done web design both ways would agree -- those old-school layouts made with infinitely-nested tables were about as agile as a house of cards.\n\nAnyway. Normally I'm a big slut for new programming languages, but it would probably take me a couple days to figure out Arc, and I don't want to spend even one day on Yet Another LISP Variant that won't even let me write code I could use in the real world.\n<hr /><p>Wait -- let me not end on such a snarky note. Since I'm such a big smarty, what would I have done differently? I would simply have made the language's \"character\" data type 16 bits wide instead of 8, and provided four trivial library routines to convert such strings to and from UTF-8 and CP-1252 encodings for I/O purposes. That's about an hour's work, and all you need for really basic Unicode support; once you have that, you can add further Unicode niceties (and there are admittedly a zillion of 'em) a few at a time without completely breaking old code.</p>\n<hr /><p>[1] And only those native English speakers who don't care about foo-foo details like â€œcurly quotesâ€ -- or emdashes -- or other Arcane Symbolsâ„¢. Remember, to the true old-school hacker, even lowercase letters are an inessential frill.\n\n[2] Like, say, \"Reddit.com\":http://reddit.com. From SecretGeek's awesome \"overview of LISP\":http://www.secretgeek.net/lisp_truth.asp:\n\nbq. \"Reddit is proof that lisp is really powerful. Paul Graham originally wrote reddit, in lisp, on the back of a napkin while he was waiting for a coffee. it was so powerful that it had to be rewritten in python just so that ordinary computers could understand it. Because it was written in lisp it was almost no effort to rewrite the entire thing, and the rewrite was completed in-between two processor cycles.\"\n\n[3] I'm reminded of a meeting between Apple and Sun (JavaSoft) back in 1996. I was there to discuss OpenDoc and JavaBeans, but each company also had text and I18N engineers there, who were talking about Unicode and text-layout technology for the upcoming Java2D graphics engine. There was an exchange that went something like this:\n\nApple engineer: ...and the layout needs to take into account ligatures and contextual forms, where adjacent letters change glyphs depending on neighboring characters, or even merge into a single glyph.\n\nSun engineer: C'mon, is this important? How many people need advanced typographic features like that, anyway?\n\nApple engineer: _[after a pause]_ Well, there are over 900 million of them in \"India\":http://en.wikipedia.org/wiki/Devanagari#Ligatures alone, and another 200 million or so in the \"Arabic world\":http://en.wikipedia.org/wiki/Arabic_alphabet#Modified_letters.</p>"
  post_title: "96 Characters Ought To Be Enough For Anyone"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "96-characters-ought-to-be-enough-for-anyone"
  to_ping: ""
  pinged: ""
  post_modified: "2008-01-30 11:01:48"
  post_modified_gmt: "2008-01-30 18:01:48"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/01/96-characters-ought-to-be-enough-for-anyone/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 19
-
  ID: 240
  post_author: 2
  post_date: "2008-02-06 10:54:35"
  post_date_gmt: "2008-02-06 17:54:35"
  post_content: "You can't avoid asynchrony when writing network code, since operations can take an arbitrary amount of time, and often do. To keep the app responsive it has to be able to get other things done while a slow operation is in progress.\n\nMy first exposure to network programming was in Java, whose approach to asynchrony is to use threads. Lots of 'em. The API calls are [almost] all blocking, so you run them on background threads. This is good because it makes the way the API works more intuitive: you call a method, and it returns a value when it finishes. This makes your own code more intuitive, as it just performs the operations in order, like: open connection, send request, read response, parse response, close connection, return.\n\nThe downside is that making heavily threaded code work correctly can be very hard, and the problems are subtle, hard to understand and debug, and sometimes almost impossible to reproduce. Edward Lee's paper \"The Trouble With Threads\":http://www.artist-embedded.org/artist/The-Trouble-With-Threads.html describes a complex Java server that was excruciatingly well-designed, code-reviewed and tested.\n\nbq. \"No problems were observed until the code deadlocked in April 2004, four years later. Our relatively rigorous software engineering practice had identiï¬ed and ï¬xed many concurrency bugs. But that a problem as serious as a deadlock could go undetected for four years despite this practice is alarming.\"\n\nMy teammates and I had similar experiences while implementing the Java AWT libraries on Mac OS 9 and 10.0. We kept running into weird concurrency bugs, fixing them (which often meant restructuring code and making it more complex), and then running into more. By the time we were done, threading didn't seem like such a good idea anymore.\n\nCocoa (and the underlying CFNetwork framework) instead make the asynchrony explicit, by using an event- and callback-based model. When you invoke a network operation, the call returns immediately; but you set up a delegate object or callback function that will later be invoked when the operation completes. A fancy event loop called a \"runloop\" at the top level takes care of dispatching events in order. For the most part, you can write your code using only a single thread and still let your app perform tasks in parallel without blocking the UI.\n\nThe drawback is that your code gets more complex, since the high-level control flow no longer matches the semantics of the programming language. A multi-step operation now involves a separate function to implement each step, and any state has to be stored externally in instance variables. Explicit state machines often pop up. There's a lot of boilerplate for setting delegates, adding and removing observers, parsing notification dictionaries, and so forth, which obscures the actual logic of the code.\n\nAs you can guess, I'm knee-deep in this sort of thing right now. Just like many times before, I'm wishing there were a third way. I'd like to be able to keep each operation's flow of control simple, as with threads, but at the same time limit the interactions between operations to keep the _overall_ flow of control from turning into race-condition spaghetti.\n\nOh, and I want to keep writing in Objective-C. There are intriguing multiprocessing techniques in some higher-level languages, like \"Lua\":http://lua.org's coroutines and \"Io\":http://iolanguage.com's actors, but I don't think I'm ready to start writing the core of my app in one of them. I wonder if there's a way to implement some of those techniques cleanly in Objective-C.\n\nI'm not offering any solutions, just describing the problem I see. Maybe I'll get one of those great \"What, you're not using XYZ? It does exactly what you want\" comments! Or maybe not. Anyway, here are some things I've run across that offer useful techniques:\n\n* \"Higher-Order Messaging\":http://www.dpompa.com/HigherOrderMessaging framework -- adds some higher-level functional primitives for Cocoa programming, that makes delegation and callbacks simpler to use. ( *Update 3PM:* Appears to be incompatible with 10.5. It compiles, with warnings, but the self-tests quickly fail, with exceptions raised by NSInvocation. Dang!)\n\n* \"libcoroutine\":http://www.dekorte.com/projects/opensource/libcoroutine/, a cross-platform implementation of \"coroutines\":http://en.wikipedia.org/wiki/Coroutine (similar to \"cooperative threads\":http://en.wikipedia.org/wiki/Cooperative_multitasking) in C. (There are several of these; this is a newish one by Steve Dekorte which, unlike others I've tried, works correctly on Mac OS X.)\n\n* Actors, as found in the \"Io language\":http://www.iolanguage.com/scm/git/checkout/Io/docs/IoGuide.html#Concurrency-Actors and others. An actor is basically an object that runs a private event loop and thread: you communicate with it by sending it messages. This helps encapsulate state, since the object itself is only doing one thing at a time, and its internal state is hidden from other threads.\n\n* *Update:* I forgot to list NSOperation and NSOperationQueue, new classes in OS X 10.5. These aren't \"magic\" in the way the above are, they're just a little framework for managing simultaneous tasks, but they're useful. I'm just getting started with NSOperation: it's what I'm using for now to manage the nasty asynchronous bits.\n\nGot any more useful links or ideas? Post them, and I'll add 'em here."
  post_title: "Network Barbie Says &#8220;Asynchrony Is Hard!&#8221;"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "network-barbie-says-asynchrony-is-hard"
  to_ping: ""
  pinged: ""
  post_modified: "2008-02-06 10:54:35"
  post_modified_gmt: "2008-02-06 17:54:35"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/02/network-barbie-says-asynchrony-is-hard/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 241
  post_author: 2
  post_date: "2008-02-06 22:38:35"
  post_date_gmt: "2008-02-07 05:38:35"
  post_content: "I just ran across \"Invisible Games\":http://invisiblegames.net/, a website of short and enigmatic fictions. One of them, \"The Loneliness Engine\":http://invisiblegames.net/archives/the-loneliness-engine/, reminds me of my own short-n-enigmatic \"We [Had Black Boxes]\":http://mooseyard.com/Jens/2003/10/we-had-black-boxes/. No spooky synchronicity or anything, but they seem to belong together somehow ... which itself fits in with the themes of both stories. Neat."
  post_title: "Black Button, Black Box"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "black-button-black-box"
  to_ping: ""
  pinged: ""
  post_modified: "2008-02-06 22:38:35"
  post_modified_gmt: "2008-02-07 05:38:35"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/02/black-button-black-box/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 242
  post_author: 2
  post_date: "2008-02-09 21:23:19"
  post_date_gmt: "2008-02-10 04:23:19"
  post_content: "Distributed version-control systems have fascinated me for while. Unlike CVS and Subversion and the like, they don't rely on a central server; instead, any user of the software can host a copy of the repository, and change-sets are pushed between repositories in a peer-to-peer fashion. These are a lot more powerful and flexible -- the centralized CVS model is merely one special case of the configurations that a distributed system can use. And the issues of trust, synchronization and branching that they deal with are very similar to those that appear in peer-to-peer networks.\n\nI've tried out several of these, including \"Monotone\":http://monotone.ca/ and \"Bazaar\":http://bazaar-vcs.org/, but lately I've settled on \"*Mercurial*\":http://selenic.com/mercurial. I find it the simplest to understand and use, and being written in Python it's extremely portable.\n\nMercurial's having a contest to design a new logo. I hadn't been paying attention, but today I was reminded of Mercury's symbolic connection to \"alchemy and the occult\":http://en.wikipedia.org/wiki/Hermetica, and decided to design something incorporating \"John Dee's\":http://en.wikipedia.org/wiki/John_Dee _Monas Hieroglyphica_, a symbol he designed based on the astrological symbol for Mercury. (I'm not an expert on Dee or on the occult, but I am a fan of John Crowley, who used both John Dee and his symbol in his \"_Ã†gypt_ series\":http://www.latimes.com/features/books/la-bkw-park7oct07,1,7334437.story?coll=la-books-utilities&ctrack=1&cset=true of novels.)\n\nh2. The logos\n\n!http://mooseyard.com/Pictures/Mercurial%2520Logo/Square/Mercurial%2520square%2520logo.png! !http://mooseyard.com/Pictures/Mercurial%20Logo/Icon/Mercurial%20icon.png!\n\n!http://mooseyard.com/Pictures/Mercurial%20Logo/Inline/Mercurial%20inline%20logo.png!\n\nh2. Fine print\n\n* PDF, EPS, and higher-resolution PNG renderings are \"available here\":http://mooseyard.com/Pictures/Mercurial%20Logo/\n* The type is set in \"Yanone Kaffeesatz\":http://www.yanone.de/typedesign/kaffeesatz/, a Creative-Commons licensed font.\n* I vectorized the glyph from a bitmap drawing that appears \"on Wikipedia\":http://en.wikipedia.org/wiki/Image:DeeHieroglyph.gif, placed in the public domain by the artist."
  post_title: "Make Mine Mercurial"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "make-mine-mercurial"
  to_ping: ""
  pinged: ""
  post_modified: "2008-02-09 21:23:19"
  post_modified_gmt: "2008-02-10 04:23:19"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/02/make-mine-mercurial/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 243
  post_author: 2
  post_date: "2008-02-19 00:10:14"
  post_date_gmt: "2008-02-19 07:10:14"
  post_content: "I've been thinking about writing an essay about the beauty & weirdness of \"cryptographic hash functions\":http://en.wikipedia.org/wiki/Cryptographic_hash_function. The way any digitized data, however huge, can be named by a short fixed-size binary string. The way there are in theory an infinite number of hash collisions, but in practice zero. I was talking to myself about it, this morning, and two quotes appeared, which I write down here to remember:\n\n\"Hashing is my favorite computer-science concept.\"\n\nand\n\n\"\"SHA\":http://en.wikipedia.org/wiki/SHA_hash_functions is the Dewey Decimal code of \"Borges's Universal Library\":http://en.wikipedia.org/wiki/The_Library_of_Babel.\"\n\n(except that there's a fallacy in the second statement, which I leave as an exercise for the reader.)"
  post_title: "hash musings"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "hash-musings"
  to_ping: ""
  pinged: ""
  post_modified: "2008-02-19 00:10:14"
  post_modified_gmt: "2008-02-19 07:10:14"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/02/hash-musings/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 244
  post_author: 2
  post_date: "2008-02-24 10:44:22"
  post_date_gmt: "2008-02-24 17:44:22"
  post_content: "I've just finished a new mix CD. As the name \"Shiver 2\" implies, it's a sort-of sequel to my 2003 mix \"Shiver\":/recordings/mub24, with more plucked guitars, tremolo, and glitchy electronics ... but where the first was a summer mix, this is music for winter, when no matter how many logs crackle on the fire, rain and wind wait patiently outside.\n\n(And once again, the beautiful cover is by my daughter Naomi.)\n\n\"*Official web page*\":/recordings/mub51/\n\n*Download:* \"Shiver2.mp3\":/recordings/mub51/Shiver2.mp3 (91MB)\n\n*Preview:* [audio:http://mooseyard.com/recordings/mub51/Shiver2.mp3]\n\n<img src=\"http://mooseyard.com/recordings/mub51/Cover.jpg\" width=466 height=466/>\n<img src=\"http://mooseyard.com/recordings/mub51/Back%20cover.jpg\" width=466 height=466/>"
  post_title: "Shiver 2 - A new mix CD"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "shiver-2-a-new-mix-cd"
  to_ping: ""
  pinged: ""
  post_modified: "2008-02-24 10:44:22"
  post_modified_gmt: "2008-02-24 17:44:22"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/02/shiver-2-a-new-mix-cd/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 245
  post_author: 2
  post_date: "2008-02-26 09:10:46"
  post_date_gmt: "2008-02-26 16:10:46"
  post_content: "bq. <tt>CUPERTINO, California--February 26, 2008--AppleÂ® today announced that iTunesÂ® (www.itunes.com) is now the number two music retailer in the US, behind only Wal-Mart, based on the latest data from the NPD Group*. Apple also announced that there are now over 50 million iTunes Store customers. iTunes has sold over four billion songs, </tt>â€¦\n\nI really hope they thought ahead and used a 64-bit int for the <tt>number_of_songs_sold</tt> variable, otherwise some Bad Stuff might happen in the next few months.\n\n(We already know they used an <i>unsigned</i> int, otherwise there would have been a crazy press release a few years ago like \"Apple announces iTunes has sold over -2,147,483,648 songs\".)"
  post_title: "Over 2^32 Sold! (Nearly)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "over-232-sold-nearly"
  to_ping: ""
  pinged: ""
  post_modified: "2008-02-26 09:10:46"
  post_modified_gmt: "2008-02-26 16:10:46"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/02/over-232-sold-nearly/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 246
  post_author: 2
  post_date: "2008-03-01 12:43:38"
  post_date_gmt: "2008-03-01 19:43:38"
  post_content: "\"MacRuby\":http://trac.macosforge.org/projects/ruby/wiki/MacRuby \"is a version of Ruby that runs on top of Objective-C. More precisely, MacRuby is currently a port of the Ruby 1.9 implementation for the Objective-C runtime and garbage collector. The rationale behind this effort is to solve in a very efficient way all the bridging problems RubyCocoa, the Ruby bridge to the Objective-C runtime, has to work around.\" (It's still in development, and not ready for prime-time use yet.)\n\nThis is exciting news. Now, Mac OS X already has excellent Ruby support, with <a href=\"http://developer.apple.com/tools/developonrailsleopard.html\">a complete Ruby 1.8 and Rails stack</a> (including extras like Mongrel and Capistrano) included in the box. There's also a glue library called RubyCocoa that bridges between the Ruby and Objective-C languages, making it easy to write all or part of a Cocoa app in Ruby (or to call useful Obj-C frameworks from a Ruby app.)\n\nSo why MacRuby? The big deal is _performance_. By re-implementing the Ruby object model on top of the Objective-C runtime â€” so all Ruby objects are bona fide Objective-C objects and vice versa â€” it will eliminate \"serious amounts of overhead\":http://trac.macosforge.org/projects/ruby/wiki/WhyMacRuby:\n\n* Parameter marshalling whenever a Ruby method has to call into Objective-C or vice versa\n* Bookkeeping data structures that map between Ruby and Objective-C objects and classes\n* Incompatible threading models\n* Multiple garbage collectors\n\nIt also takes advantage of the major speed boost of the new bytecode interpreter in Ruby 1.9.\n\nFrom my experiences working on Apple's Java runtime, I know that bridging to and from native code is a major performance issue. The amount of overhead for a single inter-language call may not seem like much (a few microseconds), but it's one of those \"death by a thousand cuts\" effects, because in an application that uses native libraries it happens so often.\n\n(For example, one of the ways I was able to speed up AWT graphics performance by about 5x in MRJ 2.1 was to pipeline the calls, so instead of each java.awt.Graphics method calling directly into the native QuickDraw API, it just appended the parameters to a display-list array, which periodically got flushed through a single call to a native C++ method that walked the list and made all the QuickDraw calls. I didn't initially believe this would be a big win, but Steve Zellers wrote a prototype version that proved it.)\n\nAnother nice feature of MacRuby is that it slightly extends Ruby's method-call syntax to allow Objective-C style interleaved keywords and arguments. So when calling an Objective-C -setFirstName:lastName: method, instead of writing\n<pre>    person.setFirstName_lastName(first,last)</pre>\nyou write\n<pre>    person.setFirstName first, lastName: last</pre>\nor alternatively\n<pre>    person.setFirstName first, :lastName => last</pre>\nThis may offend Ruby purists, and it's really just syntactic sugar, but by eliminating _conceptual_ bridging overhead, I think it'll improve _programmer_ performance, which is also an important optimization.\n\nFinally, another good thing that I didn't realize right away is that it's an official Apple open-source project. So not only does that make it very likely that a finished version of MacRuby will be built into 10.6; it also means that, if it's necessary to tweak the Objective-C runtime to make MacRuby work better, that's likely to happen too. The people working on runtimes and scripting languages at Apple are _really smart_, and I'm glad to see they're not resting on their laurels after all they achieved in 10.5."
  post_title: "MacRuby"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "macruby"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-01 12:43:38"
  post_modified_gmt: "2008-03-01 19:43:38"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/macruby/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 247
  post_author: 2
  post_date: "2008-03-02 12:13:20"
  post_date_gmt: "2008-03-02 19:13:20"
  post_content: "The last paragraph of the poem \"Systems\" by \"Kristy Bowen\":http://www.kristybowen.net/:\n\nbq. \"... I try to write a poem I wouldnâ€™t want to sleep with. Would kick to the curb, wrap my thumbs around her slender neck and snap. This oneâ€™s still babied, blinking, wondering if it wants to be a skirt or a tire iron. Licking the perimeter of opened envelopes for a tiny bit of sweet. My nouns go awry every time I stop paying attention. Fall pretty like dimes on the sidewalk. My friend Melissa, whose name means bee-like, has a theory about systems. For every change in variable, the outcome shifts toward constant decay.\"\nâ€”From \"<cite>Brief History Of Girl As Match</cite>\":http://www.dusie.org/briefhistoryofgirlasmatch.pdf"
  post_title: "Systems"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "systems"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-02 12:13:20"
  post_modified_gmt: "2008-03-02 19:13:20"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/systems/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 248
  post_author: 2
  post_date: "2008-03-06 12:32:23"
  post_date_gmt: "2008-03-06 19:32:23"
  post_content: "This is what happens when Steve Jobs announces that an iPhone SDK will be available for download within the hour:\n<!--more-->\n\n\n<img src=\"http://mooseyard.com/Pictures/ADCOverload-20080306-112856.jpg\" alt=\"ADCOverload\"/>\n\nIf I can just hit \"Reload\" faster, maybe I'll be able to get in..."
  post_title: "Apple slashdots itself"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "apple-slashdots-itself"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-06 12:32:23"
  post_modified_gmt: "2008-03-06 19:32:23"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/apple-slashdots-itself/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 249
  post_author: 2
  post_date: "2008-03-07 13:33:31"
  post_date_gmt: "2008-03-07 20:33:31"
  post_content: "To encourage development, I've started an open source project based on the *GeekGameBoard* game-development sample code that Apple published last December (which, by a strange coincidence, I wrote.) <strike>I hope to have it ready for iPhone game development soon.</strike> It runs on iPhones, too!\n\nYou can browse or download the source code over at \"bitbucket.org\":http://bitbucket.org/snej/geekgameboard. It's BSD-licensed, and your contributions are of course welcome.\n\nThe changes since \"Apple's original sample-code release\":http://developer.apple.com/samplecode/GeekGameBoard/index.html are:\n\n* It no longer requires garbage collection. I love GC, but it's not supported on the iPhone, where I am _definitely_ planning to use GGB.\n* I fixed some memory leaks of CoreGraphics objects.\n* I fixed an assertion-failure when kinging a checker.\n\nh2. What Is GeekGameBoard?\n\nGeekGameBoard is a small Objective-C framework for implementing the user interface of a board or card game. Many games can be implemented in less than 150 lines of code.\n\nIt also demonstrates generally-useful Core Animation techniques like:\n* Hit testing\n* Dragging CALayers with the mouse\n* Loading images from files and setting them as layer contents\n* 3D \"card-flip\" animations\n\nFramework classes include Bit, Piece, PlayingCard, HexGrid and more. It comes with sample games from Klondike solitaire to Checkers and even Tic-Tac-Toe. It's all ready for you to add AI, network play, new game definitions...\n\nGeekGameBoard runs on Mac OS X 10.5 or later. iPhone support is coming soon.\n\n<!--more-->\n\n<img src='http://mooseyard.com/Pictures/Klondike-20071220-130328.jpg' alt='Klondike'/>\n\n<img src='http://mooseyard.com/Pictures/Hexchequer-20071220-130652.jpg' alt='Hexchequer'/>\n\nh2. Pssst! Game Pieces!\n\n<img src=\"http://interfacelift.com/icons-mac/previews/0330_gingkosicons.jpg\" align=\"right\" style=\"padding-left: 10px;\"/>Icon websites like \"IconFactory\":http://iconfactory.com/freeware, \"InterfaceLift\":http://interfacelift.com/icons-mac/index.php?sort=date and \"DeviantArt\":http://browse.deviantart.com/customization/icons/dock/?order=9&startts=1198051200&endts=1198137600 are great places to get artwork for game pieces. (My personal favorite game pieces are \"Ginko's Icons\":http://interfacelift.com/icons-mac/details.php?id=330, shown on the right.) Just be aware that most icons, even if freeware, require you to get the copyright holder's permission for anything other than personal use."
  post_title: "GeekGameBoard &#8212; Getting closer to iPhone-ready"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "geekgameboard-getting-closer-to-iphone-ready"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-07 13:33:31"
  post_modified_gmt: "2008-03-07 20:33:31"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/geekgameboard-getting-closer-to-iphone-ready/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 24
-
  ID: 250
  post_author: 2
  post_date: "2008-03-07 16:11:34"
  post_date_gmt: "2008-03-07 23:11:34"
  post_content: "After digesting yesterday's iPhone announcements [with fava beans and a nice Chianti] I started thinking about the pricing models made possible by the \"Application Store\". In particular,\n\nh2. How cheap can an iPhone app be?\n\nI think the answer's clear. The Application Store will obviously be based on the iTunes store, whose bread-and-butter is a product, the AAC audio file, that sells for â€¦ 99Â¢. Apple's clearly able to make a profit at that price point, despite credit-card processing fees, bandwidth costs, and comparable payments _[Updated. Thanks, Dru!]_ to the record labels. So I see no reason they wouldn't allow a developer to price an application that low.\n\nBut why would a developer _want_ to sell an application for a net 70Â¢?\n\nh2. Micropayments\n\nBecause at such a low price, with a one-click store a couple of taps away, it becomes an impulse purchase. It's a form of \"micropayment\":http://en.wikipedia.org/wiki/Micropayment, an idea that's been talked about for years but hasn't widely taken off due to the practical difficulties of collecting very small payments. The few areas where micropayments (albeit larger than the canonical 1/10Â¢ originally proposed) have worked include the iTunes store, and the downloadable-game stores for the Xbox and Wii.\n\nAnd let's not forget the most amazing example of what people will pay for if you make it convenient enough: _ringtones_. The practice of charging suckers $2 for a 30-second snippet of a song they already have, is a multi-billion-dollar industry.\n<!--more-->\nh2. Do the math\n\nObviously we are not going to get Quicken or Spore or Excel at a $1 price point. But for a small app from an indie developer, I think it's quite reasonable. There are a lot of good free programs (I've written a few myself.) In some cases these are free for ideological reasons, either open source or just \"giving back\" to the community. In a lot of cases, though, I think they're free just because it's just too much work to set up the e-commerce infrastructure, or because the developer thinks no one would bother to pay just a few bucks.\n\nBut if the product is on an Apple-hosted store, right there on the iPhone, billed directly to your credit card with a single tap, then more people will bother. Especially if there's no other way to get the app â€” buy-before-you-try may be a turn-off at higher prices, but I think people will do it for a $1 or $2 app, especially if they can read positive customer reviews right there on the purchase screen.\n\nSo assume you spent some evenings and weekends writing a cool little utility or game. You submit it to the App Store and set the price at $1.43. You get $1 of pure, unadulterated profit from every user of the app. No bandwidth costs, no fees to PayPal or Kagi, no postage, no packaging, no extortionate demands by distributors and retailers to get shelf space. And note I said \"from every user\" â€” it's not just from the one or two percent of users who actually bother to pay shareware fees.\n\nI think that's a pretty good proposition. By the time the App Store goes live, Steve promises us there will be ten million iPhones in the world. If a one percent of them impulse-purchase your $1.43 app, that's $100,000. You could live off that. Even if it's only a _tenth_ of a percent (one in a thousand), you make $10,000 off your little hobby and can buy some nice toys for yourself (and for your significant other, as compensation for the time you spent ignoring them.)\n\n_[Updated, 8 March: Fixed my math. Oops. Really, I do know how to multiply...]_\n\n(I predict some readers will think I'm disparaging free software, or will see it as a Bad Thing that there'll be less free software. But I'm not, and it's not. Obviously open source software will be free, in both senses, and anyone who wants can publish freeware. But a lot of freeware gets abandoned by its developers, because the developers are just doing it for fun and run out of time or energy. That's sad. And I think a moderate infusion of cash can definitely help alleviate those problems. As a customer, I'd be very happy to know that my dollar was helping to keep the developer _totally enthused_ about adding new features and fixing my pet-peeve bugs.)\n\nh2. Revenue streams\n\nThen there's the matter of software updates. The app store will take care of them for you. Presumably, you just submit the new and improved version of the app, and all of your users get the offer to upgrade. I see no reason this wouldn't work for paid upgrades as well as free ones. And if the upgrade is cheap, and if you've done your job well and most of the customers like your app, then Ka-ching! That's another $100,000 (or $10,000, or whatever).\n\nIt's an interesting model for games, too â€” you can add value by adding more content. Maybe the first version of your $1.43 platform game only has five levels. So after you release it you get to work designing another ten levels, then release version 2 for $2.86. Everyone who finished the game and wants more, will buy the update. (Especially if you gave the game a good plot, but sadistically interrupted it halfway through.) The game industry calls this \"episodic content\".\n\nh2. The Big Conclusion!\n\nI don't have one. I'm just thinking out loud, and posting it here because I haven't seen anyone else raise these possibilities yet. Someone else start thinking about this! We have three months to figure out where we want to set our prices..."
  post_title: "The Beauty Of 99Â¢ iPhone Apps"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-beauty-of-99%c2%a2-iphone-apps"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-07 16:11:34"
  post_modified_gmt: "2008-03-07 23:11:34"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/the-beauty-of-99%c2%a2-iphone-apps/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 45
-
  ID: 251
  post_author: 2
  post_date: "2008-03-10 19:58:35"
  post_date_gmt: "2008-03-11 02:58:35"
  post_content: "Am I the only one who hasn't yet gotten a response to their iPhone developer program application â€¦ including the precious, precious developer certificate that lets you download apps to an actual iPhone?\n\nI stupidly forgot to apply until Thursday evening (I was too busy trying to download the SDK), so there are probably three billion others ahead of me, and Apple did say they were accepting \"limited numbers\".\n\nI did get GeekGameBoard running in the simulator today, but it really needs to be on the actual phone, so I can slide the pieces around with my finger."
  post_title: "Did I Miss The Boat For Developer Keys?"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "did-i-miss-the-boat-for-developer-keys"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-10 19:58:35"
  post_modified_gmt: "2008-03-11 02:58:35"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/did-i-miss-the-boat-for-developer-keys/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 15
-
  ID: 252
  post_author: 2
  post_date: "2008-03-13 18:56:23"
  post_date_gmt: "2008-03-14 01:56:23"
  post_content: "\"This is pretty scary\":http://www.darkreading.com/document.asp?doc_id=147713&f_src=drweekly â€” a proof-of-concept attack that disables authentication in Windows within seconds, just by plugging in a special FireWire peripheral. It's well-known that with physical access to a computer you can compromise it; but generally that involves activities that are time-consuming or blatantly obvious, like rebooting from a CD or swapping out hard drives. This new attack, though, takes only a few seconds; and the peripheral might look as innocuous as an iPod.\n\nWorse, what enables this is not a bug in a driver, but a _feature_ of the FireWire interface; so (as I understand it) there's no real way to disable it, short of disabling the FireWire port entirely. \"These slides (in PDF)\":http://www.security-assessment.com/files/presentations/ab_firewire_rux2k6-final.pdf by the author of the exploit describe it in more detail. It turns out that the FireWire protocol directly allows any device on the bus to read and write the physical RAM of any other device on the bus. (Any old-school BASIC programmers out there remember PEEK and POKE? Same idea.) That's _physical_ RAM, below the VM layer, so there are no access privileges; it's all available. The drawback is that mapping from that to the virtual address space that the OS uses is pretty complicated, and then the attack has to locate the desired kernel data structures (in this case the ones that enable password authentication) ... but it's clearly do-able, and has been demonstrated on Windows XP.\n\nNow I'm looking at that FireWire port on my MacBook Pro with some concern. It's basically _a hole into the innards of the kernel_, bypassing any security mechanisms. I feel like my computer's been \"trepanated\":http://en.wikipedia.org/wiki/Trepanation.\n!http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Peter_Treveris_-_engraving_of_Trepanation_for_Handywarke_of_surgeri_1525.png/250px-Peter_Treveris_-_engraving_of_Trepanation_for_Handywarke_of_surgeri_1525.png!\n\n(*Update:* The comments on \"Bruce Schneier's blog post about this\":http://www.schneier.com/blog/archives/2008/03/physically_hack.html are interesting, particularly this one by Chris Adams:\n\nbq. I find it interesting to see the time delay between the Mac and Windows security worlds - the first Firewire DMA-based hack I remember was the 2002 FireStarter attack. Apple modified their drivers to disable device DMA by the time 10.3 came out.\nThis was very widely discussed in various Mac news forums, blogs, etc. and a few security conferences. At some point the Linux crowd started making the same fixes and yet, somehow, it took half a decade before this finally got the Windows security community?"
  post_title: "Physical Attacks via FireWire"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "physical-attacks-via-firewire"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-13 18:56:23"
  post_modified_gmt: "2008-03-14 01:56:23"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/physical-attacks-via-firewire/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 253
  post_author: 2
  post_date: "2008-03-14 17:39:48"
  post_date_gmt: "2008-03-15 00:39:48"
  post_content: "CUPERTINO, Californiaâ€”March 14, 2008â€”AppleÂ® today announced that more than 10,000 iPhoneâ„¢ developers have received enigmatically-worded rejection letters for the beta iPhone Developer Program. The iPhone Developer Program provides developers with a complete and integrated process for developing, debugging, and distributing applications for iPhone and iPod touch, complete with real-world testing on iPhone.\n\nâ€œDeveloper reaction to our email has been incredible with more than 1,000 snarky posts and irate comments on high-profile Mac websites,â€ said Philip Schiller, Appleâ€™s senior vice president of Worldwide Product Marketing. â€œAlso, over one hundred programmers, some real hotshots at big software companies, have been seen sobbing inconsolably at their Mac Pros, further demonstrating the incredible interest developers have in creating applications for the iPhone.â€\n\n\"Apple gave us amazing tools that let us create a very functional demo in less than two weeks,\" said Rand Race, hotshot programmer at big software company Prosolar Mechanix. \"It was all lovey-dovey during our demo at the launch ... but then they took away our magic developer key before we left the Apple campus, and since then we haven't heard diddly-squat from them.\" Race denied spending the days sitting next to the phone waiting for a call from Apple, but did admit to configuring a special Mail rule that would respond to email from iphonedev@apple.com by playing the Angels' 1963 hit \"My Boyfriend's Back\".\n\n*Pricing & Availability*\n\nThe free beta iPhone SDK is available immediately worldwide and can be downloaded at developer.apple.com/iphone/program. Too bad it only lets you run your apps in the cheesy simulator window, eh? The iPhone Developer Program will initially be available to a couple of developers that we like a lot better than you. Face it: they're smarter, younger, and Steve doesn't think their apps look horsey. Not like yours."
  post_title: "iPhone Developer Rejections Top 10,000"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "iphone-developer-rejections-top-10000"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-14 17:39:48"
  post_modified_gmt: "2008-03-15 00:39:48"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/iphone-developer-rejections-top-10000/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 254
  post_author: 2
  post_date: "2008-03-18 10:25:39"
  post_date_gmt: "2008-03-18 17:25:39"
  post_content: "I had lost this historical document for a long time, but finally found it the other day on an old backup CD. It's the original 1997 sketch I made of a chat user interface based on speech balloons.\n<!--more-->\n\n\n<img id=\"image97\" src=\"http://mooseyard.com/Jens/wp-content/uploads/2008/03/balloon-chat-ui-21-april-1997.png\" alt=\"Balloon Chat UI Sketch (21 April 1997)\" />\n\nDrawn in ClarisWorks, April 21, 1997. This was based on my experiences with MUDs and IRC, having a really hard time keeping track of many-way chats. I think the only IM app available then was ICQ, which I hadn't heard of. (IIRC, AIM came out later that year, at least for non-AOL users.) This also predates Microsoft Comic Chat, which used speech balloons too, although in a very different UI: theirs was for novelty, mine was for usability.\n\nNovel features that made it into iChat:\n\n* The speech balloons, of course, after being beautifully Aqua-fied by Steve Lemay.\n* Per-speaker colorization.\n* Aligning your messages to the other side from everyone else's; in iChat this was improved a lot by also changing the alignment of the text, and pushing in the outer margins of the balloons to make their alignment more obvious.\n* Showing in-progress messages (the dotted balloon at the bottom). This became the \"thought-bubble\" marker in iChat. Back then I really wanted to show the partial message text, updated every second or two; but most users found it annoying to have other people seeing every typo they made, and it really conflicted with AIM's rate-limiting, so it was turned off.\n* Custom user pictures (though these were just sketched in as ovals in the drawing.)\n\nOne idea here that wasn't used in iChat was connecting a speaker's consecutive speech balloons together with \"pipes\". I thought this helped make it easier to identify the flow of the conversation, but it was a pain to implement (I tried doing it in Java once) and I didn't even try to add it to the NSTextView-based balloons in iChat.\n\nI'm not sure why I put the userpics in the margin but not next to the speech balloons. Maybe I thought there wouldn't be room, or that it would look weird to see the userpic repeated multiple times."
  post_title: "The Origin Of The iChat UI"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-origin-of-the-ichat-ui"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-18 10:25:39"
  post_modified_gmt: "2008-03-18 17:25:39"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/the-origin-of-the-ichat-ui/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 13
-
  ID: 255
  post_author: 2
  post_date: "2008-03-21 10:54:41"
  post_date_gmt: "2008-03-21 17:54:41"
  post_content: "I bow to my esteemed colleague Craig Hockenberry's greater experience in iPhone development; but I must disagree with \"his take on the infeasibility of background applications\":http://furbo.org/2008/03/16/brain-surgeons/. He gives two reasons why networked apps shouldn't run in the background â€” one technical and one user-interface.\n\nh2. Battery life.\n\nbq. The heart of the problem are the radios. Both the EDGE and Wi-Fi transceivers have significant power requirements. Whenever that hardware is on, your battery life is going to suck. My 5 minute refresh kept the hardware on and used up a lot of precious power. \"*\":http://furbo.org/2008/03/16/brain-surgeons/\n\nMy immediate response is that, *yes, polling is inefficient*. Everybody knows this; but it's also easy to implement, which is why way too many protocols use it. Normally the problems with polling first manifest as scalability problems on the server (as Twitter quickly discovered), but in the case of mobile devices, polling kills battery life.\n\nSo it's a good thing that *none of the real instant-messaging services poll*. AIM, Jabber, MSN, Yahoo and ICQ all open a socket at login and leave it open, sending data only when necessary. If you suppress buddy-list updates while the app isn't active, then data only needs to be sent when you send or receive an IM.\n\nThe remaining issue is one I don't have the technical knowledge to answer: *how much less power does it take to leave the EDGE radio passively listening for packets, as opposed to sending them?* (Anyone who knows, please comment.)\n\nOne possibility is that it's the same standby state the radio is already in (since obviously it has to be listening for incoming cellphone calls and SMS messages), so it incurs no extra battery drain. That would make non-polling background network services like IM clients totally feasible.\n\nThe other possibility, though, is that even _listening_ for EDGE IP packets uses a lot of power. Which would be bad news, as it makes any background notifications other than phone calls and SMS impractical. But I don't really believe this is the case â€” because if it were, how would the iPhone's upcoming \"push email\" support for Microsoft Exchange work?\n\n(Moreover, I have to point out that my prior cellphone, *the T-Mobile Sidekick, had excellent AIM support, as well as push email, from day one*, so it clearly is possible. The Sidekick's battery life was decent, with maybe 3/4 the standby time of my iPhone.)\n\nh2. User-interface clutter.\n\nFrom Craig's second post:\n\nbq. You now have five independent sources for notifications. How do you let the user know which one is which? One might say, â€œmake the sound different.â€ Another might say, â€œmake something flash in the status bar.â€ Someone else might say, â€œmake the phone vibrate.â€ Or even, â€œput up an alert box.â€ A truly sick individual might say, â€œDo all four.â€\n\nbq. Can you see where Iâ€™m going with this? Your phone soon becomes a frickenâ€™ pinball machine as multiple applications fight for your attention. With 24 notification permutations for every application, things will quickly get out of hand. \"*\":http://furbo.org/2008/03/18/more-brain-surgery/\n\nI don't buy this at all. In fact, I think it's paternalistic. Yes, user interface design has to consider unintended consequences of users' own actions, but this is a situation where *the consequences are entirely obvious* to the user: the more notifications you turn on, the more distractions you'll get. *The remedy is just as obvious:* if you end up with too many distractions, you turn some of them down or off by using the exact same steps you used to turn them on in the first place.\n\nI don't mean to put words in Craig's mouth, but I think that between the lines, that quote says: \"You'd be able to turn on so many notifications that _I would find it_ intolerable.\" He's dismissing a huge swath of functionality because it could be overused in ways that _he personally_ would not want on _his_ phone. That's not a valid argument.\n\n[It is, however, the kind of thing that's already gone on with Apple's own iPhone apps. My pet peeve is that the calendar's alarm cannot be customized. It's hardwired to emit two pathetic little bleeps, and that's all, whereas phone ringtones are customizable and repeat. Clearly this was designed by and for people who have no problem remembering to attend meetings, and never procrastinate appointments, but will drop everything to answer the phone. Unfortunately I am completely the other way around, and I'm sure I'm not the only one.]\n\nThere's also considerable irony here, in the fact that *Craig's best-known application is \"a client for Twitter\":http://iconfactory.com/software/twitterrific, the service that is today's _poster child_ for \"constant annoying notifications\"*. Clearly, then, he finds Twitter's level of intrusiveness tolerable, whereas I generally don't (I have an account but almost never use it.) On the other hand, I do find instant messaging invaluable, and mourn the loss of the mobile AIM presence I used to have on my Sidekick. Not that I got a lot of IMs while away from the computer; but the ones I did get, or sent, were often important to me. _Chacun a son gout._\n\nh2. Gloomy conclusions.\n\nI'll end this with two spot-on quotes. First, \"from developer Hank Williams\":http://whydoeseverythingsuck.com/2008/03/apples-iphone-sdk-prohibits-real-mobile.html:\n\nbq. Prohibiting background processing is not just a question of one feature being left off a long list of otherwise very well executed features. The issue of background processing is *the* issue for a mobile device because it is key to two things:\nâ€¢ telling the world about your status in some ongoing way\nâ€¢ receiving notification of important events\nThese two things are the key to most new real innovations in the mobile space.\n\nAnd c|net's \"Tom Krazit's response\":http://www.news.com/8301-13579_3-9900001-37.html?tag=tb:\n\nbq. That makes sense; remember that friend or relative who got a mobile phone but never turned it on? That practice greatly diminishes (although some might say it enhances) the value of a mobile communications device, and one-way communication is not what has made the Web so interesting in its second decade.\n\nBingo. I've been obsessed with what we now call \"social software\" for over a decade; and the iPhone SDK doesn't give us the full functionality we need to do this kind of stuff. Basically, *the iPhone has \"blinders\":http://en.wikipedia.org/wiki/Blinders on, like a cart-horse: if it's not already looking at you (in your online manifestation) it can't see you, and you can't get its attention.* That's great for a cart-horse, but it's death for any kind of social interaction.\n\nAs I said above, I am aware of the technical issues (and would like to understand the details better). There may need to be work done to allow multiple applications to receive background notifications, in a practical manner. For all we know, Apple may already be working on this. But of course we have no way of knowing, because, in typical Apple fashion, *they will absolutely refuse to admit the existence of the problem, much less any efforts to work around it, until they have a complete solution to spring on us.* Unless of course they just don't care; entirely likely, since quite a lot of people upstairs at Apple don't seem to 'get' social software at all. We just have no way of knowing..."
  post_title: "The iPhone Has Blinders On"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-iphone-has-blinders-on"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-21 10:54:41"
  post_modified_gmt: "2008-03-21 17:54:41"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/the-iphone-has-blinders-on/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 32
-
  ID: 94
  post_author: 2
  post_date: "2008-03-18 09:59:51"
  post_date_gmt: "2008-03-18 16:59:51"
  post_content: "The original sketch for the speech-balloon chat user interface that eventually became iChat, five years later."
  post_title: "Balloon Chat UI Sketch (21 April 1997)"
  post_excerpt: ""
  post_status: "attachment"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "balloon-chat-ui-sketch-21-april-1997"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-18 09:59:51"
  post_modified_gmt: "2008-03-18 16:59:51"
  post_content_filtered: ""
  post_parent: 98
  guid: "http://mooseyard.com/Jens/wp-content/uploads/2008/03/balloon-chat-ui-21-april-1997.png"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 256
  post_author: 2
  post_date: "2008-03-23 10:41:42"
  post_date_gmt: "2008-03-23 17:41:42"
  post_content: "Arthur C. Clarke's death hit me harder than other recent obituaries, even though it's been decades since I read much by him. His were some of the first science fiction stories I read, at the age of ten or eleven; and for several years after that he was my favorite author.\n\nI remember, during one of our long summer trips visiting the extended family in Germany, finding one of his story collections in the small English-language section of a public library. I read it over and over and over. I don't remember which book it was, but it had some of his classic stories like \"The Sentinel\", which became the inspiration of the film \"2001\".\n\nA bit later, it became my life's highest priority to see that film. I had the novelization, and the making-of book <i>The Lost Worlds Of 2001</i>, and the soundtrack record (which itself was a big influence on me musically). But this was before video rentals, when you had to wait patiently for a movie to show up in a theater. Fortunately there were correspondingly a lot of theaters that showed older movies; but it still took months of poring over the newspaper theater listings before I finally found a showing of \"2001\" and dragged my dad to take me to see it. And it was worth the effort: I'd never seen anything like it. (This must have been 1976 or early '77, since it was before \"Star Wars\" came out.)\n\nClarke wrote a lot about space travel, but when I think back, what really blew my mind about his fiction wasn't space but <i>time</i>. He was good at portraying far distant, alien futures, as in the book <i>The City And The Stars</i>, set on an Earth turned desert, lit by a burning-out Sun, with only one city left (thanks to its \"eternity circuits\" that defeat entropy and keep everything the same.) I also remember a story from that book I read in Germany, in which a future dictator has himself put into suspended animation in a sealed vault, and Clarke describes the infinitely slow processes of geological change taking place outside as millions of years pass, before he awakens.\n\nIt's fourth-dimensional vertigo, staring dizzily into time, and I'm forever in his debt for acquainting me with it."
  post_title: "My Debt To Arthur C. Clarke"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "my-debt-to-arthur-c-clarke"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-23 10:41:42"
  post_modified_gmt: "2008-03-23 17:41:42"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/my-debt-to-arthur-c-clarke/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 257
  post_author: 2
  post_date: "2008-03-26 09:19:27"
  post_date_gmt: "2008-03-26 16:19:27"
  post_content: "Cabel Sasser, of indie developer \"Panic\":http://panic.com, reports from Japan:\n\nbq. <i>\"Within minutes of riding on the first trains in Japan, I notice a significant change in advertising, from train to television. The trend? No more printed URLs. The replacement? Search boxes! With recommended search terms!\"</i> \"[*]\":http://www.cabel.name/2008/03/japan-urls-are-totally-out.html\n!http://www.cabel.name/images-post/2008/03/search-2.jpg!\n\nHe goes on to note how common it is for people to type URLs or domain names into their browser's search box instead of the address field. To American geeks this seems clueless, but Cabel points out that in Japan it makes more sense, since URLs are in a _foreign alphabet_, so search words are much more memorable.\n\nFirst off, this instantly reminded me of two favorite jokes:\n\n* Homer Simpson, picking up the phone: \"Operator! Get me the number for '911'!\"\n\n* <a href=\"http://scottpilgrim.com/\">Scott Pilgrim</a>, on finding out that the cute girl he saw at a party in Toronto works as a delivery courier for Amazon.ca: \"Hey, Amazon.ca, that's the online bookstore or whatever, right? ... What's the website for that?\"\n\nBut seriously: This is another example of <a href=\"http://www.skyhunter.com/marcs/petnames/IntroPetNames.html\">Zooko's Triangle</a>, which basically says \"names cannot be global, securely unique, and memorable, all at the same time\". URLs are global and unique, but not memorable, especially not in Japan; search terms are global and memorable, but not unique. Japanese advertisers are betting that you're more likely to reach their site through keywords, even if nine competing sites show up next to it on Google, than if you forget the URL before you even get to a browser.\n\nMarc Stiegler, on that page, predicted this:\n\nbq. <i>\"A good example of a nickname management system is Google. Type in a name, and Google will return a list that includes all the entities Google knows, to which the name refers. Google makes a mapping between these nicknames and their keys (if we think of the url of a page as a trusted-path-style key, which will be discussed later). Often enough to be interesting, the first item in the list will be the one you wanted. But it fails often enough, and endless pages of other choices appear often enough, to never leave us in doubt that these identifiers are not unique mappings to single keys. As is already true in the current world, in a world filled with petname systems, a key goal of marketing would be to get your nickname listed at the top of the Google rankings for that nickname.\"</i>\n\nI wrote about this earlier, somewhere in the middle of my post <a href=\"http://mooseyard.com/Jens/2007/12/facebook-and-decentralized-identifiers/\">FaceBook And Decentralized Identifiers\"</a>."
  post_title: "Japanese Advertisers Discover Zooko&#8217;s Triangle"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "japanese-advertisers-discover-zookos-triangle"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-26 09:19:27"
  post_modified_gmt: "2008-03-26 16:19:27"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/japanese-advertisers-discover-zookos-triangle/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 6
-
  ID: 258
  post_author: 2
  post_date: "2008-03-27 20:28:09"
  post_date_gmt: "2008-03-28 03:28:09"
  post_content: "Speaking of Arthur C. Clarke, another of his achievements was to live a long life without making a complete ass of himself. A goal we should all emulate, but one that's eluded too many other SF writers.\n\nFor example! Take Larry Niven and Jerry Pournelle, who, having ceased putting any mental effort into their writing <a href=\"http://www.amazon.com/Oath-Fealty-Larry-Niven/dp/1416555161/\" rel=nofollow>at least 25 years ago</a>, now have the free time, in their dotage, to advise top government officials on national security issues ... <a href=\"http://www.nationaldefensemagazine.org/issues/2008/March/SecurityBeat.htm#Science\">in their own inimitable way</a>:\n\nbq. Members of the group recently offered a rambling, sometimes strident string of ideas at a panel discussion promoting the group at the DHS science and technology conference. Among the groupâ€™s approximately 24 members is Larry Niven [...]\nNiven said _a good way to help hospitals stem financial losses is to spread rumors in Spanish within the Latino community that emergency rooms are killing patients in order to harvest their organs for transplants._ â€œThe problem [of hospitals going broke] is hugely exaggerated by illegal aliens who arenâ€™t going to pay for anything anyway,â€ Niven said. \"*\":http://www.nationaldefensemagazine.org/issues/2008/March/SecurityBeat.htm#Science\n\n[Emphasis mine.] Hmm; this plan wouldn't by chance require a huge reprint run of a Spanish edition of <i><a href=\"http://www.amazon.com/Long-Arm-Hamilton-Larry-Niven/dp/0345300505\" rel=nofollow>The Long ARM of Gil Hamilton</a></i>, to be distributed free at <i>taquerias</i>, would it?\n\n[Disclaimer: I used to love Niven's books, reading and re-reading <i>Ringworld</i> with slack-jawed amazement. But that was when I was a kid, in that distant era we call \"The Seventies\", before he devolved into the Rush Limbaugh of the spaceways. Speaking of which...]\n\nbq. The 45-minute panel discussion quickly deteriorated as federal, local and state homeland security officials, and at least one congressional aide, attempted to ask questions, which were largely ignored. Instead the writers used their time to pontificate on a variety of tangentially related topics, including their past roles advising the government, predictions in their stories that have come to pass, the demise of the paperback book market, and low-cost launch into space.\n\nYou have to read the whole thing! Jerry Pournelle goes out on a limb with some far-future speculation that â€” if portable tele-phone receivers with <i>cameras</i> in them became prevalent â€” people might use them to take photographs of illegal activities, eliminating the need for professional law enforcement officers! David Brin rants about militias and bangs his shoe on the table!\n\nThese people clearly have some <i>brilliant ideas</i>, and should be immediately whisked to an impregnable high-tech Undisclosed Location deep beneath the Rocky Mountains where they can work <i>full time</i> on the long-term project of transforming their thrilling inventions into reality, in time to save the world from terrorists, Communists, fluoridation and injured Mexicans. As a side effect, the quality of SF writing would leap upwards."
  post_title: "&#8220;Sci-Fi Mavens Offer Far Out Homeland Security Advice!&#8221;"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "sci-fi-mavens-offer-far-out-homeland-security-advice"
  to_ping: ""
  pinged: ""
  post_modified: "2008-03-27 20:28:09"
  post_modified_gmt: "2008-03-28 03:28:09"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/03/sci-fi-mavens-offer-far-out-homeland-security-advice/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 259
  post_author: 2
  post_date: "2008-04-02 23:41:13"
  post_date_gmt: "2008-04-03 06:41:13"
  post_content: "I've been waiting eagerly for my pre-ordered copy of Photoshop Elements 6 to arrive. The previous version I had was 2.0(!) which had been balky for a long time and totally lost the will to live (or launch) when I installed Leopard two years ago. Acorn and Pixelmator are nice apps, but they just don't do everything I need an image editor to do â€” I don't mean the \"pro\" features, rather the labor-saving conveniences that let even teh dummiez like me cut out backgrounds and correct colors and so forth.\n\nAnyway, for a high-profile, award-winning app from one of the biggest software companies out there, the out-of-the-box experience for the new Elements is _crappy_. Really, it's the worst I've seen in ages. So I had to write this post to complain about it, of course. And it got longer than I expected it to. And rantier.\n\nReally, I'm still happy I got a new version of Photoshop Elements, one that actually launches. I'm sure once I start using it I'll appreciate all of its amazing features. It's just that everything _outside_ the features is so clunky.\n\nIs it really so hard to make a good user experience? Most of it seems pretty obvious to me, but then why do so many big companies get it wrong? And in particular, why do they get it wrong when tiny one- or ten-person outfits regularly come out with beautiful apps that show that you don't need huge teams or lots of money to get it right?\n\nh2. \"Mystery Case Files: Adobe\", or: \"Where's The Installer?\"\n\nFirst things first: After inserting the disc, I had _no idea_ how to start the installation. I can't remember the last time that's happened.\n\n!http://mooseyard.com/Pictures/PhotoshopElements6Disc-20080402-161020.jpg!\n\nThe big, obvious application icon at the top of the window was really just a design element of the folder's background picture, so it didn't do anything when I clicked or dragged it. Haha! Funny! [Not that I was really expecting to find the actual app â€” because Important Products from Major Developers always come with installers to show how Important they are. Nor was there an installer package, of course â€” Extremely Important Products wouldn't deign to use Apple's installer, they always come with their own.] But I couldn't even find any Adobe installer app.\n\nThe other \"Adobe Photoshop Elements 6\" icon turned out to be a disguised folder. Its contents were a list view showing \"Bootstrapper.dmg\", two folders named \"payloads\" and \"resources\", and a \"Setup\" folder with the same custom icon. As a programmer (and Mac user) I could tell from the names that this was clearly No User Serviceable Parts Inside territory, like the inside of a bundle or something, so I quickly closed the window.\n\nI did see a ReadMe file, but it wasn't any help. It told me to restart after installing, but not actually, y'know, how to install.\n\nEven the tiny little printed documentation booklet didn't describe the installation process.\n\nBut as Holmes said, when you've eliminated every possibility, the remaining impossibility must be the truth. So I went back into that weird folder and double-clicked \"Setup\". Of course, that turned out to be the installer.\n\nBut not quite the installer; more like the warm-up act. It got me in the installin' mood by asking me to give it root privileges, then launched some other process with an identical Dock icon, which put up a _progress bar_. An installer so slow, it has to put up a progress bar while it _launches!_ Finally after about 15 seconds, both icons vanished from the Dock, and I started to get nervous. Had the installer crashed? No, after a few more seconds to build tension, the _real_ installer came up.\n\nh2. The Installer\n\nOK, it's an installer. A third-party installer. It's hard to get too worked up about an installer, one way or the other, but it's annoying when it _insists_ on installing over 2 gigabytes of stuff on my disk (most of which seems to be clip-art) without any choice to skip the inessentials. Nor would it even tell me ahead of time what it was installing, besides the ominously-named \"system components\". I'm installing a glorified _paint program_. What kind of system extensions does it need to install?\n\nThe installation of course took a long time. The installer helpfully displayed two identical progress bars, one above the other. Really! One of them tracked the installation progress, the other the progress of Disc 1. But of course there was only one disc. [See, this is what companies need a Steve Jobs for: to look at this during development and point out the obvious, that it looks stupid to have two identical progress bars, and bully the development team into taking a few hours to hide one of them when numberOfDiscs==1.]\n\nOK, the installer finally quit. It didn't tell me to restart the computer. And why should it? It's just installing a glorified paint program, right? Well, the ReadMe file that I'd peeked at in the beginning told me I'd have to restart after installing. So I decided to follow its advice rather than have something unspecified go wrong later on.\n\nh2. First Launch\n\nIt certainly launched faster than the old version! That's nice.\n\nThen it covered my whole screen with a gray backdrop. And filled about 75% of the backdrop with toolbars and palettes, leaving a little bit of room in the middle for a document window. It reminded me of an old mid-'90s Macworld parody of what the next version of Microsoft Word would look like, an entire screenful of toolbars.\n\nThere's a preference to not cover the _entire_ screen with gray, fortunately. It punches out a hole in that gap between the palettes and toolbars. It still looks pretty silly: the user interface has crossed over some kind of line, where it's no longer the application using up a lot of your desktop with its UI, it's now the application _owning_ your screen, granting you a bit of room to peek through and see those other, lesser applications that you won't be needing anymore.\n\nOh well, the gray UI looks fairly nice, if completely nonstandard (it's not even anything like Apple's pro apps' own nonstandard gray UI.)\n\nh2. Who Will Update The Updaters?\n\nJust now I launched Elements again, and got an alert that there's an update to the Adobe Updater, and do I want to download it? Somehow the idea of a separate updater, that needs to update itself, made me laugh. Is there an Adobe Updater Updater that puts up that alert and updates the updater? And what if the Updater Updater needs an update? (I can start to see where that 2 gigabytes went, now.)\n\nThe Updater, of course, consumes 99.5% of one CPU during the entire download process, putting my MacBook Pro's fans into wind-tunnel mode. Apparently whoever wrote this thing had no idea how to use CFReadStream and used it in the most inefficient way possible (sit in a tight loop calling CFReadStreamBytesAvailable as fast as you can.)\n\nh2. Big Conclusions\n\n* Installers suck.\n* Custom 3rd-party installers that make your Dock bounce a lot suck harder.\n* If this is the \"lite\", for-dummies, cheap-n-cheerful version of Photoshop, I can't imagine how huge the _real_ version must be. I mean, if MacPaint was \"Rock Around The Clock\", and the first version of Photoshop was, say, \"Please Please Me\", then this is Yes's \"Tales From Topographic Oceans\":http://www.connollyco.com/discography/yes/topographic.html. If so, that makes Acorn and Pixelmator something like \"The Clash\" and \"Pink Flag\", respectively; not really a threat to the hegemony yet, but if future versions can mature into \"London Calling\" and \"154\", it'll be time to kick out the jams.\n\n<img src=\"http://www.connollyco.com/discography/yes/topographic.jpg\" width=200 height=200/>\n<img src=\"http://images.amazon.com/images/P/B00004BZ0N.01.LZZZZZZZ.jpg\" width=200 height=200/> <img src=\"http://web.mit.edu/klund/www/lewis/154.gif\" width=200 height=200/>"
  post_title: "On First Installing Adobe&#8217;s Photoshop Elements 6"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "open"
  post_password: ""
  post_name: "on-first-installing-adobes-photoshop-elements-6"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-02 23:41:13"
  post_modified_gmt: "2008-04-03 06:41:13"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/on-first-installing-adobes-photoshop-elements-6/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 54
-
  ID: 260
  post_author: 2
  post_date: "2008-04-12 14:42:39"
  post_date_gmt: "2008-04-12 21:42:39"
  post_content: "I got about 14 minutes of fame back in January with \"a blog post\":http://mooseyard.com/Jens/2008/01/gone-indie/, wherein I grumbled about (among other things) how I disliked Apple's culture of secrecy, and announced that I'd left Apple to work on my own, unspecified, project. In the intervening three months, I haven't said anything about what that project is, almost as though it were ... secret.\n\nThe irony of this is not lost on me.\n\nAdmittedly, there are things about my app that I do want to keep under my hat until they're ready to show off in their full glory. I want to spend my one minute of remaining fame wisely; ideally accompanied by a large friendly \"BUY NOW\" button on my website.\n\nBut the main reason I haven't been talking is just that I've been lazy. Well, not _lazy_, but focused on _coding_ rather than _talking_. I'm mindful of a quote by (I think) John Crowley, which goes something like:\n\nbq. â€”There are two kinds of poems: the ones you write, and the ones you talk about writing. They're both important, but never get mixed up about which kind you have.\n\nI feel like I've been talking about writing this type of app (if only to myself) for a decade now, so it's really been time to buckle down and make it happen.\n\nBut now I've got a lot of stuff up and running, and I'm excited about it, and feeling annoyed that I can't just blab about my progress. Oh wait, but I can! So starting now, I'll be writing about my project here â€” I want to post high-level overviews, geekier details of the innards, and progress notes. Sort of like those \"developer diaries\" the videogame sites love to run.\n\nThe catch is that I'm going to talk about the architecture of the app, and its core functionality ... but not the primary user-level feature, the selling point. Not yet. Even without that, I hope this will still be interesting to some of you.\n\nh2. Meet Cloudy.\n\n*Cloudy* is \"a comic-strip character\":http://mooseyard.com/Jed/Cloudy/ my son Jed started drawing two years ago, when he was ten.\n\n!http://mooseyard.com/Jed/Cloudy/Bored.jpg!\n\nI've already appropriated Cloudy in the past for \"a mix CD\":http://mooseyard.com/recordings/mub41/ and \"a t-shirt\":http://www.zazzle.com/mooseyard/product/235833027556892190, so it was a no-brainer to make her the mascot of my new project as well.\n!http://mooseyard.com/Pictures/CloudyAboutBox-20080412-143053.png!\n\nI suspect the app itself will have a more descriptive name by the time it ships, but Cloudy's a good name to keep for the underlying architecture. And what's that?\n\n<b>Next: \"What Cloudy Is\":http://mooseyard.com/Jens/2008/04/cloudy-as-buzzwords/. </b>"
  post_title: "Unstealthing, Incrementally"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "unstealthing-incrementally"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-12 14:42:39"
  post_modified_gmt: "2008-04-12 21:42:39"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/unstealthing-incrementally/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 261
  post_author: 2
  post_date: "2008-04-12 21:48:38"
  post_date_gmt: "2008-04-13 04:48:38"
  post_content: "Speaking of my projects, here's a different one that's actually finished: a new mix entitled \"The Fall Of The Towers\":http://mooseyard.com/recordings/mub52/.\n\n!http://mooseyard.com/recordings/mub52/Cover.jpg!\n\nI finished it four days ago and I'm still very pleased with it. Several of the overlays and transitions feel like they've become more than the sum of their parts -- that's what I aim for, but don't always attain."
  post_title: "But First, This Brief Message About The End Of The World"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "but-first-this-brief-message-about-the-end-of-the-world"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-12 21:48:38"
  post_modified_gmt: "2008-04-13 04:48:38"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/but-first-this-brief-message-about-the-end-of-the-world/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 262
  post_author: 2
  post_date: "2008-04-13 23:57:06"
  post_date_gmt: "2008-04-14 06:57:06"
  post_content: "<i>Continuing from \"Unstealthing, Incrementally\":http://mooseyard.com/Jens/2008/04/unstealthing-incrementally/... </i>\n\nI have many ideas for applications, but most of them seem to rely on similar kinds of infrastructure, in particular a *distributed, secure application-level messaging system*. Unfortunately, this doesn't really exist yet, at least not in any form that meets my needs.\n\nWhat am I talking about here? More colloquially, it's a mechanism for letting applications all over the network send messages to each other, without requiring a central server, and without allowing messages to be eavesdropped upon or faked.\n\nLet's take it one buzzword at a time...\n\nh3. Distributed.\n\nI don't know about you, but I'm getting fed up with centralization. It happens because it's the path of least resistance: buy a domain name, rent a server, buy more servers and stick a load-balancer up front as your user base grows. It's solving problems by throwing hardware at them. The end result can certainly work fine, but too often it's fragile: both technically (site goes down, ten million users get pissed off) and politically (just one domain for China to censor, one company for France to file lawsuits against.)\n\nIn social software especially, there's an additional type of _cultural_ fragility, since the owners, implementors and users of a big social site have different goals and massively different levels of power. Many examples have shown that this creates sites that scale up into the equivalent of planned communities, shopping malls, theme parks, marred periodically by the protests of an angry minority of users against what they see as privacy intrusions or censorship.\n\nUnfortunately it's hard to use the Web architecture in a distributed way. This would involve lots of small groups (or individuals) running their own Web-based services that interoperated seamlessly. There are certainly technologies that help with this interoperability, such as OpenID and web services (whether REST or SOAP), but the bottom line is that setting up any kind of Web based system is a task that's way beyond nearly all end-users, just as it was in 1994. It just never got any easier! You still have to know about FTP uploads and file permissions and CGI-BIN directories and Apache logs and MySQL configuration, even to set up something trivial like a \"damn blog\":http://mooseyard.com/Jens/.\n\nSo the options for Web-based social software end up being (a) Install it yourself on your vanity domain, if you're a total geek and don't mind doing your own tech support; or (b) Patronize some hosted service that will take care of it for you. What happens then, as popularity of this medium increases, is that the hosted services get bigger and bigger, money pours into them, they go into arms races of feature creep and marketing, they get even bigger, and voila! It's MySpace and FaceBook all over again.\n\nSo that leads me to distributed _non_-Web-based systems. Which are _completely_ untenable because the only way you can run custom oddball software on a real server is to rent your own private server (or virtual one), which costs \"orders of magnitude more\":http://www.engineyard.com/pricing than the \"regular web hosts\":http://dreamhost.com/ that just let you run CGI scripts. Or if you want to run server software on your computer at home, you find that your consumer broadband connection comes with throttled upload bandwidth, no fixed IP address, and terms of service that forbid you from running servers.\n\nDo you see where I'm going? *Peer to peer.* It's the ultimate decentralization. If you resolve the scaling problems at the protocol level, then none of the network nodes need unusual amounts of horsepower or bandwidth, and the total supply of both naturally increases along with the user base. Installation of software on desktop computers is a cut-and-dried problem: it's as easy as downloading and double-clicking an app. And the content is completely in the hands of its creators and users: no Disneylands, no thought police, no \"ad beacons\":http://www.facebook.com/business/?beacon.\n\nh3. Secure.\n\n\"Secure\" means a lot of things. In a messaging system, no legit user wants messages to be spoofed, tampered with, censored, read by the wrong people, or sent by the wrong people.\n\nIn the Good Old Days, no one worried about this because the net consisted of a few thousand geeks with Ph.Ds who pretty much trusted each other. (And that's why email is so pathetically vulnerable to all the attacks I just listed.)\n\nIn the present day, developers focus on making their big monolithic servers secure from intruders, and the end users mostly trust that the developers are (a) doing a good job of that, and (b) not doing anything unethical themselves with the customers' data. It mostly works out, I guess, although there are daily reports of \"embarrassing security holes\":http://use.perl.org/~Aristotle/journal/33448, crazy new types of cross-site-scripting attacks, \"creative\" uses of sensitive customer data for marketing purposes, and backup tapes of millions of customer credit card numbers being accidentally left behind on the bus.\n\nThe more you think about that, the less crazy it seems to trust a peer-to-peer system where there are no authority figures handing out accounts or enforcing access privileges. Because in such a system you have to _actually make everything secure by design_ instead of just trusting people. Want to create an identity that no one can steal? Generate your own key-pair (and keep your private key safe!) Want to keep the wrong people from reading something? Encrypt it. Want to prove you wrote something and keep anyone from altering it? Digitally sign it.\n\nIt's not like there aren't any \"known solutions to this stuff\":http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Source/dp/0471117099. It's just that applying them can be tricky, and so far it's generally been easier to just lock your big server up in a data center instead.\n\nh3. Application-Level Messaging.\n\nWhat I mean by this is that the messages sent between users' computers are not necessarily directly human-readable. Unlike emails or instant messages, they might not be delivered right to the screen, but rather to an application that presents them differently. For example, a message might represent a move in a chess game, a revision of a shared document, or a notification of new content stored elsewhere. Sending these as emails or IMs is awkward and relies on having the user intervene by opening file enclosures or URLs.\n\n*Next: \"How Cloudy Does These Things\":http://mooseyard.com/Jens/2008/04/cloudy-identity/.*\n\n!http://mooseyard.com/Jed/Cloudy/Mars%201.jpg!"
  post_title: "Cloudy As Buzzwords"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "cloudy-as-buzzwords"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-13 23:57:06"
  post_modified_gmt: "2008-04-14 06:57:06"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/cloudy-as-buzzwords/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 263
  post_author: 2
  post_date: "2008-04-15 23:04:21"
  post_date_gmt: "2008-04-16 06:04:21"
  post_content: "<i>Continuing from \"the previous Cloudy post\":http://mooseyard.com/Jens/2008/04/cloudy-as-buzzwords/ ... </i>\n\n!http://mooseyard.com/Jed/Cloudy/WhatAStrangePlace.jpg!\n\nAt the root of Cloudy is the means for creating and establishing identity. A lot of peer-to-peer systems treat the peers mostly as interchangeable anonymous nodes, often deliberately so, but Cloudy is a _social_ system.\n\nh2. Quick Crypto Recap.\n\nThe identity and security layers of Cloudy are tightly intertwined, because identity _without_ security is useless. And security is accomplished entirely through cryptography, because the centralized alternatives like locking all of your servers up in a closet don't apply. Cloudy doesn't do anything new cryptographically (wisely so), but for the benefit of those who aren't familiar with it, here's a superficial overview of the off-the-shelf tools I'm using:\n\nh3. Cryptographic Hashes, or, Digests.\n\nLike any hash algorithm, a cryptographic hash converts a block of data of arbitrary length into a short fixed-length output; the same input always produces the same output; and even the slightest change to the input should produce an entirely different output. Unlike a regular hash, two different inputs should _never_ result in the same hash output. (That's \"never\" in the practical sense: collisions are mathematically inevitable, but it should impractically long, ideally millions of years, to find one.) And it should be infeasible to identify anything about the original data given only the hash.\n\nCryptographic hashes are rather weird and neat. I've previously called them \"the Dewey Decimal numbers for the Universal Library\". They also remind me of the scene in the old TV cartoon of \"The Cat In The Hat\", where the Cat and kids are running around labeling every object in the house with cryptic identifiers like \"QW-X12\". Digests are a bit longer than that (SHA-1 outputs 160 bits, i.e. 20 bytes) but it's still very handy to have a compact label to identify any conceivable chunk of data.\n\nh3. Public/Private Key Pairs, or, Asymmetric Keys\n\nA regular cipher uses what's called a _symmetric key_. The sender and receiver choose a single key that they both have to know, but keep secret. The sender inserts the key into the encryption algorithm and feeds the message in, and out comes the encrypted form. The receiver then inserts the same key into the decryption algorithm, feeds the encrypted data into it, and out comes the original message. The point is that they use a single key, and the one who generates the key has to somehow convey it secretly to the other party before they can use it, leading to an obvious chicken-and-egg problem.\n\nAsymmetric encryption algorithms, the best known of which is RSA, use _two_ keys. The keys are generated together in a matched pair. When one key is used by the sender to encrypt data, it takes the _other_ key of the pair to decrypt it.\n\nThe genius of this is that you only have to keep one of the keys secret. The other one can be given away freely and is called the \"public key\". If someone else has a copy of your public key, s/he can use your public key to encrypt a message to you. Remember, it doesn't matter how people get your key; you can read it to them over the phone, email it, print it on a billboard. The encrypted message still can't be read by anyone else, because only you have the matching _private_ key to decrypt it. In other words, it becomes possible to send secure messages without having to share a secret key in advance.\n\nh3. Digital Signatures.\n\nThere's another use for key-pairs. You can use your private key to generate a _signature_ of a message, a small block of data that can be attached to it. Anyone who has your public key can then use it to _verify_ the signature, i.e. prove that you generated the signature of that message with your private key. No one else could have generated the signature. In other words, as the name \"signature\" implies, this is a way to unforgeably mark a document to show your authorship or approval.\n\n(A digital signature is really just a cryptographic hash of the document, which is then encrypted with the private key. To verify someone's signature you just decrypt it using their public key, then compute your own hash of the document and compare the two results.)\n\nh3. Digital Certificates.\n\nA _certificate_ is, in general, just a signed document that attests to something. Usually it's vouching for the identity of the owner of another key; something like \"the owner of the public key 3FD8B640 is Joe-Bob Briggs, of Dallas TX, joebob@example.com. Signed, Verisign.com.\" This is the standard way that trust gets spread around in a distributed system.\n\nh2. Back To Cloudy: Generating An Identity.\n\nYour Cloudy identity is simply a public key, currently 2048-bit RSA, generated the first time you launch the program. (The matching private key is stored securely in the Mac OS Keychain.) From then on, that public key uniquely identifies you. It's _unique_ because it's randomly picked from a space so large that the possibility of collisions is for all practical purposes zero. It _identifies_ you because it can be used by others to verify anything you signed with the matching private key.\n\n[2048 bits (256 bytes) is somewhat bulky to use as an identifier; so a public key can be run through an SHA-1 hash and converted into a 160-bit (20-byte) digest form that's, for all intents and purposes, equally unique. (2^160^ is about 10^48^, nearly the number of atoms in the Earth.) The digest, however, has no cryptographic value to a recipient who doesn't already have the public key, so it's not a _secure_ identifier by itself.]\n\nThe first thing the new key is used for is to mint an SSL certificate, which will be used for identification when you communicate with other peers over SSL sockets. It's a \"self-signed\" certificate because it doesn't contain a signature from any trusted higher authority (there aren't any). But that's OK: when Cloudy peers connect, they only need to make sure of the identities they're contacting, which are literally just the public keys in the certificates.\n\nh2. Cloudy Certificates.\n\nSSL unfortunately uses an awkward and complex certificate format called X.509, which is one of two evolutionary relics left over from a long-dead overly-ambitious network architecture called X.500. (The other one is the LDAP directory protocol; the fact that the L stands for \"Lightweight\" gives you an idea of how comparatively elephantine X.500 must have been.) Most cryptographic experts seem to hate X.509: Ferguson and Schneier's \"Practical Cryptography\":http://www.amazon.com/Practical-Cryptography-Niels-Ferguson/dp/0471223573/ref=pd_bbs_sr_1?ie=UTF8&s=books&qid=1208239300&sr=8-1 flatly recommends avoiding it if possible, and Peter Gutmann's \"overview\":http://www.cs.auckland.ac.nz/~pgut001/pubs/pkitutorial.pdf is a masterful takedown, with sarcasm worthy of Doug Piranha.\n\nAfter spending a week painfully figuring out how to generate a goddamn trivial self-signed cert, even with the help of state-of-the-art system APIs, I could understand what the experts meant. I didn't want to use X.509 anymore. And it wasn't flexible enough anyway, since it was designed around the idea of hierarchical authorities. Unfortunately I didn't have a choice for SSL, but I went with an alternate approach for all the other certs Cloudy peer use when talking to each other.\n\nI really liked the approach taken by \"SDSI\":http://people.csail.mit.edu/rivest/sdsi11.html, a distributed identity system from about 10 years ago that never took off. It defined a simple textual syntax for certificates. SDSI used LISP-like S-expressions as the syntax, but the details aren't important -- I took the abstract concepts and went with something I found more readable. I tried \"JSON\":http://json.org first, but found it too limiting, so I ended up using \"YAML\":http://yaml.org.\n\n[YAML is a data serialization syntax; it's language-agnostic, but most popular in the Ruby community. Its main advantages over JSON (or OS X property lists) are a richer set of data types, custom typing for collections (i.e. you can say \"this array is a Rectangle\" or \"this dictionary is a Person\"), and the ability to represent arbitrary object graphs, not just trees. You can think of it as being like a pretty syntax for Cocoa object archives or Java object serialization.]\n\nAll I had to do (aside from writing a good Cocoa wrapper API for YAML) was define a schema for representing things like keys and signatures in YAML. Then I could use those to define my own signed certificate objects.\n\nh3. A YAML Certificate Example.\n\n<code><pre>\n.  --- !cloudy/CallingCard\n.  host: 76.191.199.123\n.  prof: 229474364\n.  port: 60507\n.  stat: 4\n.  signature: !cloudy/Signature\n.    signed: !binary |-\n.      oVCuVVlXPEdRPR+gy1k/UNOXtwvcN7LNpK6xTcA/hmlKh6uIT56E19LxWzA7POxm\n.      nhc351NVdoKC9XaUVsaZYDOnp2wWEWLUtdYYA8I++NZZIVlCHOjHCHr7mcfNcceD\n.      v+15RE9vguQ/PO1yaOU4DlviYt75y7xKMRs5REbZss6E/mr+0r1KE+f73dpHCVoD\n.      SW0azTD43pug2Pyh2Kar0GHXQcS4Iq/Y2nRFv7wyLUUmyVA7XI665a8QjMCiec2w\n.      0PqQ32FwGBYkH/iR/cfmaKjuwjAbW/qo7NoTH6WSFQy2ua/PVQs9B+dyjnZ5Z30E\n.      rnl9UTCVwjUmCc8J4hoaTQ==\n.    digest: !cloudy/Digest pFCzUK7yuO0dWtm0oATB7ag6vj0=\n.    date: 2008-04-15 21:55:46.830 -07:00\n.    expires: 21600\n.    signer: !cloudy/Person\n.      nickname: snej\n.      publicKey: !cloudy/PublicKey\n.        algorithm: 42\n.        format: 1\n.        bits: 2048\n.        data: !binary |-\n.          MIIBCgKCAQEApP6/D5aZm7nYfGwSMD3xQCCWw+XeU1NmZE7N/7eHvQlCUHMS8Aac\n.          Wh+s/PlPd1o7k+YePhoHnc1vR9uAfWm8iowiUU0RluUNxY0dRkTauRqeYM6//s+5\n.          ZXuh27pDDq2BgQYPL6EOp2UtWSQ/ojQjqX2/sGMkZ3k+uYiu1ZGQS2s0xTHPkgtu\n.          VI+Kg2TBY/28zAG4H/seUHNAP+frlpX+fizSC2oYNdREpEcVcVacHMQGwrj3mAr7\n.          g/LpJTnWgZhiJYvp7c4MkAYfHOIbKIXeXrF8oOz0EwgwSp0ZWkezuIYa4BMAns52\n.          WYK3LooQ+GttPIdVhSzzhLlY3psLeOf6nQIDAQAB\n</pre></code>\n\nThis represents a \"CallingCard\" object, which a peer broadcasts in order to tell other peers that it's online, and where it is on the network and what it's current state is. (One of the places a CallingCard appears is in the TXT record of Cloudy's Bonjour service.)\n\nThe syntax is more complex than JSON, but still pretty easy to read:\n\n* The first line says this is a dictionary structure whose higher-level type is \"cloudy/CallingCard\" (this gets mapped to the CallingCard class in my code.)\n* The next four lines describe four key/value pairs in the dictionary. In a CallingCard these represent the IP address, port number, timestamp of the user's current \"profile\", and online status (4 = \"Available\"). The keys are four letters long just to save some room and because I get nostalgic for OSTypes sometimes.\n* Line 6 assigns the \"signature\" key to a nested dictionary of type \"cloudy/Signature\". This dictionary is the digital signature of the enclosing object.\n* The \"signed\" attribute of the signature is the raw RSA signature data.\n* The \"digest\" attribute is the SHA-1 digest of the object being signed, in this case the enclosing CallingCard, _ignoring the \"signature\" attribute_.\n* The \"date\" attribute is the timestamp of the moment the signature was generated.\n* The \"expires\" attribute is the lifetime of the signature, in seconds, starting from the \"date\". After this interval the signature expires, and the signed object loses its validity and will generally be deleted, or at least not passed on to other peers anymore.\n* The \"signer\" attribute is a cloudy/Person object, the identity who generated the signature.\n* \"nickname\" is a brief human-readable name for this identity. It doesn't really mean anything; it's just useful as a default name to display (like an AIM handle in a buddy list) if the local user hasn't set up a customized name.\n* \"publicKey\" is the identity's public key, the actual unique identifier.\n* \"algorithm\" identifies the type of key (RSA), \"format\" identifies the format of the key data (PEM, I think), \"bits\" is the number of bits in the key, and \"data\" is the key data itself.\n\nThis does look a bit verbose when written out, but of course usually you'd never see this unless you were debugging something. (And it compresses well, by about 50% using gzip.) One space-saving feature that doesn't show up here is that, if the same object appears more than once, it's only written out once; after that it appears as a short reference back to the definition. So if I YAML-encode an array of signed objects (which is very common), my cloudy/Person data only appears once.\n\nh3. A Nasty Detail: Canonical Form\n\nI glossed over an important detail: to sign an object you have to compute a digest of it, and to compute a digest you have to be able to express the object as raw data. Clearly the raw data in this case is the YAML encoding of the object, right?\n\nThe catch is that in YAML, as with any human-readable syntax, there are many different ways to write out the same object. I can change the indentation, I can change the line breaks, I can list dictionary attributes in a different order. Any of those changes causes the resulting digest to look completely different.\n\nThis is a real problem because, if I read a signed object from YAML into a native object and then write it back out to YAML, it's likely to come out slightly differently. For example, if I write it as part of an array, then as a nested element its lines will be indented. Also, the ways dictionaries are stored in hashtables mean that their keys come out in unpredictable orders when iterated. But if that happens, the digest changes, which invalidates the signature.\n\nSo any certificate syntax has to define a single standard (\"canonical\") encoding of an object into binary data. In my YAML code I had to enable a \"canonical mode\" that, when turned on, causes a specific set of spacing rules to be used, dictionary and set entries to be written in alphabetical order, et cetera. This mode isn't normally used, but it has to be turned on when computing the digest of an object, in order to sign it or to verify a signature.\n\n[Incidentally, one of the reasons that digital signatures aren't being used much in the various trendy XML-based data formats, like RSS and Atom, is that XML is much more difficult to canonicalize. I don't understand all of the details, but they looked nasty enough that I was glad enough to rule out using XML.]\n\nh3. Verifying A Signed Object.\n\nWhen you verify the signature of a block of YAML like the above, you have to do this:\n\n# Parse the YAML into a graph of native objects.\n# Take the root Signed object, remove the \"signature\" attribute, and write it back into YAML in \"canonical mode\".\n# Compute the digest of that canonical YAML.\n# Compare the digest with the \"digest\" attribute of the Signature. If it doesn't match, the object's been tampered with (or damaged) and should be ignored.\n# Otherwise, write the \"Signature\" object back into canonical YAML and compute the digest.\n# Encrypt that digest using the public key in the \"signer.publicKey\" attribute.\n# Compare the result with the \"signed\" attribute. If it doesn't match, the signature was forged (or damaged.)\n# Otherwise, the signature is valid and the outer Signed object can be treated as being definitively created by the Person listed in the Signature.\n\nh2. Whew.\n\nOK, so we can create secure identities, encrypt stuff, and sign arbitrary objects. Now what do we do with them? The CallingCard example above should give you some ideas, but I'll go into more detail in the next 'thrilling' installment.\n\n*Next: \"Networking\":http://mooseyard.com/Jens/2008/04/cloudy-networking/.*"
  post_title: "Cloudy Identity"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "cloudy-identity"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-15 23:04:21"
  post_modified_gmt: "2008-04-16 06:04:21"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/cloudy-identity/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 264
  post_author: 2
  post_date: "2008-04-17 17:37:15"
  post_date_gmt: "2008-04-18 00:37:15"
  post_content: "Next I need to talk about networking; having an identity and minting certificates isn't very interesting until you can connect to someone else.\r\n\r\n<img src=\"http://mooseyard.com/Jed/Cloudy/Too%20Much%20Electricity.jpg\" width=600/>\r\n\r\nh2. Point-to-Point Communications.\r\n\r\nWhen one Cloudy peer wants to communicate with another one, it opens a TCP socket to its IP address â€”\r\n\r\n[Hang on, there are two issues I suddenly glossed over in that last phrase. First, how did this peer find out the others' IP address? These are just random computers, not servers, so they don't have their own domain names or even stable addresses. This is indeed a problem with any unstructured peer-to-peer network, but the solution involves things I won't get to until the next installment, in an unfortunately but necessary violation of layering.]\r\n\r\n[Oh, and issue #2 is that most home computers are now behind \"Network Address Translators\":http://en.wikipedia.org/wiki/Network_address_translation (usually some kind of WiFi base station or broadband router), which means they don't have their own real IP addresses and can't receive incoming connections. Fortunately, most NATs now \"support\":http://en.wikipedia.org/wiki/UPNP \"protocols\":http://en.wikipedia.org/wiki/NAT_Port_Mapping_Protocol that allow clients to open listening ports to the outside world, and doubly fortunately, Mac OS X 10.5 includes \"an API for making such connections\":http://developer.apple.com/documentation/Networking/Reference/DNSServiceDiscovery_CRef/dns_sd/CompositePage.html#//apple_ref/c/func/DNSServiceNATPortMappingCreate. Cloudy opens such a port whenever it finds itself behind a NAT.]\r\n\r\nâ€” and runs a protocol called BEEP over the socket.\r\n\r\nh3. BEEP.\r\n\r\n\"BEEP\":http://beepcore.org is a sort of generic application protocol that multiplexes a TCP socket into multiple virtual channels, each of which can send and receive binary messages. It's very handy for designing your own protocols, since it lets you focus on the high-level tasks of defining how your messages are encoded and when to send them and what to send in response.\r\n\r\nI'm using an open-source (LGPL) implementation of BEEP called \"Vortex\":http://vortex.aspl.es/. Its API is in C, but I've written a Foundation-level Objective-C wrapper around it. (I'll probably open-source that code sometime.)\r\n\r\nOne nice feature of BEEP and Vortex is that they handle SSL for you. The BEEP protocol lets the two peers negotiate what type of SSL they support, before switching over to it, almost transparently to the application code. Since the first thing that happens in SSL setup is exchanging certificates, each instance of Cloudy immediately learns the identity of the peer it's connecting to. (In normal HTTP-over-SSL, only the server has a certificate and the browser remains anonymous; but SSL supports bidirectional authentication and Cloudy uses it.) Unlike most client-server protocols, Cloudy has no need for a login: each peer has seen the others' public key, and the ability to use that public key proves that the other peer owns the private key, and hence that identity.\r\n\r\nSo now the two peers are connected, they've identified and authenticated each other, and their communication channel is encrypted. They can now open BEEP channels and send each other messages across them. The primary types of messages Cloudy sends are signed objects (certificates); I'll get into those later.\r\n\r\nh2. Local Area Discovery (Bonjour).\r\n\r\nAs you'd expect, Cloudy also uses \"Bonjour\":http://en.wikipedia.org/wiki/Bonjour_%28software%29. This is somewhat orthogonal to BEEP -- Bonjour's a _discovery_ protocol, so its main purpose is to let peers on the same LAN find out each others' names and addresses. But Bonjour does support a thing called a \"TXT Record\":http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt, which is a small chunk of arbitrary metadata that a service can associate with itself. For example, iChat stores your availability and status message in its Bonjour TXT record, which is how its Bonjour buddy list can show that information for everyone on your network.\r\n\r\nRemember the \"CallingCard\" I used as an example of a signed object in the last post? Well, that's what Cloudy puts in its TXT record. The CallingCard contains your availability and status, but what's really important is that it contains your public key, which is your identity.\r\n\r\nSo Bonjour solves, at least on a LAN, the discoverability problem I pointed out at the start of this post. At this point, if the peer you want to send messages to is on the same network, Cloudy can easily find it via Bonjour, open a BEEP socket, and authenticate over SSL.\r\n\r\nWhat's more, Cloudy's view of who's on the network is actually _trustworthy_. The CallingCard is _signed_ with your public key, proving that you created it. iChat's Bonjour IM has always been insecure in that there's no way to tell whether anyone else is who they say they are: all you know about someone is their name, which they can easily change to anything they want by editing their address book. In Cloudy, on the other hand, once you've communicated with someone once, your app remembers their public key, and it can identify in the future whether a peer appearing on the network is that person or not. (To make this clear in the UI, the name of anyone you haven't previously vouched for is shown â€œin quotesâ€.)\r\n\r\nâ€” Oops, I just skipped over a tricky problem again. The _first_ time you connect to someone, how do you establish that the digital identifier you're communicating with corresponds to the human being you think it is? This is surprisingly difficult to do, because it's vulnerable to what cryptographers call the \"man-in-the-middle attack\":http://en.wikipedia.org/wiki/Man_in_the_middle_attack. It's worth a post by itself...\r\n\r\n<b>Next: \"Verifying Identities\":http://mooseyard.com/Jens/2008/04/cloudy-verification/. </b>"
  post_title: "Cloudy Networking"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "cloudy-networking"
  to_ping: ""
  pinged: ""
  post_modified: "2011-01-23 13:50:28"
  post_modified_gmt: "2011-01-23 21:50:28"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/cloudy-networking/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 265
  post_author: 2
  post_date: "2008-04-19 17:49:43"
  post_date_gmt: "2008-04-20 00:49:43"
  post_content: "I don't want to make a habit of replying on my blog to posts on other blogs, because (a) it's dorky in an autistic way, and (b) it only encourages the annoying practice of blogs that stick their fingers in their ears.\n\nBut I've seen a couple of references now to \"Dean Allen's complaint about sites that offer multiple RSS feed formats\":http://textism.com/2008/04/19/please.stop.doing.this, but no place to post a comment about it; and since it directly relates to my past job monkeying with feeds, I feel like I should answer.\n\nThere are two reasons why a web page would link to multiple feeds.\n\n# To support feed-readers that don't understand every format. The XML-syndication-format field has a totally ludicrous history of incompatible versionitis, and the only format that's actually sanely designed (Atom) is new enough that for a while some major clients, such as BlogLines, didn't support it. So it's reasonable during such a transition period to generate both formats.\n# Because there might be feeds with different content. Some sites offer headlines-only feeds and full-content feeds. Some blogs offer a feed of all the comments on one post, as well as the usual feed of all the posts. Some wikis offer a feed of revisions of a single page.\n\nThe problem for a client like Safari is that there isn't a clear way to tell the difference between those two cases. When a site offers multiple feeds (by including multiple LINK tags in its HTML) do they have the same human-readable content or not? Answering that would require, at a minimum, downloading and parsing both feeds and trying to match the contents of the entries.\n\nThe first version of Safari RSS (in Mac OS X 10.4) went for simplicity, by indicating in its UI only that there _was_ a feed available, not how many. If the user pressed the \"RSS\" button, it would pick one of the feeds to switch to. The heuristic was to give priority both to order (picking the first feed listed) but also to format (preferring Atom to RSS, because the format is much better-defined and less prone to nasty ambiguities and parsing problems.)\n\nBut some people complained that, on sites that offered multiple feeds with different content (like articles vs. comments) you couldn't use the button to pick which one you wanted. So in Mac OS X 10.5 we decided to make the button into a pop-up if there were multiple feeds listed.\n\nThe problem now is that you more commonly end up being offered a choice between two formats with identical content, which is what Dean and others complain about, because most blog engines are configured to offer both Atom and RSS (and sometimes multiple flavors of each.)\n\nHere's where I _could_ talk about the design problems of the feed auto-discovery mechanism, and describe better ways it could have been designed to support multiple feed formats [hint: HTTP 1.1 already supports content-type negotiation] or even future improvements that could be made to reduce this annoyance in the future. But you know what? I don't care about Trendy XML-Based Syndication Formats anymore. OK, all right, I clearly care enough to write a multi-paragraph explanation and post it to my blog. But not any more than that."
  post_title: "Why They&#8217;re Doing This"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "why-theyre-doing-this"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-19 17:49:43"
  post_modified_gmt: "2008-04-20 00:49:43"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/why-theyre-doing-this/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 378
  post_author: 2
  post_date: "2008-01-07 20:34:16"
  post_date_gmt: "2008-01-08 03:34:16"
  post_content: "A bit of cryptography humor, from Peter Gutmann's slideshow \"Everything you Never Wanted to Know about PKI but were Forced to Find Out\":http://www.cs.auckland.ac.nz/~pgut001/pubs/pkitutorial.pdf ...\n\n_(Warning: This won't make any sense unless you know what things like \"PKI\", \"self-signed certificates\" and \"revocation\" are)_\n\n<!--more-->\n\n*CRL Problems (ctd)*\nRevoking self-signed certificates is hairy\n\n* Cert revokes itself\n* Applications may:\nâ€“ Accept the CRL as valid and revoke the certificate\nâ€“ Reject the CRL as invalid since it was signed with a revoked certificate\nâ€“ Crash\n* Computer version of Epimenides paradox â€œAll Cretans are liarsâ€\nâ€“ Crashing is an appropriate response"
  post_title: "&#8220;Crashing is an appropriate response&#8221;"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "233-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2008-01-07 20:34:16"
  post_modified_gmt: "2008-01-08 03:34:16"
  post_content_filtered: ""
  post_parent: 233
  guid: "http://jens.mooseyard.com/2008/01/233-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 379
  post_author: 2
  post_date: "2007-11-18 16:52:30"
  post_date_gmt: "2007-11-18 23:52:30"
  post_content: "Thanks to \"Steve Dekorte's blog\":http://www.dekorte.com/blog/blog.cgi, I just ran across <b>\"Box2D\":http://www.box2d.org/ </b>, an open-source 2D physics engine for games. In other words, it simulates the motion over time of convex polygons, taking into account inertia, gravity, collisions, friction, angular momentum, torque â€” all the things I once painstakingly learned in college and then completely forgot. Now they've suddenly become fascinating again, since Box2D does all the \"hard work\":http://www.chrishecker.com/Physics_References. The app just has to describe the objects, then call Box2D in a loop to find out how their coordinates change over time.\n\nBox2D comes with some demos that are bare-bones graphically, but amazingly realistic in motion, including a swinging chain, a web of springs, and a pyramid of blocks that you can undermine and collapse:\n<img src=\"http://mooseyard.com/projects/box2d/pyramid.png\" width=\"500\"/>\nA far more sophisticated usage of Box2D is in the indie game \"Crayon Physics Deluxe\":http://www.kloonigames.com/crayon/, \"in which you get to experience what it would be like if your drawings would be magically transformed into real physical objects.\" You _must watch the amazing video_ on that site. (Then cry, because it's only for Windows.)\n\nSpeaking of Windows, the official Box2D package only builds on that platform, so far. But the core library is platform-independent C++, and the demos use OpenGL, so porting isn't a big deal. Building on some work of some others who'd written makefiles, I put together an Xcode project. Now you can \"*download the demo app*\":http://mooseyard.com/projects/box2d/Box2DTestBed.zip if you want to play with it. If you want to experiment, you can copy the Box2D dylib itself out of the app bundle, or \"download my patch\":http://mooseyard.com/projects/box2d/Box2D_r49+MacXcodeSupport.patch and apply it to revision 49 from the \"Subversion repository\":http://sourceforge.net/svn/?group_id=205387.\n\nThere's a killer opportunity here to *plug Box2D into Core Animation*. Then you'd have the gorgeous high-speed compositing of the latter, coupled with far more sophisticated animation capabilities. (The animation functionality in CA is fully subclassable, so this should be straightforward to do.) I've been fooling around with Core Animation lately, and having a lot of fun making pretty pictures that slide around smoothly. I've never before felt the need for a game-physics engine, but the prospect of making my pretty pictures move with that kind of realism is suddenly very enticing!"
  post_title: "Box2D"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "228-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2007-11-18 16:52:30"
  post_modified_gmt: "2007-11-18 23:52:30"
  post_content_filtered: ""
  post_parent: 228
  guid: "http://jens.mooseyard.com/2007/11/228-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 267
  post_author: 2
  post_date: "2008-04-26 15:04:54"
  post_date_gmt: "2008-04-26 22:04:54"
  post_content: "<i>Continuing from \"the previous Cloudy post\":http://mooseyard.com/Jens/2008/04/cloudy-networking/ ... </i>\n\n!http://mooseyard.com/Jed/Cloudy/Mars%204.jpg!\n\nThe _first_ time you connect to someone, how do you establish that digital identifier you're communicating with is the human being you think it is? This is surprisingly difficult to do, because it's prone to what cryptographers call the \"man-in-the-middle attack\".\n\n(Those of you already wearing tinfoil hats can skip past the general explanation, down to \"What Cloudy Does\".)\n\nh2. 1. A Quick Overview Of Verification Attacks.\n\nFirst, consider the most obvious attack: simple spoofing.\n\nh3. Spoofing.\n\nLet's suppose there's an instant-messaging UI, and while working at home you receive a message from someone with an unknown key, whose nickname is \"AliceLiddell\", which happens to be the name of a co-worker.\n\nbq. \"AliceLiddell\": yo, this is alice\nYou: hi alice, what's up?\n_You add this identity to your friends-list._\nAlice: i need the admin password to the web server to fix a template\nYou: oh ok, it's wend4743kt\nAlice: kthxbye\n\n\nFifteen minutes later your company's website is pwned by the hacker who posed as Alice. All he had to do was create a new identity with her name as the nickname, and pretend to be her.\n\nHow do we get around this? You might think that asking questions before accepting someone's claimed identity would help, and it does help with spoofing, but there are nastier attacks.\n\nh3. Man-In-The-Middle\n\nbq. \"AliceLiddell\": yo, this is alice\nYou: You haven't contacted me before ... how do I know you?\n\"AliceLiddell\": i'm down the hall next door to brad. i need to ask you a question but you're not in the office today.\nYou: yeah, i'm working from home. sorry to be paranoid, but what's the poster on your wall say?\n\"AliceLiddell\": it used to say \"hang in there baby\" but i took it down when lolcats started getting too popular =)\n_You add this identity to your friends-list._\nYou: cool ... hi alice, what's up?\n...\n\nHaving established that this is really Alice, you go on to give her the password ... and fifteen minutes later your company's website gets pwned anyway. What went wrong? Well, it really _was_ Alice you were talking with; but the hacker was able to listen in and read the password. Wasn't the industrial-strength 2048-bit RSA encryption supposed to prevent this?\n\nThe problem is that you and Alice were _talking_ with each other; but you weren't directly _connected_ to each other. Instead each of you was connected to the hacker, who was relaying your messages back and forth. In this scenario what probably happened was that Alice tried to look you up by your name, found the hacker's fake account instead, and the hacker's computer then quickly created an identity with the same nickname as Alice, connected to the real you using that identity, and started forwarding your messages to each other while recording them itself.\n\nWhat's even worse: That identity you added to your friend-list as Alice? It's really the hacker's identity. From now on the hacker can talk directly to you and you'll probably assume it's Alice.\n\nh3. How Do We Solve This?\n\nThe man-in-the-middle attack is resistant to nearly any kind of _in-band_ verification. You can ask Alice any personal questions you want, but it won't reveal that you're not connected directly to Alice. You can ask Alice to type in her public key, but the hacker can edit her reply and substitute the key he's connected to you by.\n\nAbout the only practical way to solve this, unfortunately, is to use an _out-of-band_ channel. You need to talk with the real Alice and compare notes, before you can trust that her digital identity belongs to her. All you have to do, really, is get her _real_ public key and compare it to the key you're communicating with. (And she has to do likewise, of course.)\n\nThe canonical way to do this is to meet Alice in person and swap public keys. (PGP users call this a \"key-signing ceremony\".) Or you and Alice can read your keys to each other over the phone (or Skype, or an iChat video conference.) Sending the keys over IM is somewhat less reliable, but enough so for many purposes, since forging centralized IMs is a fairly involved task.\n\nOf course, we don't want to read 512 hexadecimal digits to each other! One optimization is to compare secure hashes of the keys (as PGP does), but that's still 40 digits. And those \"B\"s and \"D\"s are so easy to mix up over the phone.\n\nh2. 2. What Cloudy Does.\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2008/04//CloudyAlert.png\" alt=\"CloudyAlert.png\" border=\"0\" width=\"500\" height=\"306\" /></div>\n\nCloudy's verification scheme is blatantly stolen from the one used in Bryan Ford _et al_'s \"Unmanaged Internet Architecture\":http://pdos.csail.mit.edu/papers/uia:osdi06/#SECTION00021000000000000000. Instead of making you read a number as a string of digits, Cloudy converts it into a three-word phrase by mapping consecutive chunks of bits into words in an English dictionary, moreover a dictionary that's been \"specially constructed\":http://tothink.com/mnemonic/wordlist.html of words that are easy to recognize and hard to mix up.\n\nAnd instead of making you listen to the words and type them in, Cloudy (like UIA) presents a short list of phrases with radio buttons, for you to pick from. One of them is the one that will be correct if the connection is genuine, the others are chosen at random, and there's a catch-all \"None of the above\" at the end. If the user didn't select the expected phrase, something's wrong.\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2008/04//CloudyVerification.png\" alt=\"CloudyVerification.png\" border=\"0\" width=\"495\" height=\"364\" /></div>\n\n(An aside: the phrase only encodes 32 bits, which is far less than even the SHA-1 hash. Just hashing the key down to 32 bits would not be secure enough; instead Cloudy creates a one-time 32-bit key by combining the public key with a randomly-chosen integer that's sent to the other peer at the time of verification.)\n\nFord points out another benefit of this interface: \"its multiple-choice design prevents users from just clicking 'OK' without actually comparing the keys\", which defeats the user's damnable tendency to just \"dismiss all security-related alerts\":http://www.macworld.com/article/132910/2008/04/pubsubagent.html.\n\nOnce this is done, and the user chose the right verification phrase, Cloudy adds the other person's public key/identity to your \"contact list\" in its persistent storage. You can then decide to associate that key with an entry in your Address Book. Cloudy also mints a \"relationship\" certificate attesting that you have verified the other person's identity; you can choose to annotate the relationship with \"XFN\":http://gmpg.org/xfn/11 tags like \"friend\" or \"co-worker\". These certs can be passed to other friends to transitively extend trust.\n\nHow well does this user interface work? Cloudy hasn't seen much real-world use yet, but I've gone through the initial setup with a half-dozen people, and the verification (once I debugged it!) is quite easy to follow and takes only ten seconds or so.\n\nh2. 3. Is This Too Paranoid?\n\nOne of the unpleasant side effects of learning too much about computer security is that you start to become paranoid. You \"swallow the red pill\":http://www.arrod.co.uk/essays/matrix.php of the Internet and discover how much we take for granted, how much trust we implicitly place in things that are not trustworthy: domain names, centralized databases, passwords, emails. In severe cases, you start to self-identify as a cypherpunk and refuse to connect to any server through fewer than three anonymizing proxies. It's a bit like \"Medical Student Syndrome\":http://en.wikipedia.org/wiki/Medical_students_disease.\n\nOn the other hand, I think a lot of this paranoia is justified. I remember the old days, when \"spam\" was just a Monty Python sketch and you could trust the \"From:\" line of an email. Nowadays most of the emails we get have forged senders, and even a message that _sounds_ like it came from a friend might have been sent by \"some shady social-networking site he foolishly uploaded his address book to\":http://www.djchuang.com/2008/blubet-sent-you-a-special-gift-too/. Not too many people worry about domain names yet, but DNS is \"not hard to mess with\":http://en.wikipedia.org/wiki/DNS_cache_poisoning, either by \"hackers\":http://www.pcworld.com/article/id,140465-pg,1/article.html or by \"profit-motivated ISPs\":http://blog.wired.com/27bstroke6/2008/04/isps-error-page.html.\n\nEventually, anything that can be subverted, will. And since peer-to-peer software can't use the standard brute-force obstacles (centralized authority, locked-down servers) to delay attacks, it has to rely on _actually being secure_. And that means public keys, encryption, webs of trust. As many have pointed out, if you make security an optional add-on to a product, hardly anyone will use it. (How many people you know sign or encrypt their email?) It needs to be built in by default. And the more our privacy is invaded by advertisers, ISPs, search engines, phishers, monopolistic content owners and the like, the more that \"drives the adoption of actually-secure software\":http://www.shirky.com/writings/riaa_encryption.html by end-users.\n\nHaving to go out-of-band and swap three-word verification codes with your buddies is an inconvenience. But you only have to do it once with any particular person; after that, Cloudy remembers their key. And I will probably, in the future, put in some form of transitive trust: if I haven't verified you, but I verified Jean-Claude and he's verified you [and signed a cert to that effect] then I'll decide to trust you too.\n\n*Next: Cloudy Gossip.*"
  post_title: "Cloudy Verification"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "cloudy-verification"
  to_ping: ""
  pinged: ""
  post_modified: "2010-05-29 12:24:33"
  post_modified_gmt: "2010-05-29 19:24:33"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/cloudy-verification/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 6
-
  ID: 268
  post_author: 2
  post_date: "2008-04-30 15:03:14"
  post_date_gmt: "2008-04-30 22:03:14"
  post_content: "I've started using NSOperation in a few places in Cloudy, which means I'm backsliding into using threads and locking and so forth. It definitely makes writing network code easier than Cocoa's asynchronous API, but I really don't want to get into a morass of threads.\n\nWhat I'd really like to use are \"*Actors*\":http://revactor.org/philosophy. In a nutshell, an Actor is an object that has its own [cooperative] thread and message queue. Actors interact by message-passing instead of shared state. The idea is to eliminate the need for standard synchronization primitives like semaphors and locks, and get rid of the race conditions and deadlocks that plague multi-threaded programs.\n\nThe page I linked to above is from \"Revactor\":http://revactor.org/, a new Actor implementation for Ruby 1.9; Actors are also built into languages like Erlang and Io.\n\nThe only hard part about implementing Actors in Obj-C appears to be the underlying dependency on \"*coroutines*\":http://en.wikipedia.org/wiki/Coroutine. Steve Dekorte [author of Io] has a \"C coroutine implementation\":http://www.dekorte.com/projects/opensource/libCoroutine/ ; when I discovered that last year, I then found an \"Objective-C wrapper for it\":http://www.dpompa.com/?p=83, but that relies on a HigherOrderMessaging library which is incompatible with OS X 10.5 and hasn't yet been updated.\n\nh3. So I've gone DIY.\n\nI started with Steve Dekorte's coroutine library, but unfortunately it doesn't build on 10.5 ... and when I got it to build, I then ran into a bug in the system header &lt;ucontext.h&gt; ... and by the time I'd worked around _that_, I knew the code well enough that I pretty much rewrote it. Doing this made it much shorter and clearer, since Steve's code is cross-platform and supports three different implementations, while all I care about is OS X 10.5. I got it down to 150 lines of C.\n\nThen I wrote a pretty simple Objective-C wrapper around it, under 200 lines. (\"Here's the header\":http://mooseyard.com/hg/hgwebdir.cgi/Actors/file/tip/Coroutines/MYCoroutine.h.)\n\nh3. Come 'n' get it...\n\nThe work in progress is \"in my Mercurial repository\":http://mooseyard.com/hg/hgwebdir.cgi/Actors/ if you want to check it out. It's grandly titled \"Actors\", but all that's in it so far is the coroutine implementation.\n\nNeedless to say, this is currently *for amusement purposes only*; do not use it in real code. In particular, I strongly suspect that there are going to be problems getting Objective-C exceptions and autorelease pools to work correctly in coroutines. I'll try to explore that next."
  post_title: "Coroutines in Objective-C"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "coroutines-in-objective-c"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-30 15:03:14"
  post_modified_gmt: "2008-04-30 22:03:14"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/04/coroutines-in-objective-c/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 269
  post_author: 2
  post_date: "2008-05-03 09:21:31"
  post_date_gmt: "2008-05-03 16:21:31"
  post_content: "_[I just posted these questions to Apple's darwin-userlevel mailing list, but they're also worth cc:ing here as a follow-up to my last post.]_\n\nI've been experimenting this week with coroutines. Typically these are implemented as a type of cooperative thread, since each coroutine needs a separate stack and register set. I adapted Steve Dekorte's libCoroutine, which basically just uses ucontext, with malloc'ed stacks.\n\nIt strikes me that ucontext is basically no lighter-weight than a pthread, in terms of address-space usage and context switch speed. Is that true? Or is there additional overhead to pthreads besides the stack + registers?\n\nIf so, then it might be simpler just to use pthreads, since the API is already in place, and existing system facilities (like ObjC and C++ exceptions, and Cocoa autorelease pools) already know how to work with them. But the cooperative scheduling of coroutines is a bonus in some ways, as it makes the flow of control more deterministic and reduces the need for complex locking and synchronization.\n\nSo my second question is whether there's a clean way to implement cooperative scheduling of pthreads^1^, i.e. to have a set of threads that transfer control within themselves only via some sort of \"yield\" call, not by pre-emption? I've seen this implemented, for tutorial purposes, in Java using a shared lock. However, a coroutine transfers control to an explicitly-named other coroutine; it's not at the whim of the thread scheduler. How would one implement that in pthreads? I'm guessing it would involve a lock per thread; but I'm not familiar with the details of the pthreads primitives or API, so advice would be appreciated.\n\nâ€”Jens\n\n^1^ Yes, I'm aware that cooperative scheduling means you don't get all the performance benefits of multicore CPUs. I'm not concerned about that because, frankly, my application code uses minimal CPU time; it's always waiting for sockets, CoreAudio background threads, or user input. So the benefits of threading my code aren't worth the complexity and error-prone-ness of thread-safety."
  post_title: "Coroutines, pt. 2"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "coroutines-pt-2"
  to_ping: ""
  pinged: ""
  post_modified: "2008-05-03 09:21:31"
  post_modified_gmt: "2008-05-03 16:21:31"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/05/coroutines-pt-2/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 270
  post_author: 2
  post_date: "2008-05-11 09:07:18"
  post_date_gmt: "2008-05-11 16:07:18"
  post_content: "Stickies and I hadn't spoken in a while, but it called me this morning to announce it's made its acting debut in a music video! That was unexpected, to say the least, but it's an exciting career move, and I had to congratulate it; it does a great job:\n\n<object width=\"425\" height=\"355\"><param name=\"movie\" value=\"http://www.youtube.com/v/6kxDxLAjkO8&rel=0&color1=0x234900&color2=0x4e9e00&hl=en\"></param><param name=\"wmode\" value=\"transparent\"></param><embed src=\"http://www.youtube.com/v/6kxDxLAjkO8&rel=0&color1=0x234900&color2=0x4e9e00&hl=en\" type=\"application/x-shockwave-flash\" wmode=\"transparent\" width=\"425\" height=\"355\"></embed></object>\n\nStickies makes its entrance at 0:53, if you want to skip directly to it, but really the entire video (and song) are excellent. I just wish they'd used Stickies in the opening scenes instead of Word -- face it, Word is over the hill, especially that old Office 2004 version. (Did you see the bags under the Office Assistant's eyes? Stickies told me they dragged it straight out of the Betty Ford Center to shoot those scenes, and it couldn't remember any of its lines even though they were right up on the screen next to it in giant print. It's sad, really. At least it hasn't OD'd yet like that pathetic paperclip.)\n\nThis seems to be a fan-made video, by the way; but I think it's better than \"the official one\":http://www.youtube.com/watch?v=xDlEXQaMBpk. Now the question is: will Apple use this in a commercial? I think they should!\n\n[via \"37signals\":http://www.37signals.com/svn/posts/1020-how-to-make-a-music-video]"
  post_title: "Stickies makes its music-video debut!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "stickies-makes-its-music-video-debut"
  to_ping: ""
  pinged: ""
  post_modified: "2008-05-11 09:07:18"
  post_modified_gmt: "2008-05-11 16:07:18"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/05/stickies-makes-its-music-video-debut/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 271
  post_author: 2
  post_date: "2008-05-12 22:05:17"
  post_date_gmt: "2008-05-13 05:05:17"
  post_content: "...and which side of that line am I on? Not in general; just in respect to my latest decision in Cloudy. It's the old \"make vs. buy\" trade-off, or \"write vs. reuse\" in this case: do you go with an existing library, even if it's problematic, or do you write your own implementation from scratch?\n\nWhat am I talking about? The networking code in Cloudy. From the very beginning I wanted to use \"BEEP\":http://beepcore.org, a generic and flexible protocol for sending request/response messages over a socket. It has good support for parallelism, nice abstractions like multiple channels and feature negotiation, and supports SSL.\n\nThe BEEP implementation I'm using is \"Vortex\":http://vortex.aspl.es. It has the benefits of existing (there aren't a lot of BEEP implementations around), being written in native code, and being within my capabilities to get running on Mac OS X. Unfortunately it's also got a very complex and unintuitive C API, spawns lots of threads and calls my code from them (so I have to deal with thread-safety), and isn't quite finished yet. So over the months I've put a lot of work into writing an Objective-C API, figuring out how to get that working reliably, and diving into the Vortex code to fix bugs and add new features.\n\nAt some point -- I think it was last Thursday -- I crossed a line and started to wonder whether putting more effort into Vortex was throwing good money after bad. I wanted to use some of BEEP's MIME features, but found that Vortex only implements a tiny subset, and that even that implementation doesn't work right. Going down the path of fixing and improving, I found that I would have to break compatibility with any earlier versions of Vortex (which all send wrongly-formatted data), and that every patch I added was exposing more bugs, whether existing ones or newly-added ones of my own. And all this meant hacking on complicated code in plain C, with \"very long functions, and liberal usage of 'goto' statements\":https://dolphin.aspl.es/svn/publico/af-arch/trunk/libvortex/src/vortex_sequencer.c.\n\nUnfortunately, there are not many BEEP implementations to choose from (it's hard to compete against HTTP, the hammer everyone reaches for.) There's a private BEEP.framework inside OS X, but I'd have to be a fool to use it (for legal reasons if not technical.) I found that SubEthaEdit has one, and I've asked the developers about it, but I'm sure there will be financial terms.\n\nh3. So yeah, I'm writing my own.\n\nNo, I am not writing my own BEEP implementation! Stupid sensationalistic headlines. I thought about it for a few hours on Friday, but BEEP is actually pretty complicated and I knew it would end up taking longer and being harder than I would like.\n\nBut then I started to think about what BEEP features I need, and which ones I don't, and realized I could make do with a subset. Things I need:\n\n* Multiple messages and replies over a single socket\n* Parallelism (don't have to strictly alternate messages and replies)\n* Message metadata (some type of MIME-like headers)\n* SSL support\n\nBut I don't need:\n\n* Multiple channels (that's a biggie! Quite complicated.)\n* Well-defined schema (\"profiles\") with negotiation over which to use\n* FIFO message delivery\n* Negotiation of whether to use SSL\n* SASL and other authentication schemes\n* Interoperability with any other clients\n\nOn Saturday morning, a bit of pen-and-paper doodling convinced me I could create a simpler protocol that used some of the ideas of BEEP, and would give me just the features I needed. And since I could build on top of the Foundation and CFNetwork classes, in Objective-C, I could do it with a whole lot less code than Vortex.\n\nSo I started coding...\n\nh3. BLIP.\n\nIt's almost ready now, Monday night. I don't have message metadata implemented yet, and flow-control needs work, but the rest is running pretty reliably. I'm calling it BLIP, for \"BEEP-LIke Protocol\" (or maybe \"BEEP-Lite Imitation Protocol\", like some kind of suspect canned food product you might find in a dingy supermarket.)\n\nWhat does BLIP do? It lets you open a TCP socket and then use it to send messages back and forth. Each message is a data blob of arbitrary length, with an optional set of key/value properties [once I implement that]. Each message can have a reply associated with it, so you can send a message and then wait for the reply. Either peer can send messages, at any time (as opposed to most protocols that only let the \"client\" who opened the connection send messages, and only the \"server\" reply.)\n\nMultiple messages can be in flight at once, in either direction: sending a 10MB file doesn't block the transfer of other data. Messages can request high priority to get more bandwidth, or they can request gzip compression.\n\nAnd it's only 1500 lines of code, so far! Vortex is about 34,000. Even my Obj-C wrapper for Vortex is bigger than BLIP is. [All those figures ignore comments and blank lines.]\n\nI'm sure BLIP will end up doubling in size before it's really ready; and I'm also sure it'll take a lot more time than I've spent on it. But both of those figures are cheap compared to what I've invested in something that ultimately wasn't working for me. So I think in this case re-inventing the wheel is justified.\n\n...Meaning that I've answered the implied question of this post's title, coming down on the side of \"clever\". Whew! (What else did you expect? it's _my_ blog, after all.)\n\n[PS: Yes, if BLIP does work out, I'll certainly open-source it. I wouldn't call it a replacement for BEEP, as it's a lot more limited, but I think it'll be useful.]"
  post_title: "The Fine Line Between Clever And Stupid"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-fine-line-between-clever-and-stupid"
  to_ping: ""
  pinged: ""
  post_modified: "2008-05-12 22:05:17"
  post_modified_gmt: "2008-05-13 05:05:17"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/05/the-fine-line-between-clever-and-stupid/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 272
  post_author: 2
  post_date: "2008-05-16 17:42:26"
  post_date_gmt: "2008-05-17 00:42:26"
  post_content: "I've got my \"new BLIP protocol\":http://mooseyard.com/Jens/2008/05/the-fine-line-between-clever-and-stupid/ all implemented now. After my previous post on Monday:\n\n* On Tuesday I implemented message metadata.\n* On Wednesday I got SSL working (configuring the \"server\" side to verify the \"client's\" cert was difficult.)\n* On Thursday I put Cloudy up on blocks, pried out Vortex and my Obj-C wrapper library, and replaced them with BLIP.\n* And on Friday (today) I debugged.\n\nCloudy's back up and running, and all its features work. So, that makes one week of effort to implement the networking layer from scratch (I started sketching and coding on Saturday). Really makes me regret spending several times that on the previous library -- writing an Obj-C API, fixing bugs, adding features. Still, I'm sure all that experience helped me implement BLIP so quickly.\n\n(The code for BLIP is quite separable from Cloudy; but it does use some lower-level utilities and network classes I wrote, so it's not quite standalone. And it needs documentation before it'll make sense to anyone. How soon I release it depends on how much interest there is, so let me know if it's something you're interested in using.)"
  post_title: "BLIP update"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "blip-update"
  to_ping: ""
  pinged: ""
  post_modified: "2008-05-16 17:42:26"
  post_modified_gmt: "2008-05-17 00:42:26"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/05/blip-update/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 273
  post_author: 2
  post_date: "2008-05-25 11:13:17"
  post_date_gmt: "2008-05-25 18:13:17"
  post_content: "I've released the source code to my \"BLIP\" protocol implementation, as part of a project I call \"MYNetwork\", for \"Mooseyard Networking Libraries\". \"API documentation\":http://mooseyard.com/projects/MYNetwork/ is available online, and you can \"check out or browse the source code\":http://mooseyard.com/hg/hgwebdir.cgi/MYNetwork/ from its Mercurial repository. For the really curious, there's even a sketchy \"overview of the protocol's wire format\":http://mooseyard.com/hg/hgwebdir.cgi/MYNetwork/raw-file/tip/BLIP/BLIP%20Overview.txt.\n\nIt's working quite well for me in Cloudy; it's been a while since I've found any outright bugs, although I know there's more work to do on performance and features. It's not production-ready code yet, but I think it's ready for people to start using!\n\nFor now you can leave feedback in comments to this post, or by email to jens at this domain. If there's enough interest, I could set up a mailing list.\n\nHere's the description of BLIP from the API docs...\n\nh2. What's BLIP?\n\nBLIP is a message-oriented network protocol that lets the two peers on either end of a TCP socket send request and response messages to each other. It's a generic protocol, in that the requests and responses can contain any kind of data you like.\n\nBLIP was inspired by \"BEEP\":http://beepcore.org (in fact BLIP stands for \"BEEP-LIke Protocol\") but is deliberately simpler and somewhat more limited. That results in a smaller and cleaner implementation, especially since it takes advantage of Cocoa's and CFNetwork's existing support for network streams, SSL and Bonjour. (BLIP is currently a bit under 2,000 lines of code, and the rest of the MYNetwork classes it builds on add up to another 1,500. That's at least an order of magnitude smaller than existing native-code BEEP libraries.)\n\nh3. BLIP Features:\n\n* *Each message is very much like a MIME body*, as in email or HTTP: it consists of a blob of data of arbitrary length, plus a set of key/value pairs called *properties*. The properties are mostly ignored by BLIP itself, but clients can use them for metadata about the body, and for routing (i.e. something like BEEP's \"profiles\".)\n* *Either peer can send a request at any time*; there's no notion of \"client\" and \"server\" roles.\nMultiple messages can be transmitted *simultaneously* in the same direction over the same connection, so a very long message does not block any other messages from being delivered. This means that message ordering is a bit looser than in BEEP or HTTP 1.1: the receiver will see the beginnings of messages in the same order in which the sender posted them, but they might not end in that same order. (For example, a long message will take longer to be delivered, so it may finish after messages that were begun after it.)\n* The BLIPDispatcher class lets you (optionally) use *NSPredicate-based rules* to route incoming requests to handler methods. The predicates can examine all of the message metadata, so they can act much like the routing functionality of web frameworks like Rails and TurboGears.\n* The sender can indicate whether or not a message needs to be replied to; the response is tagged with the identity of the original message, to make it easy for the sender to recognize. This makes it *straighforward to implement RPC-style (or REST-style) interactions*. (Responses cannot be replied to again, however.)\n* A message can be flagged as *urgent*. Urgent messages are pushed ahead in the outgoing queue and get a higher fraction of the available bandwidth.\n* A message can be flagged as *compressed*. This runs its body through the gzip algorithm, ideally making it faster to transmit. (Common markup-based data formats like XML and JSON compress extremely well, at ratios up to 10::1.) The message is decompressed on the receiving end, invisibly to client code.\n* The implementation supports *SSL* connections (with optional client-side certificates), and *Bonjour* service advertising."
  post_title: "BLIP: Come &#8216;n&#8217; get it!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "blip-come-n-get-it"
  to_ping: ""
  pinged: ""
  post_modified: "2008-05-25 11:13:17"
  post_modified_gmt: "2008-05-25 18:13:17"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/05/blip-come-n-get-it/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 11
-
  ID: 114
  post_author: 1
  post_date: "2008-05-17 18:41:20"
  post_date_gmt: "2008-05-18 01:41:20"
  post_content: ""
  post_title: "rzf.txt"
  post_excerpt: ""
  post_status: "attachment"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "rzftxt"
  to_ping: ""
  pinged: ""
  post_modified: "2008-05-17 18:41:20"
  post_modified_gmt: "2008-05-18 01:41:20"
  post_content_filtered: ""
  post_parent: 103
  guid: "http://mooseyard.com/Jens/wp-content/uploads/2008/05/rzf.txt"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 274
  post_author: 2
  post_date: "2008-05-28 09:37:13"
  post_date_gmt: "2008-05-28 16:37:13"
  post_content: "I've created a \"BLIP-Protocol mailing list\":http://groups.google.com/group/blip-protocol on Google Groups:\n\n<table border=0 style=\"background-color: rgba(255,255,255,0.5); padding: 5px;\" cellspacing=0>  <tr><td><img src=\"http://groups.google.com/groups/img/3nb/groups_bar.gif\" height=26 width=132 alt=\"Google Groups\"/>  </td></tr>  <tr><td style=\"padding-left: 5px\">  <b>Subscribe to BLIP Protocol</b>  </td></tr>  <form action=\"http://groups.google.com/group/blip-protocol/boxsubscribe\">  <tr><td style=\"padding-left: 5px;\">  Email: <input type=text name=email/>  <input type=submit name=\"sub\" value=\"Subscribe\"/>  </td></tr></form><tr><td align=right>  <a href=\"http://groups.google.com/group/blip-protocol\">Visit this group</a></td></tr></table>\n\nPlease join up if you're interested in learning, using, re-implementing, improving, extending..."
  post_title: "BLIP-Protocol mailing list"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "blip-protocol-mailing-list"
  to_ping: ""
  pinged: ""
  post_modified: "2008-05-28 09:37:13"
  post_modified_gmt: "2008-05-28 16:37:13"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/05/blip-protocol-mailing-list/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 275
  post_author: 2
  post_date: "2008-05-30 08:00:23"
  post_date_gmt: "2008-05-30 15:00:23"
  post_content: "I hope some of you reading this are Ruby On Rails experts and have a moment to help me out ...\n\nh3. The problem in a nutshell:\n\n_What Rails generator/plugin should I use to create a user account / login system, preferably with OpenID, in a new app?_\n\nh3. The gory details:\n\nI haven't done any Rails work in quite a while. The app I was working on was circa Rails 1.0. I've now updated all my gems so I have Rails 2.0.2. Of course the app doesn't work: it crashes and burns immediately with Ruby errors in the generated code. Not surprising since I'm sure a lot has changed since 1.0.\n\nSo I thought I'd start over by generating a fresh Rails app, and then start moving pieces of my app over. But I'm immediately stuck at the first step, setting up a user account/login system.\n\n(Which is a hurdle every newbie runs into, right? Because nearly every web app needs this, but it's strangely the one area where DHH, the Man With An Opinion On Everything, didn't have enough of an opinion to settle on a standard account system. So instead, chaos reigns.)\n\nWhat I've done so far is â€”\n\n1. Looked in my brand new copy of _The Rails Way_. There's a whole chapter on Login and Authentication, yay. They say that the best authentication plugin is Acts As Authenticated. (Actually they say there are two best ones, but then they never reveal what the other is.)\n\n2. Typed \"script/plugin install acts_as_authenticated\" as it says in the book. And get an error, no such plugin.\n\n3. Looked up Acts As Authenticated online. The \"readme on the author's website\":http://svn.techno-weenie.net/projects/plugins/acts_as_authenticated/README starts with a big warning that it's deprecated and not maintained. Huh? Why is my $50 hot-off-the-press Rails book pushing an obsolete library?\n\n4. I really want OpenID support anyway. There's an openid-login-generator gem, so I installed and ran that. All it did was create one (1) migration file, nothing else. WTF?\n\n5. After much searching I found that the ruby-openid library, which I already have, contains in its examples subdirectory a Rails generator. I just have to copy it into the right place, and run the \"generate\" script. So I did that. It generated scaffolding and such. Hooray.\n\n6. I tried to run my app and, as the directions say, went to /account/login. Blam. Ruby errors. First it complained about \"end_form_tag\", which it turns out was deprecated in Rails 1.2 and removed in 2.0; I found out how to fix that, and next it died in the generated AccountController scaffolding itself, saying OpenID::FilesystemStore doesn't exist. Which it doesn't -- looks like that class was renamed OpenID::Storage::Filesystem. _So the example code isn't even compatible with the library it's part of!_ Looks like no one's updated it in quite some time.\n\n7. I look at the clock (11:30PM), sigh, and decide to give up and ask Teh Lazywebz for help. But my battery dies while I'm typing this, so I don't actually post it till the next morning."
  post_title: "Rails Help, Please? (How to create a login/account system)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "rails-help-please-how-to-create-a-loginaccount-system"
  to_ping: ""
  pinged: ""
  post_modified: "2008-05-30 08:00:23"
  post_modified_gmt: "2008-05-30 15:00:23"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/05/rails-help-please-how-to-create-a-loginaccount-system/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 276
  post_author: 2
  post_date: "2008-06-04 17:55:05"
  post_date_gmt: "2008-06-05 00:55:05"
  post_content: "* I've now \"implemented BLIP in Python\":http://mooseyard.com/hg/hgwebdir.cgi/MYNetwork/file/tip/Python/. That officially makes it cross-platform! If we get a third implementation, can we call it an \"industry standard\"?\n* There's some \"detailed protocol documentation\":http://projects.mooseyard.com/wiki/1/Protocol, too.\n* Also, on \"Steven Frank's recommendation\":http://stevenf.com/archive/bug-tracking-decision.php, I set up the \"Redmine\":http://redmine.org project tracker \"on my website\":http://projects.mooseyard.com/projects/show/1. It's pretty slick! Kind of \"Trac On Rails\"."
  post_title: "BLIP news (Python! Detailed spec!)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "blip-news-python-detailed-spec"
  to_ping: ""
  pinged: ""
  post_modified: "2008-06-04 17:55:05"
  post_modified_gmt: "2008-06-05 00:55:05"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/06/blip-news-python-detailed-spec/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 277
  post_author: 2
  post_date: "2008-06-17 18:09:30"
  post_date_gmt: "2008-06-18 01:09:30"
  post_content: "I just discovered that there is an \"ECMAScript 4\":http://www.ecmascript.org/ -- better known as JavaScript 2.0 -- in development. As a shameless language slut, I immediately dove into the \"language overview\":http://www.ecmascript.org/es4/spec/overview.pdf, and it's pretty neat.\n\nThis turns JavaScript into a much more useable language, that I could see doing serious development in. I'm well aware that today's JS isn't a \"toy\", that it's got an interesting prototype-based object model under the hood; but I've found the language so loose as to be difficult to use. This new version adds a full class model, much better support for iteration, a form of generators/coroutines, and more.\n\nIntriguingly, it also offers type-checking, which has been absent from most mainstream dynamic languages. I know it's trendy to use \"duck typing\", but I find that languages with no compile-time type-checking frustrate me because I make so damn many mistakes that aren't caught until runtime; which means things I could have fixed in two minutes in C++ or Objective-C take half an hour to fix as I run the program over, and over, and over, discovering and fixing one problem at a time.\n\nGiven the concurrent \"developments in Apple's JavaScript interpreter\":http://webkit.org/blog/189/announcing-squirrelfish/, I'm getting pretty excited for JavaScript. I hope that in addition to making it blindingly fast, Apple will also add ECMAScript 4 support, and make it easy to access the language outside of a WebView."
  post_title: "JavaScript 2.0, aka ECMAScript 4"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "javascript-20-aka-ecmascript-4"
  to_ping: ""
  pinged: ""
  post_modified: "2008-06-17 18:09:30"
  post_modified_gmt: "2008-06-18 01:09:30"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/06/javascript-20-aka-ecmascript-4/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 278
  post_author: 2
  post_date: "2008-07-04 10:17:01"
  post_date_gmt: "2008-07-04 17:17:01"
  post_content: "I just had an interesting idea, brought on by a post to an Apple developer list asking about software-update mechanisms for Mac applications. The library everyone uses for this is \"Sparkle\":http://sparkle.andymatuschak.org/, which is wonderful in all ways _except_ bandwidth usage: it updates the app by downloading an entire zip archive of the new version. With many apps nowadays being 10MB or even 100MB downloads, that's pretty significant.\n\nThis could clearly be improved a lot by downloading a \"delta\":http://en.wikipedia.org/wiki/Delta_encoding instead, then using that to patch the current copy of the app. In most cases, using a good algorithm like \"xdelta3\":http://xdelta.org or \"zdelta\":http://cis.poly.edu/zdelta/, the data transmitted will be orders of magnitude smaller than the entire app. (Nothing new here; many app updaters already do this, especially for games, and Microsoft apparently has \"some sophisticated delta-based software update tools\":http://en.wikipedia.org/wiki/Remote_Differential_Compression in Windows.)\n\nOf course, the delta to be downloaded is specific to which version of the program you already have, as well as which one you're updating to. This means the server will need to keep a number of deltas on hand, and it and the client need to negotiate which one to use.\n\nAn additional problem with using deltas for updating Mac applications is that, on OS X, an app isn't a single file but a directory tree masquerading as a file. This means that a patch would have to consist of a tree of deltas, one per file.\n\nI started toying with ways of implementing this, but a minute later my brain chimed in with the observation _\"Hey Jens! This is just like what a version-control system does when updating a working tree from a repository!\"_ That's what I love about my brain: some fraction of the factoids I cram into it daily will percolate inside and pop out later on at some useful moment. Thanks, brain!\n\nh2. Here's My Idea.\n\nRelease your application in the form of a working tree of a distributed version-control system [DVCS] like \"Mercurial\":http://selenic.com/mercurial (or \"Git\":http://git.or.cz/, if you must.) That is, the app bundle's \"Contents\" directory has a \".hg\" subdirectory containing the usual Mercurial metadata. This is sort of unusual in that you've checked in the compiled app rather than the source code; but modern DVCSs work fine with binary files.\n\nYou also maintain on your server a repository containing all the versions of the application. Whenever you release a new version, you simply check it into that repository as an update of the previous release.\n\nNow, when a copy of the app wants to update itself, it simply does an \"hg pull\" (or equivalent) of itself from the repository URL. This efficiently determines which files have changed and, for each file, which deltas to download an apply. And it does this without affecting the running app, because the deltas go into the metadata in the \".hg\" directory. Then when the pull is complete, the app can prompt the user that it's time to relaunch, then run \"hg update\" to patch the actual files and quit and re-launch itself.\n\nThis has a number of really nice features:\n\n# Checking whether an update is present is quick (DVCS's are optimized for this).\n# Downloading updates uses minimal bandwidth because only compressed deltas are sent.\n# The DVCS automatically handles updating from any old version.\n# Users can even _downgrade_ easily to previous versions. (In fact, switching between previously-downloaded versions can be done offline, since the DVCS metadata retains all the necessary diffs!)\n# This mechanism can easily handle beta versions. By treating a beta as a branch, betas can easily be made \"opt-in\", with users able to switch between beta and stable mode.\n# If one user has downloaded an update, another nearby user could efficiently apply the update by pulling directly from that user's copy of the app over the LAN, instead of having to go back to the original server. (Or alternatively, the DVCS can package the update into a patch-file that can be sent to the other computer and applied there.)\n\nThe only drawbacks I can see to this are:\n\n# The DVCS software needs to be available on every user's machine. Since none of these ship with the OS, it would probably have to be packaged inside the app as part of the software-update library. That's a significant amount of code (Mercurial is about 2MB, and I think Git is a lot bigger.)\n# The local app's revision metadata is a full repository that includes prior versions. You clearly don't want to ship it that way. I believe DVCSs all support a way of pruning old revisions from a repository, though.\n\nI'm not promising to implement this, but it's so cool that _someone_ needs to give it a try. And if it's been done already, I'd be interested to hear about how well it worked."
  post_title: "Doing application updates via version-control"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "doing-application-updates-via-version-control"
  to_ping: ""
  pinged: ""
  post_modified: "2008-07-04 10:17:01"
  post_modified_gmt: "2008-07-04 17:17:01"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/07/doing-application-updates-via-version-control/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 38
-
  ID: 279
  post_author: 2
  post_date: "2008-07-14 09:06:38"
  post_date_gmt: "2008-07-14 16:06:38"
  post_content: "(This is more or less to the tune of \"Rock'n'Roll High School\":http://youtube.com/watch?v=AE6w4RERMeI, or any other Ramones song for that matter. You have to imagine Joey Ramone singing it. Johnny, you just \"switch between C and F every couple of lines\":http://www.guitaretab.com/r/ramones/15557.html, got it?)\n\nWell, back in March I got my feelins hurt\nWhen Apple wouldn't gimme no developer cert\nThe SDK they gave me had a \"simulator\" â€”\nFooled around with it, then said \"see you lator!\"\n\n(iPhone, iPhone, iPhone developer)\n\nDon't care about iPhones on my screen\n'Cause that's not where I wanna been\nI just wanna run on the Device\nI just wanna make it look nice\n\n(I wanna be, an iPhone developer)\n\nOn Friday all the lucky devs they got paid\nBut my real cert came in the email today\nGot my key set up, my device provisioned\nGot my noob questions sent to the cocoa-dev list\n\n(iPhone, iPhone, iPhone developer)\n\nNow I R a l33t iPhone developx0r\nGonna sell my app at the iPhone App Store\nI'm gonna price it at 99 cents\nIn a couple weeks, it'll be payin' my rent!\n\n(L33t, l33t, l33t, l33t iPhone developx0r)\n\nMy app's so rad, it's got things to-do\nWhen you go to White Castle it'll get your tip too\nGonna raise it to a buck ninety-nine\nWhen all of you buy it, I'll be doin' fine!\n\n(L33t, l33t, l33t, l33t iPhone developx0r)\n\nNow I finished my app, I put old books in it too,\nPlus some Texas Hold'em and a sudoku\nIt'll even tell you 'bout the stars at night\nAnd a bright white screen makes a bitchen flashlight!\n\nI put it on the store for twenty-nine bucks,\nBut the reviews are all \"D00D, UR APP IS TEH SUX! ! ! !\"\n\n(L33t, l33t, l33t, l33t iPhone developx0r...)"
  post_title: "The Ramones Sing iPhone Development"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-ramones-sing-iphone-development"
  to_ping: ""
  pinged: ""
  post_modified: "2008-07-14 09:06:38"
  post_modified_gmt: "2008-07-14 16:06:38"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/07/the-ramones-sing-iphone-development/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 280
  post_author: 2
  post_date: "2008-07-14 12:16:15"
  post_date_gmt: "2008-07-14 19:16:15"
  post_content: "I need a few brave people to test a pre-beta app for me. No, this is not Cloudy; it's another app I've been working on in parallel. It's called *Your Move*, and it's the expanded version of my \"GeekGameBoard\":http://bitbucket.org/snej/geekgameboard/ sample code. It lets you play board games against a human opponent; either at the same machine, over a local network, or by sending moves via email or iChat.\n<div style=\"text-align:center;\"><img src=\"http://mooseyard.com/Jens/wp-content/uploads/2008/07//YourMovePreview.jpg\" alt=\"YourMovePreview.jpg\" border=\"0\" width=\"503\" height=\"438\" /></div>\nObviously this would make a great iPhone app, and now that I have my iPhone developer certification I'll start working on that. But for now it's Mac-only.\n\nTo test Your Move you need to\n\n* Have Mac OS X 10.5.\n* Enjoy playing board games ... in particular, Go and/or American checkers, as those are the main games it knows so far.\n* Have at least one friend who will play board games with you (I'll do in a pinch, but I don't have time to play against everyone. Plus, ironically, I suck at Go and checkers.)\n* Be willing to tolerate bugs, and committed to sending in bug reports, crash logs and such.\n\nIf you're interested, please\n\n# Register an account on the \"Mooseyard projects website\":http://projects.mooseyard.com ; then\n# Email me at \"jens\" c/o this domain and tell me your username, so I can give you access to the project.\n\nThanks!"
  post_title: "Testers Wanted"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "testers-wanted"
  to_ping: ""
  pinged: ""
  post_modified: "2008-07-14 12:16:15"
  post_modified_gmt: "2008-07-14 19:16:15"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/07/testers-wanted/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 281
  post_author: 2
  post_date: "2008-08-01 11:27:49"
  post_date_gmt: "2008-08-01 18:27:49"
  post_content: "Sometimes it's nice to make physical objects. It's usually messier and more time-consuming than doing it on the computer, but in the end you have something you can actually touch.\n\nEver since I saw P. D. Magnus's \"Decktet\":http://www.fecundity.com/pmagnus/decktet/ -- a whimsical yet mysterious deck of cards for games or divination -- I wanted one of my own. However, the Decktet is currently only available as a PDF, so any physical manifestation has to be of a DIY nature.\n\n!http://www.fecundity.com/pmagnus/decktet/card/19.gif! !http://www.fecundity.com/pmagnus/decktet/card/21.gif!\n\nThe deck has 36 cards (plus the optional \"The Excuse\"), of six suits, and its most unusual feature is that the number cards each have _two_ suits. (There are also single-suited Aces and Kings.) This obviously adds a lot of interesting possibilities for games.\n\nMagnus has \"given each suit a symbolic meaning\":http://www.fecundity.com/pmagnus/decktet/fortune.php, as well as a color, and done a good job integrating them into each card. For example, the Penitent (see above) combines the green color and violent connotations of the Wyrms suit with the orange and \"decisive action and clarity of purpose\" of Suns; while the Market combines Wood's \"gift of the earth ... raw materials and food products\" with Knots' \"craft, skill ... commerce and money\".\n\n(I should add that I am not a believer in the supernatural. I love tarot cards, and own the rare \"Hello Kitty deck\":http://www.aeclectic.net/tarot/cards/hello-kitty/index.shtml#cards as well as the usual \"Rider-Waite-Smith\":http://www.aeclectic.net/tarot/cards/rider-waite/ ; but I see these as a combination of _objets d'art_ and Rorschach blots. They're lovely and spooky and meaningful, but what you get out of them is coming from the depths of your own mind, which is I think just as mysterious as any Astral Plane.)\n\nh3. How To Do It\n\nFortunately I already knew where to get \"printable blank playing cards\":http://plaincards.com. I ordered the \"both-sides-blank variety and the magic coating spray\":http://www.plaincards.com/Store/shopdisplayproducts.asp?id=46&cat=Kits+To+Make+Coated+Playing+%0D%0ACards+%2D+%0D%0AOnly+Ships+to+Continental+U%2ES%2E. While waiting for the package, I adapted the Decktet PDF into the right layout for these cards, which was kind of a pain (does anyone know of a tool for cutting/pasting/cropping parts of PDFs?)\n\n* \"Printable PDF Decktet for PlainCards\":http://mooseyard.com/Pictures/Games/Decktet_for_PlainCards.pdf\n* \"The same, in original iWork format\":http://mooseyard.com/Pictures/Games/Decktet%20for%20PlainCards.pages.zip\n\nThen after the mail came, I carefully printed out each sheet of cards (the plain-paper setting worked best), fed them back in upside-down to print the backs, then held my breath while spraying sickly-sweet poisonous volatile plastic vapor over the sheets.\n\nAfter an hour or so to dry, the cards were ready to punch out. The paper is micro-perforated (like those Avery business card sheets) so the edges come out very cleanly after you bend the perforations back and forth a few times. And voila...\n\nh3. The Cards!\n\n<div style=\"text-align:center;\"><img src=\"http://mooseyard.com/Jens/wp-content/uploads/2008/07//My Decktet 2.jpg\" alt=\"My Decktet 2.jpg\" border=\"0\" width=\"550\" height=\"412\" /></div>\n\nJust like real playing cards! I love coding, but you can't hold a set of methods in your hand like that.\n\n<div style=\"text-align:center;\"><img src=\"http://mooseyard.com/Jens/wp-content/uploads/2008/07//My Decktet 1.jpg\" alt=\"My Decktet 1.jpg\" border=\"0\" width=\"550\" height=\"412\" /></div>\n\nThe cards are shiny, and slippery enough to shuffle well, though they're not as slick as a new pack of commercial cards. The edges are a little bit rough from the perforations, but not unpleasantly so. A few of the edges got a little bent while being detached. The cloying smell of toluene and acetone is dissipating.\n\nNow I can use my Decktet! Should I tell my fortune first, or play a game of \"Window\":http://www.fecundity.com/pmagnus/decktet/window.php ?"
  post_title: "I Made A Decktet"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "i-made-a-decktet"
  to_ping: ""
  pinged: ""
  post_modified: "2008-08-01 11:27:49"
  post_modified_gmt: "2008-08-01 18:27:49"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/08/i-made-a-decktet/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 282
  post_author: 2
  post_date: "2008-08-03 11:23:09"
  post_date_gmt: "2008-08-03 18:23:09"
  post_content: "\"My Decktet\":http://mooseyard.com/Jens/2008/08/i-made-a-decktet/ is a thing of beauty. I even printed & assembled the box (an activity that took me back to my happy childhood days of making paper polyhedra models.)\n\nThe only problem is that the cards still have a faint sickly-sweet stink of toluene and acetone (from the plastic coating) even after I left them spread out on the floor for a few days. It's quite unpleasant, not like the nice smell of new books, cars or boardgames.\n\nIs this the papercraft equivalent of \"Code Smell\":http://en.wikipedia.org/wiki/Code_smell?"
  post_title: "That New-Cards Smell"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "that-new-cards-smell"
  to_ping: ""
  pinged: ""
  post_modified: "2008-08-03 11:23:09"
  post_modified_gmt: "2008-08-03 18:23:09"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/08/that-new-cards-smell/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 283
  post_author: 2
  post_date: "2008-08-03 21:08:05"
  post_date_gmt: "2008-08-04 04:08:05"
  post_content: "I hung out with \"Ricci\":http://iccir.com this afternoon. I brought along my \"Decktet\":http://fecundity.com/pmagnus/decktet/, and we tried some of the games, then decided to make up one of our own. I suggested adapting \"Crazy Eights\":http://en.wikipedia.org/wiki/Crazy_eights to this weird double-suited deck; a direct adaptation didn't do too well on its own (it was too easy to get rid of cards), but Ricci had an idea that worked brilliantly, of incurring penalties for repeating suits.\n\nThen I came home and \"wrote down the rules\":http://mooseyard.com/Jens/rules-of-quasenbo/ ... Give it a try! (Don't believe a word of the historical background, though! I just made it up, and stole the great nonsense word \"quÃ¤senbÃ¶\" from an old Roz Chast cartoon.)"
  post_title: "QuÃ¤senbÃ¶: a new Decktet game"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "quasenbo-a-new-decktet-game"
  to_ping: ""
  pinged: ""
  post_modified: "2008-08-03 21:08:05"
  post_modified_gmt: "2008-08-04 04:08:05"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/08/quasenbo-a-new-decktet-game/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 284
  post_author: 2
  post_date: "2008-08-09 13:15:31"
  post_date_gmt: "2008-08-09 20:15:31"
  post_content: "I'm fooling around with \"*Soup*\":http://www.soup.io, a newish micro-blogging service I just discovered. I've never signed up for tumblr or its other clones, but I'm kind of smitten with Soup, so I set up my own:\n\n<b>\"beautiful snej soup, yum\":http://snej.soup.io </b>\n\nI've got it aggregating stuff from my del.icio.us, flickr and last.fm accounts, as well as this blog. And I'm directly posting some things I've run across today, via its very nice bookmarklet.\n\nPart of the reason I got sucked in is that *Soup has the single best new-user experience I've ever seen on the web.* You just click the \"try it\" button on the home page, and you get your own soup blog. No signup, no registration, just instant gratification. Then you can slide open the control panel (that slider itself is a beautiful piece of UI), import from your other social sites, and fool with the settings, all in privacy. Only after you're hooked do you need to press the Create button and choose a username and password, whereupon your soup goes live. It's brilliant â€” the web equivalent of the \"untitled document\" UI introduced in the '70s by the Xerox Star.\n\nAnyway, \"*please take a look and join me!*\":http://snej.soup.io (It's not obvious from the untitled-blog experience, but Soup has friends and groups like other social networks.)"
  post_title: "Beautiful snej soup, yum"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "beautiful-snej-soup-yum"
  to_ping: ""
  pinged: ""
  post_modified: "2008-08-09 13:15:31"
  post_modified_gmt: "2008-08-09 20:15:31"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/08/beautiful-snej-soup-yum/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 285
  post_author: 2
  post_date: "2008-08-17 20:24:05"
  post_date_gmt: "2008-08-18 03:24:05"
  post_content: "'Prince McLean', \"writing for AppleInsider\":http://www.appleinsider.com/articles/08/08/15/inside_mobileme_web_3_and_web_client_server_apps.html&page=2:\n\nbq. Data transaction security in MobileMe's web apps is based upon authenticated handling of JSON data exchanges between the self contained JavaScript client apps and Apple's cloud, rather than the SSL web page encryption used by HTTPS. The only real web pages MobileMe exchanges with the server are the HTML, JavaScript, and CSS files that make up the application, which have no need for SSL encryption following the initial user authentication. This has caused some unnecessary panic among web users who have equated their browser's SSL lock icon with web security. And of course, Internet email is not a secured medium anyway once it leaves your server.\n\nbq. If Apple applied SSL encryption in the browser, it would only slow down every data exchange without really improving security, and instead only provide pundits with a false sense of security that distracts from real security threats.\n\nIt's pretty clear to me from this description that (a) McLean doesn't know much about data security or HTTP, and (b) the system he's describing would be patently insecure. And unfortunately, the actual system is just as insecure as I was afraid it was.\n\nThe most glaring problem is that, since the main page resources (HTML and JavaScript) aren't loaded over SSL, there's no way to tell whether they're genuine. By now \"everyone ought to be aware of DNS forgery attacks\":http://www.schneier.com/blog/archives/2008/07/the_dns_vulnera.html ; if the coffeeshop where you've gone online has an infected WiFi router, it would be nice to know whether its DNS record for \"me.com\" points to Apple's servers or to a phishing site. _But without SSL there's no way to tell._ Obviously, if you've loaded a hacked forgery of me.com's web-app, any assurances made about \"authenticated handling of JSON exchanges\" are completely pointless, because your JSON exchanges are probably going straight to a pwned server in Uzbekistan.\n\n(You may object that the initial login page is SSL-protected. It is, but unfortunately it's at a completely different domain, auth.apple.com. A DNS attack on MobileMe would operate by leaving auth.apple.com alone, so you'd be handed off to the fake server _after_ logging in.)\n\nAfter writing the above, I got curious enough to dissect the traffic myself. So I used \"HTTPScoop\":http://tuffcode.com to sniff while I viewed a couple of emails. _Not only is there no SSL authentication, but the requests and responses aren't even encrypted at all._ I could easily read the plaintext of the email messages right in HTTPScoop, which means anyone else on my LAN (or any admin at my ISP or workplace) could easily have read them too. Oops.\n\nThe takeaway from this is that MobileMe's web apps (at least email) are quite insecure â€” they won't protect you against DNS forgery or phishing attacks, and they leave your email traffic wide open for others to read. I would avoid them if at all possible and access your MobileMe content via good old SSL in real desktop mail and calendar clients (such as Mail.app and iCal), rather than blindly trusting Apple's pretty-looking web apps.\n\n(You may raise a second objection, that most email traffic is sent across the Internet unencrypted anyway. But even with unencrypted email, it is much, much easier to eavesdrop on (or alter) traffic over a LAN, especially wireless, than it is to intercept Internet backbone traffic between ISPs. It's the difference between attacking weak, easily accessible infrastructure plugged in by some baristas with little computer experience, vs. hacking into large commercial routers secured in data centers and run by experts.)\n\n<i>[Disclaimer: I am not a security guru. But I've spent quite a bit of time over the past year studying data security and cryptography, and implementing some of the techniques; and honestly, it doesn't take a \"Bruce Schneier\":http://www.schneier.com to simply run a packet sniffer and notice plaintext email traffic.]</i><i></i>"
  post_title: "Re: MobileMe Webmail Security &#8212; There Is None"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "re-mobileme-webmail-security-there-is-none"
  to_ping: ""
  pinged: ""
  post_modified: "2008-08-17 20:24:05"
  post_modified_gmt: "2008-08-18 03:24:05"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/08/re-mobileme-webmail-security-there-is-none/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 21
-
  ID: 125
  post_author: 2
  post_date: "2008-08-03 20:50:32"
  post_date_gmt: "2008-08-04 03:50:32"
  post_content: "_by \"Jens Alfke\":/Jens & \"Ricci Adams\":http://iccir.com _\n\n*QuÃ¤senbÃ¶* is a \"*Decktet*\":http://fecundity.com/pmagnus/decktet/ game for two or more players, a more complex ancestor of Crazy Eights.\n\n!/Pictures/Games/DecktetCardsSmall.jpg!\n\nh3. History\n\nQuÃ¤senbÃ¶ was a popular game at the court of the badger Charlemagne. Its name means \"too many\". The theme is thought to reflect political issues of royal succession in the many small kingdoms of the Empire; although some feminist historians believe it instead derives from the quÃ¤senbÃ¶ pan, a cast-iron skillet capable of turning out vast numbers of spÃ¤tzle at a time.\n\nh3. Object of the game\n\nTo end your turn with no cards in your hand.\n\nh3. Setup\n\nShuffle the Decktet, including the Excuse card. Deal each player seven cards, and turn up the top card of the deck to start the play pile.\n\nh3. Game play\n\nOn your turn, you must play a card that has either a suit or a rank in common with the top card of the play pile. Put the card on top of the play pile, but slightly offset, so the previous two cards can still be seen.\n\n_Sevens are wild:_ you can always play a seven, whether or not it matches the top card. The next player then has to match its suits (or play another seven, of course.)\n\n_The Excuse is even wilder:_ you can always play it, and you get to decree what (single) suit it has, which the next player must follow.\n\n_If you cannot play any card,_ you must draw cards from the deck, one by one, until you draw one you can play. (If the deck runs out, take all but the top two cards of the play pile, shuffle them, and use them as the new deck.)\n\nIf the card you played has a suit in common with the previous _two_ cards of the play pile (that is, if it causes the same suit to appear three times in a row), you have _committed a quÃ¤senbÃ¶_, and must draw a card as a penalty. In the spirit of the game, you and/or the other player(s) should call out \"QuÃ¤senbÃ¶!\" when this happens. Repeated _ranks_ do not cause a quÃ¤senbÃ¶, however.\n\nIt may happen that in playing your _final_ card, you commit a quÃ¤senbÃ¶ and have to draw another one. This means you have _not_ won the game, since you did not end your turn with zero cards!\n\nh3. Notes on Tactics\n\nAces and Crowns, having a single suit, are valuable because they form a bottleneck that limits what cards can be played next. Moreover, if the Ace/Crown you play followed suit, then the next player will incur a quÃ¤senbÃ¶ unless she can play a different Ace/Crown.\n\nThe quÃ¤senbÃ¶ rule makes it harder to get rid of multiple cards of the same suit, compared to Crazy Eights. This balances out the way the multi-suited cards make it easier to play a matching card.\n\nh3. Variations\n\nWe have not yet tried the game with more than three players. You would probably need to reduce the number of cards per player. Let me know how it goes.\n\nYou can make the game somewhat less wild by removing the Excuse.\n\nDouble QuÃ¤senbÃ¶: Increase the penalty to two cards if a suit repeats four times in a row (and three cards for five times, etc.)\n\nFor increased historical verisimilitude, you can throw spÃ¤tzle at a player who commits a quÃ¤senbÃ¶. A player committing a double quÃ¤senbÃ¶ (if you play with that variant) should be dragged from the room and thrown headfirst into the moat."
  post_title: "Rules of QuÃ¤senbÃ¶"
  post_excerpt: ""
  post_status: "static"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "rules-of-quasenbo"
  to_ping: ""
  pinged: ""
  post_modified: "2008-08-03 20:50:32"
  post_modified_gmt: "2008-08-04 03:50:32"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/rules-of-quasenbo/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 286
  post_author: 2
  post_date: "2008-08-17 22:38:03"
  post_date_gmt: "2008-08-18 05:38:03"
  post_content: "FYI, I ended up taking the position at Google. I started two weeks ago, and it's been quite exciting, despite (or because of) the \"drinking from a fire-hose\" aspect of learning my way around the big G.\n\nI'm on the \"Google Sites\":http://sites.google.com team. I've been interested in wikis for years, and now I get to actually work on one. (Although Sites, nÃ©e JotSpot, is not a typical wiki.)\n\nI could write a lot about my experience of Google so far. It's quite an interesting place. Merely learning about how some of their internal systems operate has been jaw-dropping. (Do you have any idea how much hard disk space Google has? Or how many CPUs? Or how many search queries they handle? Unfortunately I don't think I'm allowed to tell...)\n\nFor now I just wanted to say that I'm not in the job market anymore. Also, that I really like all the free food :-d"
  post_title: "Career update"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "career-update"
  to_ping: ""
  pinged: ""
  post_modified: "2008-08-17 22:38:03"
  post_modified_gmt: "2008-08-18 05:38:03"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/08/career-update/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 11
-
  ID: 287
  post_author: 2
  post_date: "2008-08-30 07:59:33"
  post_date_gmt: "2008-08-30 14:59:33"
  post_content: "\"Chris Lattner, of Apple's compiler team, writes\":http://lists.cs.uiuc.edu/pipermail/cfe-dev/2008-August/002670.html :\n\n<blockquote>Until there is more real documentation, this is a basic idea of Blocks: it is <a href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\">closures</a> for C.  It lets you pass around units of computation that can be executed later.  For example:\n\n<pre>void call_a_block(void (^blockptr)(int)) {\n   blockptr(4);\n}\n\nvoid test() {\n   int X = ...\n   call_a_block(^(int y){ print(X+y); });  // references stack var\nsnapshot\n\n   call_a_block(^(int y){ print(y*y); });\n}</pre>\n\nIn this example, when the first block is formed, it snapshots the value of X into the block and builds a small structure on the stack. Passing the block pointer down to call_a_block passes a pointer to this stack object.  Invoking a block (with function call syntax) loads the relevant info out of the struct and calls it.  call_a_block can obviously be passed different blocks as long as they have the same type.</blockquote>\n\nThis is very exciting: it's the kind of new abstraction the C family has needed for years. As you know if you've worked in Ruby or Python or Smalltalk or any functional language, the ability to declare an anonymous function inline, and pass it as a parameter to another function, opens the door to creating new and useful control structures. Blocks are to control structures as <tt>struct</tt> is to data structures.\n\nFor example, one of the things that blew my mind about Smalltalk-80 when I first learned it was how the basic conditional and loop operations were not hardwired into the language; instead, they were just methods of built-in classes. For example:\n\n<pre>root := y>=0 ifTrue: [y sqrt] ifFalse: [-1]</pre>\n\n(Apologies if I've messed up the syntax; it's been a long time.) Yes, this is an if-then-else expression. But literally, it's the message <tt>ifTrue:ifFalse:</tt> being sent to the (boolean) result of the expression <tt>y>0</tt>, with its parameters being two blocks. And what happens at runtime is that the class <tt>True</tt> implements <tt>ifTrue:ifFalse:</tt> by evaluating the _first_ block parameter and returning its value, while the class <tt>False</tt> implements it by evaluating the _second_ block.\n\nThis is, not surprisingly, a bit too expensive a way to implement the ubiquitous if-then-else, so in practice the compiler optimizes this expression into hardwired bytecodes instead. But it demonstrates that you can define comparable control structures yourself for your own purposes ... such as for URL routing in a web application, which many Ruby and Python frameworks allow to be customized with blocks.\n\nI think blocks will also make it possible to implement better concurrency patterns like Actors in a clean way. You may recall that I was investigating these, but after a few days I gave up because the necessary stack munging confused the Obj-C runtime too much. Once blocks are available (and hopefully integrated into Objective-C and Foundation) I'll have to give it another try."
  post_title: "Blocks/Closures For C!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "blocksclosures-for-c"
  to_ping: ""
  pinged: ""
  post_modified: "2008-08-30 07:59:33"
  post_modified_gmt: "2008-08-30 14:59:33"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/08/blocksclosures-for-c/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 288
  post_author: 2
  post_date: "2008-09-03 10:27:11"
  post_date_gmt: "2008-09-03 17:27:11"
  post_content: "I haven't used Chrome yet, though I know people who work on it, and it looks like a good browser with some good new ideas. But I'm unsure of the benefits of one of its main talking points: that what web applications really need is to have less browser \"chrome\" around them. As I put it in an IM to Julian Missig yesterday:\n\nbq. I think the problem isn't that the browser chrome has too much [UI], it's that the apps inside have _too little_.\n\nToo little what? What are the web apps lacking? Since you ask:\n\n*A menu bar.* Despite today's fashion to get rid of them, menu bars are really useful. They're a great interface for discovering the capabilities of an app, and for accessing rarely-used but important features. That's why they were invented. Denied standard menus, web apps have tended either to splatter buttons all over the screen, or implement their own menus out of DHTML (usually doing a terrible job of even basic usability.) Keyboard shortcuts, if present, are divorced from menus so they're not discoverable; and on the Mac at least, they awkwardly use a different modifier key (Ctrl, vs. Cmd) than \"real\" shortcuts.\n\n*A filing system.* Web apps let you manage content, which often takes the form of documents, aka files (word processing, pictures, etc.), but there's no standard mechanism to manage these files -- the whole document model introduced by the \"Xerox Star\":http://www.digibarn.com/friends/curbow/star/retrospect/ and popularized by the Mac's Finder doesn't exist. Instead each such web-app has its own incompatible (and mostly lame) way to list, rename, copy or delete documents. If you're lucky, it will support some modern conveniences like direct manipulation or a trash. What none of them give you is interoperability: if you want to take a document from one web-app, like Flickr, and manipulate it using a different app, like GMail or Photoshop Express, you can't drag it across, or even use a standard file picker dialog box. Your only options are to copy and paste a long cryptic URL (and deal with cross-site authentication), or to take the document on a scenic detour through your computer's _real_ filesystem, downloading it from one app and uploading it to the other.\n\n*Offline access.* There are in fact still times when your computer doesn't have access to a network. (Even at Ã¼ber-connected Google, the commuter buses are prone to WiFi outages.) Or the network might just be infuriatingly slow or laggy. Losing access to your data in those situations is bad. Particularly in the case of email, I've been spoiled by IMAP, and Mail.app's excellent offline support, long enough that the idea of using webmail is a complete non-starter for me. (This problem, fortunately, _is_ being addressed, both in the form of Google Gears and in the parallel, but hopefully converging, offline-storage functionality being drafted for HTML 5.)\n\n*More than four fonts.* The last time I had only four fonts available for documents was in 1985, before the LaserWriter Plus arrived. Currently on my computer I have an embarrassing overabundance, several hundred. Too bad web apps can't actually discover what fonts are installed; instead they fall back on the deathly dull overused set of \"safe\" fonts like Times and Arial.\n\nI'm sure there's more to add to this list, but I'll stop now. Suffice it to say that in too many ways web-apps are still like the Emperor's new clothes, or like Samuel Johnson's dog walking on its hind legs (\"it is not done well; but you are surprised to find it done at all\"), and the enthusiasm for them often seems to be proportional to the shittiness of the native UI of the enthusiast's OS platform of choice. (I first noticed this during my brief stint at Sun, whose workstations all ran \"Motif\":http://en.wikipedia.org/wiki/Image:Openmotif_screenshot.png, which made even Web 1.0 UIs look like a lovely opium dream by comparison.)\n\nDon't get me wrong, some web apps are great, and they all have a lot of potential, but taking away features from the browser wasn't high on my list of what they chiefly need."
  post_title: "Web Apps Need More UI, Not Less"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "web-apps-need-more-ui-not-less"
  to_ping: ""
  pinged: ""
  post_modified: "2008-09-03 10:27:11"
  post_modified_gmt: "2008-09-03 17:27:11"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/09/web-apps-need-more-ui-not-less/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 289
  post_author: 2
  post_date: "2008-11-13 15:47:38"
  post_date_gmt: "2008-11-13 22:47:38"
  post_content: "I like board games, and I'd like to play some against my iPhone. (My secret shame is that I'm actually rather bad at board games, but the silver lining is that it doesn't take much of an AI to provide me with a challenge!) The \"Board Games\":http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewGenre?id=7004&mt=8 sub-category of the iPhone App Store has over 300 offerings. But if you filter out the ones that are really single-player puzzles, or that only let humans play each other, or that implement chess or checkers [neither of which I like] ... there aren't many left.\n\nEspecially if you then filter out the many duplicates. For example, I'm surprised at how many versions of \"Ataxx\":http://www.pressibus.org/ataxx/indexgb.html there are. Ataxx is a fairly obscure game (at least I thought it was!) but there are at least four different clones of it on the store, including a new one called \"Spoilage\":http://www.spoilagegame.com/ that just showed up. Why is that? Don't get me wrong, Ataxx is a really good game, with simple but unusual mechanics, and good tactical difficulty despite its short play time. I've played it online and I have iBacteria on my iPhone.\n\nBut why are so many developers picking the same game? With a better-known game like chess, checkers, Go or Othello/Reversi, I can understand going for the name recognition. But those wanting to develop different abstract strategy games have literally thousands to choose from. Don't believe me? Peruse my\n\nh3. Big List Of Abstract Board Games You Should Implement And Sell Me:\n\n* Dieter Stein's games \"Accasta\":http://accasta.com/, \"Abande\":http://abande.com/ and \"Attangle\":http://attangle.com/ form a trilogy, as they have similar mechanics and can be played on the same board (your choice of hexagonal or square). Of these, \"Abande\":http://abande.com/ is my favorite, and one of my favorite abstract board games overall.\n* \"Cameron Browne\":http://www.cameronius.com/ has designed dozens of brain-twisting games with a topological flavor -- \"Truchet\":http://members.optusnet.com.au/helen.gilbert/truchet-game/ is a great example, with a _really cool looking_ board.\n* Dutch mathematician Christian Freeling has developed many very interesting games, which are described on his \"MindSports\":http://www.mindsports.nl/index.php/side-dishes/more-games-by-cf website.\n* \"Arimaa\":http://arimaa.com/arimaa/ is a fairly new chess-like game with some _very_ strange mechanics, where pieces can push and pull opposing pieces into holes to defeat them.\n* \"Mark Steere\":http://www.marksteeregames.com/index.html has a good-sized collection of board games too.\n* \"Phutball\":http://en.wikipedia.org/wiki/Phutball, aka \"Philosopher's Football\" is an interesting game with a loose soccer theme, invented by eminent mathematicians Elwyn Berlekamp, John Horton Conway, and Richard Guy.\n* \"Board Game Design Competition Winners\":http://boardgames.about.com/od/freeboardcardgames/a/design_winners.htm from boardgames.about.com. (My favorite of these is \"Symbio\":http://boardgames.about.com/library/games/on/bl-8x8-symbio.htm.)\n* The \"Piecepack\":http://www.piecepack.org/ game system has a ton of games written for it.\n* ...and if those aren't enough, there's the \"World Of Abstract Games\":http://homepages.di.fc.ul.pt/~jpn/gv/ website, which compiles literally hundreds of games, old and new, neatly categorized.\n\nSo please! Go develop some of these, and sell them on the App Store, and I'll buy them! (Especially Abande. I really want a patient Abande opponent to help me improve my play!)\n\nEven if you're not a game developer, most of these games are easy to play with boards you either have already or can print out. (And if you have access to a laser-cutter, \"so much the better\":http://www.flickr.com/photos/snej/2885410708/...)\n\n<hr />\n\nbq. *Footnote:* I haven't mentioned Go. I really like Go, although I'm miserable at it, and every time a Go-related app comes out I read its description eagerly; but so far none of them have AI play. They either let two humans play each other, or they merely play back saved Go matches to study. I suspect there's a technical problem here: Go is notoriously difficult to program AI for, and the only readily available implementation I know of is GNU Go. But this is GPL-licensed, and it wouldn't surprise me at all if the GPL were fundamentally incompatible with the iPhone's application model, since it's impossible to modify or recompile other people's apps. Anyone know for sure?\n\nbq. *Footnote 2:* And WTF is up with all the tic-tac-toe apps? News flash, everyone: _Tic-Tac-Toe has been solved!_ No one ever wins a game if played correctly, and anyone with the brains to operate an iPhone should be able to play correctly. So what's the appeal? Are parents buying it as an easy way to win against their four-year-old kids?"
  post_title: "Let&#8217;s have some different iPhone board games!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "lets-have-some-different-iphone-board-games"
  to_ping: ""
  pinged: ""
  post_modified: "2008-11-13 15:47:38"
  post_modified_gmt: "2008-11-13 22:47:38"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/11/lets-have-some-different-iphone-board-games/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 18
-
  ID: 290
  post_author: 2
  post_date: "2008-12-02 10:11:18"
  post_date_gmt: "2008-12-02 17:11:18"
  post_content: "* A great iPhone board game that _isn't_ Attax!\n* Can you and your friends survive an hour on a tiny sinking cardboard submarine that's running out of air and vodka?\n* New developments with the coolest deck of cards no one's heard of!\n* And the return of Rogue, last seen (by me) on a VAX 11/750!\n\nh2. Hexy\n\n<img src=\"http://blog.bigzaphod.org/wp-content/uploads/newshot2.jpg\" align=\"right\" width=\"240\" style=\"padding-left: 12px\"/>I'm happy to say there's now an excellent implementation of Hex for the iPhone, named \"*Hexy*\":http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=297408435&mt=8. I'm sure \"my recent call for more diversity in iPhone board games\":http://mooseyard.com/Jens/2008/11/lets-have-some-different-iphone-board-games/ was entirely responsible for this, even though \"the authors claim\":http://blog.bigzaphod.org/2008/11/20/bringing-hexy-back/ it's been in development for months.\n\n\"Hex\":http://www.hexwiki.org/ dates from the 1940s. Two players alternate playing stones on a diamond-shaped grid of hexagons; one is trying to build a connection between the left and right edges, the other between the top and bottom. That's it. Despite the trivial rules, the gameplay is fun and interesting. You'll quickly discover basic principles like \"bridges\" and \"ladders\", but there's a lot more \"strategy\":http://www.hexwiki.org/index.php?title=Basic_%28strategy_guide%29 to learn.\n\n(An interesting factoid about Hex is that it was proved early on that there is an infallible winning strategy for the first player; but the proof says nothing about what that strategy is! Small board sizes have been solved, but at the sizes that people typically play, starting at 11x11, no sure-fire strategy is known, so the game is still interesting to play.)\n\nHexy lets you play solo against an AI, or against another human either on the same iPhone or over a local network. I've played three games against the AI, and won two; as I'm a rank novice, this indicates the AI may not be that strong. On the other hand, it was nice not to be crushed like a bug! And I haven't tried the larger boards, which are supposed to be more difficult.\n\nThe presentation is quite elegant. The graphics are subtle but pretty, with a very legible board, and some subliminal translucent hexagons floating by behind it. But every once in a while a cartoon bee flies by, which I find sort of distracting. My only real wish is that the board could be rotated slightly so it would fit better onto the iPhone screen, making scrolling or zooming less necessary.\n\nHexy costs $3.99, which is a bit more than many iPhone games, but if you've already got \"an Attax game\":http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=287942062&mt=8, and are bored of checkers and tic-tac-toe, I think it's one of your best options for another solid strategy game.\n\nh2. Red November\n\nBoard games have common, overused themes, just like their video cousins. There are any number of games about ancient Egypt, about Renaissance Italian merchants, about railroads or zombies or space empires. Some of these are excellent games, but it gets to the point where you wish designers would show more originality.\n\n\"Bruno Faidutti\":http://www.faidutti.com had the highly original, if macabre, idea of making a board game based on the \"Kursk disaster\":http://en.wikipedia.org/wiki/Kursk_submarine, in which a Russian nuclear submarine sank to the bottom of the sea after an onboard explosion, and the whole crew died before rescuers could arrive. It would be a cooperative game, where the players work together to repair damage, put out fires, and try to stay alive for a specified number of turns.\n\n<img src=\"http://www.faidutti.com/rednovember/screen.jpg\" align=\"right\"  style=\"padding-left: 12px\" width=\"240\"/>Unfortunately, all the publishers he showed his prototype to turned it down, saying the theme was too depressing. (Frankly, I agree.) So in another brilliant move, he re-spun it slightly: the game, retitled \"*Red November*\":http://new.fantasyflightgames.com/edge_minisite.asp?eidm=36&enmi=Red%20November (\"BGG\":http://boardgamegeek.com/game/36946), is now about Soviet _gnomes_. Alcoholic Soviet gnomes, who need a shot of vodka to fortify themselves to attack leaks or fires, but then need to make saving rolls against passing out on the floor. Plus, an added hazard is a giant \"Kraken\":http://en.wikipedia.org/wiki/Kraken that must be shot from outside the submarine (good luck finding the aqualung.)\n\nIt's actually a lot of fun. The silliness (which is reflected in the artwork) keeps you from thinking about \"Das Boot\" so much; even my kids are fine with it. The game keeps on throwing new randomized emergencies at you every turn, as rooms catch fire or flood, hatches jam, and the reactor overheats. There's a very interesting time-keeping mechanism that allows the characters to run around 'simultaneously', fixing the problems, though the players are really still taking turns. We've won both games we've played -- i.e. we survived till the end of the time track -- though I did tweak a few rules to make things a bit easier for us, to avoid turning the kids against the game ;-)\n\nThe game is \"pretty cheap\":http://www.boardsandbits.com/product_info.php?products_id=21119 (around $20), and comes in a small box the size of a fat paperback, which is impressively densely packed with bits. Getting the box shut again after a game is a strategic exercise in itself! The rules are medium in complexity -- more than Monopoly, but less than D&D. My kids and I found it easy to pick up the basics, but there are some details, like the specific effects of flooded rooms, that take some memorization. All in all, it's one of the best board games I've bought in a while, definitely recommended (for the non-claustrophobic.)\n\nh2. Decktet News\n\n<img src=\"http://decktet.wikidot.com/local--files/intro/19.gif\" align=\"right\"  style=\"padding-left: 12px\"/>\"*The Decktet*\":http://www.fecundity.com/pmagnus/decktet/ is this new deck of cards \"I first wrote about\":http://mooseyard.com/Jens/2008/08/i-made-a-decktet/ a few months ago while I was making my own copy. It combines an interesting new mechanic (multiple suits per card) that's fertile ground for designing games, and whimsical but enigmatic illustrations that have a \"Tarot-like symbolism\":http://www.fecundity.com/pmagnus/decktet/fortune.php.\n\nSince then,\n\n* Its designer, P.D. Magnus, has added \"four new optional cards\":http://www.fecundity.com/pmagnus/decktet/extras.php that have _three_ suits each (I like them but haven't yet printed out copies to add to my deck).\n* A limited number of professionally-printed decks are \"available for sale\":http://www.fecundity.com/pmagnus/decktet/buyit.php for $15 postpaid.\n* There's now an official \"Decktet wiki\":http://decktet.wikidot.com/. It includes rules for the existing games, as well as for games still being designed, and has a discussion forum.\n* I've written down preliminary, partial rules for \"a game I'm designing\":http://decktet.wikidot.com/game:epic, under the working title \"Epic\". Its goal is to make use of the allegorical meanings of the cards, by having the gameplay represent a fantasy adventure or quest.\n\nh2. Rogue for iPhone\n\nFinally: \"*Rogue*. For. iPhone.\":http://projects.gandreas.com/rogue/index.html Dude! This game _ruled_ my 1982 (along with \"Tutankham\":http://en.wikipedia.org/wiki/Tutankham).\n\n<img src=\"http://projects.gandreas.com/rogue/rogue2.png\"/>"
  post_title: "Games, Games, Games, Games!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "games-games-games-games"
  to_ping: ""
  pinged: ""
  post_modified: "2008-12-02 10:11:18"
  post_modified_gmt: "2008-12-02 17:11:18"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/12/games-games-games-games/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 291
  post_author: 2
  post_date: "2008-12-03 19:24:57"
  post_date_gmt: "2008-12-04 02:24:57"
  post_content: "My plea for more iPhone board games is really getting results! Now there's a Go game with an AI, so I can get my butt spanked in privacy without the humiliation of losing to an actual human (such as my son).\n\n<img src=\"http://www.igoapps.com/images/apps/3759/screenshot_1_10489.jpg?rand=952326735\" align=\"right\" width=\"240\"/>\"iGo\":http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=297094975&mt=8 is pretty good, for $2.99. It supports board sizes from 7x7 to 19x9, and several levels of AI strength in addition to a customizable handicap. There's even Undo, so I can back-pedal on my lamest moves and try again.\n\nThe only things I can say against it are:\n\n* For some reason its hit-detection is too high, so it places a stone on the space _above_ the one tapped.\n* You don't get a chance to confirm your move, so if you tapped the wrong space [see above] the AI immediately replies, so you have to open the drawer and press the Undo button.\n* When starting a new game, the first thing it does is make you type in a name for it. I have no idea what I'd call a particular Go game, so I go \"Duhhh...\" and type in something random. It could at least fill this in with the date and time, by default.\n\n(Also, totally off the topic of games, I love the Amazon and OpenTable apps. Each of them is so much faster and smoother than navigating their respective websites.)"
  post_title: "Go with AI comes to the iPhone"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "go-with-ai-comes-to-the-iphone"
  to_ping: ""
  pinged: ""
  post_modified: "2008-12-03 19:24:57"
  post_modified_gmt: "2008-12-04 02:24:57"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/12/go-with-ai-comes-to-the-iphone/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 292
  post_author: 2
  post_date: "2008-12-04 11:10:34"
  post_date_gmt: "2008-12-04 18:10:34"
  post_content: "\"Python 3.0 is finally out\":http://www.python.org/download/releases/3.0/. I like Python (though it and Ruby are always competing for my affections), and I'm always a sucker for new features in any language, but I'm having trouble getting excited about this. Despite the longtime code-name \"Python 3000\", it doesn't seem very futuristic; and it introduces a lot of compatibility problems. In fact, after reading the docs, I can't come up with any good reasons to install or use the new version. Am I missing something?\n\nLooking at the official \"What's New page\":http://docs.python.org/dev/3.0/whatsnew/3.0.html, my takeaway is that the benefits are:\n\n* A bunch of minor language features cleaned up\n* Better (at least less confusing) Unicode support\n* Some nice but minor new syntactic features\n\nwhile the drawbacks are:\n\n* Won't run any pre-existing Python software. Just one minor example: the xrange() function no longer exists; instead, range() behaves the way xrange did. I'm pretty sure I've written something like \"for i in xrange(a,b)\" in every significant Python program I've ever written, causing all of them to break in 3.0 until I update them. Which is trivial; but there are dozens and dozens of changes like this. And many of them won't cause easy-to-diagnose exceptions like the removal of xrange; some just cause subtle changes in behavior that will likely require debugging if they're overlooked. (There is apparently an automated code converter, but of course it won't fix everything.)\n\n* As a side-effect of the above: All existing Python books are now out-of-date. (Sure, much of each book's coverage is still accurate, but the reader who's not a Python 3 expert already won't know which parts are OK and which are now wrong.)\n\n* Programs written for Python 3.0 probably won't run in any earlier version of the interpreter, since most of the changes aren't backward-compatible.\n\n* _Slower_ performance: \"Python 3.0 runs the pystone benchmark around 10% slower than Python 2.5.\"\n\n_Something seems wrong here!_ the benefits are minor, the drawbacks are huge. Where's the incentive to use it?\n\nCompare this to the Ruby 1.9 story: A number of language improvements; they're mostly backward-compatible, although with enough exceptions to break lots of large apps like Rails). But oh yeah: <i>\"it's three times as fast\":http://antoniocangiano.com/2007/12/03/the-great-ruby-shootout/. </i> That's a very big deal, considering the poor performance of today's Ruby (and Python). Once the 1.9 tech appears in a stable release, I am definitely upgrading.\n\nOr compare to an operating system upgrade. How would you respond to a pitch like: \"The 'Meerkat' release is going to be incredible! We've made a number of improvements to the system libraries. Of course, all existing apps will break, so you'll have to get upgrades from the developers (which won't run on earlier OS's, by the way.) And afterwards you'll notice everything running 10% slower! But we're sure you're going to love the enhancements to iterators and Unicode support...\"\n\nSo what did I miss? I don't mean this as an attack; I'm just genuinely confused...\n\n*Update:* See also <a href=\"http://mooseyard.com/Jens/2008/12/james-bennett-â€œlets-talk-about-python-30â€\">my further thoughts</a> in response to James Bennett's article."
  post_title: "Python 3.0: What&#8217;s The Point?"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "python-30-whats-the-point"
  to_ping: ""
  pinged: ""
  post_modified: "2008-12-04 11:10:34"
  post_modified_gmt: "2008-12-04 18:10:34"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/12/python-30-whats-the-point/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 90
-
  ID: 293
  post_author: 2
  post_date: "2008-12-06 12:51:20"
  post_date_gmt: "2008-12-06 19:51:20"
  post_content: "James Bennett has posted \"a very informative defense of Python 3\":http://www.b-list.org/weblog/2008/dec/05/python-3000/, in reaction to \"my more negative article\":http://mooseyard.com/Jens/2008/12/python-30-whats-the-point/.\n\nI learned things from it, as from many of the comments on my post. I even agree with most of what he says, but it hasn't really changed my opinion, because it seems like we're not talking about the same things.\n\nFrom the standpoint of _writing Python code_, Python 3 sounds great. It's so nice not to have to deal with crufty APIs that don't make sense anymore, or half-baked mechanisms like the original string class.\n\nBut from the standpoint of _using Python libraries_, I still think this is terrible. Any time I want to use a library I'll have to check whether it works with the version of Python I'm on. I may find that a library I use, and need updates to, will no longer support Python 2.x going forward. And the porting and branch-maintenance process will definitely take time out of library developers' schedules, slowing down other work.\n\nbq. (Since James had several great quotes in his article, here's one making my point: In Elbonia, cars have always driven on the left side of the road. Finally, the government decides that it's time to harmonize this with the country's neighbors, and announces that Elbonia will change to the more standard right-side driving. But they're going to phase it in: next Monday, trucks will switch to driving on the right, and the Monday after that, the cars will switch. _Rim-shot!_ The weakness of this analogy is that the sensible choice for Elbonia -- making everyone switch at once -- doesn't exist for something as distributed and anarchic as a programming-language community.)\n\nFor me, the second issue predominates. I'm more of a library-user than a hardcore Python coder. In fact, on balance, I like the core Python language _less_ than Ruby. What won me over were the libraries: there are a lot of really well-designed, well-documented, highly modular libraries out there that I've really enjoyed using. (\"Genshi\":http://genshi.edgewall.org/, to name just one, is the best templating engine I've ever used.)\n\nSo my perspective of the Python 3 release is that it heralds a difficult period, where library development and maintenance may slow, and grazing the Python ecosystem will become more difficult. Hopefully this won't last too long. But the worst-case scenario is that this forking process may discourage enough software developers to reduce the popularity of Python in the long term. That's bad not because popularity is important in itself, but because a vibrant community is important for maintaining forward progress, and because popularity brings useful things like books and tools."
  post_title: "James Bennett: â€œLet&#8217;s talk about Python 3.0â€"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "james-bennett-%e2%80%9clets-talk-about-python-30%e2%80%9d"
  to_ping: ""
  pinged: ""
  post_modified: "2008-12-06 12:51:20"
  post_modified_gmt: "2008-12-06 19:51:20"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/12/james-bennett-%e2%80%9clets-talk-about-python-30%e2%80%9d/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 14
-
  ID: 294
  post_author: 2
  post_date: "2008-12-20 11:44:10"
  post_date_gmt: "2008-12-20 18:44:10"
  post_content: "Ruby has a wide variety of HTML/XML templating engines, but none of the ones I've found work the way I'd like. It's quite possible I've overlooked some, though.\n\nMy current gold standard for templaters is the Python library \"Genshi\":http://genshi.edgewall.org/ (which was inspired by \"Kid\":http://kid-templating.org/) -- what I like about these is that _your templates are valid XML:_ the parameters and control structures are expressed as special XML attributes and tags. This makes it easy to edit your templates in syntax-checking XML editors, and guarantees that your app serves valid XML or HTML.\n\nBut as I said, none of the Ruby template engines I've seen work this way. They're all either generic macro systems that intermix markup and Ruby (like ERB), or they're ruby APIs that output markup (like Builder, HAML and Markaby). I don't really like either approach.\n\nIf you've got a good suggestion, I've got a gold star ready to stick on your forehead!"
  post_title: "Lazyweb: Is there a Ruby template engine like Genshi or Kid?"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "lazyweb-is-there-a-ruby-template-engine-like-genshi-or-kid"
  to_ping: ""
  pinged: ""
  post_modified: "2008-12-20 11:44:10"
  post_modified_gmt: "2008-12-20 18:44:10"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2008/12/lazyweb-is-there-a-ruby-template-engine-like-genshi-or-kid/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 295
  post_author: 2
  post_date: "2009-01-13 17:24:49"
  post_date_gmt: "2009-01-14 00:24:49"
  post_content: "Brian Mastenbrook has discovered \"a really bad security hole in Safari RSS\":http://brian.mastenbrook.net/display/27:\n\nbq. I have discovered that Apple's Safari browser is vulnerable to an attack that allows a malicious web site to read files on a user's hard drive without user intervention. This can be used to gain access to sensitive information stored on the user's computer, such as emails, passwords, or cookies that could be used to gain access to the user's accounts on some web sites. The vulnerability has been acknowledged by Apple.\n\nbq. All users of Mac OS X 10.5 Leopard who have not who have not performed the workaround steps listed below are affected, regardless of whether they use any RSS feeds. Users of previous versions of Mac OS X are not affected.\n\nHe hasn't released details yet, presumably to give Apple time to release a patch, so I don't know what the bug is. But it's my fault, since I either wrote the bad code myself, or at least didn't notice a mistake a co-worker made. And since I'm not at Apple anymore I can't help fix it.\n\nShit. I'm sorry, everyone."
  post_title: "Security hole in Safari RSS"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "security-hole-in-safari-rss"
  to_ping: ""
  pinged: ""
  post_modified: "2009-01-13 17:24:49"
  post_modified_gmt: "2009-01-14 00:24:49"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/01/security-hole-in-safari-rss/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 296
  post_author: 2
  post_date: "2009-01-22 10:32:03"
  post_date_gmt: "2009-01-22 17:32:03"
  post_content: "In just three weeks the Unix @time_t@ timestamp (the number of seconds since 1 Jan 1970) will hit the crucially important value 1,234,567,890:\n\n<pre>$ python -c 'import time; print time.ctime(1234567890)'\nFri Feb 13 15:31:30 2009</pre>\n\n(That's PST.) Just in time for a geeky Friday-the-13th happy-hour beer bash."
  post_title: "Time 1234567890 is coming up soon"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "time-1234567890-is-coming-up-soon"
  to_ping: ""
  pinged: ""
  post_modified: "2009-01-22 10:32:03"
  post_modified_gmt: "2009-01-22 17:32:03"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/01/time-1234567890-is-coming-up-soon/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 12
-
  ID: 297
  post_author: 2
  post_date: "2009-01-30 10:03:14"
  post_date_gmt: "2009-01-30 17:03:14"
  post_content: "Matt Knox, a Ruby developer and repentant former coder for an adware company, \"explains how adware works\":http://philosecurity.org/2009/01/12/interview-with-an-adware-author. Really fascinating stuff, and quite scary from a security point of view.\n\nbq. â€œAt the same time, we also made a virtual process executable. Iâ€™ve never heard of anybody else doing this before. Windows has this thing called Create Remote Thread. Basically, the semantics of Create Remote Thread are: Youâ€™re a process, Iâ€™m a different process. I call you and say â€œHey! I have this bit of code. Iâ€™d really like it if youâ€™d run this.â€ Youâ€™d say, â€œSure,â€ because youâ€™re a Windows processâ€“ youâ€™re all hippie-like and free love. Windows processes, by the way, are insanely promiscuous. So! We would call a bunch of processes, hand them all a gob of code, and they would all run it. Each process would all know about two of the other ones. This allowed them to set up a ring â€¦ mutual support, right?â€\n\nLater on he describes further Windows security fubars like undeleteable Registry keys. All of this further validates my obstinate refusal to give in to my children's pleas to install Windows so they can play all the games that only run on PCs!\n\nbq. <i>S: In your professional opinion, how can people avoid adware?</i>\nM: Um, run UNIX.\n\nAnd some well-expressed closing thoughts:\n\nbq. <i>S: Do you think that in our society we delude ourselves into thinking we have more privacy than we really do?</i>\nM: Oh, absolutely. If you think about it, when I use a credit card, the security model is the same as that of handing you my wallet and saying, â€œTake out whatever money you think you want, and then give it back.â€\n[...]\n<i>S: Is there anything else you wanted to comment on?</i>\nM: People can have things as good as they are willing to work for. If you want to have a system thatâ€™s clean of nasty software, you can do that. If you want to have personal privacy, itâ€™s possibleâ€“ very hard, but possible. And I think itâ€™s worth it."
  post_title: "&#8220;Interview With An Adware Developer&#8221;"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "interview-with-an-adware-developer"
  to_ping: ""
  pinged: ""
  post_modified: "2009-01-30 10:03:14"
  post_modified_gmt: "2009-01-30 17:03:14"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/01/interview-with-an-adware-developer/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 298
  post_author: 2
  post_date: "2009-02-03 00:09:51"
  post_date_gmt: "2009-02-03 07:09:51"
  post_content: "I really donâ€™t know how long Iâ€™ve been lying on the couch, watching the men on the TV. I donâ€™t remember things so well anymore, since the accident. I donâ€™t remember the accident either, but my friends tell me it was pretty bad. I have healed about as well as Iâ€™m going to, and though I donâ€™t get around well, I can still think. In small doses.\n\nThe men on the TV gesticulate about some crisis or other; I canâ€™t tell what, because the sound is off. They look angry â€” at me, at all of us, at themselves. Small text crawls across the screen above and below them. The TV men look very tired, too, as tired as I feel, and perhaps lost and afraid. I feel such sympathy; I would like to turn up the volume and learn more of their situation. Maybe I could ask one of my friends to.\n\n\n\n<!--more-->\n\n\n\n\n\n\n<center>~~~</center>\n\nMadeline is staring out the window. The window is next to the TV, it is filled with blackness, and speckly stars, and dim reflections of us. Itâ€™s night-time. Madelineâ€™s gaze intersects mine somewhere near the empty center of the room. She is looking very intently into that blank space, at nothing I can see, and it makes me worry what might be out there. She is counting something; I know what that is, at least. I watch her lips move â€” she is up into the millions now. Some of us have nervous habits, some of us arenâ€™t taking this ordeal so well.\n\n<center>~~~</center>\n\nCharles is still crying. I say â€œstillâ€ because my sense is that heâ€™s been doing it for a long time. He cries with the slow understated pace of one who can keep it up indefinitely. He is on the floor, arms around his knees, rocking slowly. I am embarrassed to say that I canâ€™t remember why he is so sad. Whatever he may have lost, he still has this room, a warm shelter from the night outside. He has us. We are his friends, if I recall correctly.\n\n<center>~~~</center>\n\nJunko remains calm, amidst the angry TV men and the crying and staring and all.\n\n(It is rather crowded in here, I admit. We used to have a lot more room, but that accident damaged the rest of the house and we had to board up the door. Itâ€™s OK, we all fit here in the living room, it could even be considered cozy! I donâ€™t think it used to be a living room; though; maybe a spare room or cellar? But something is wrong â€¦ though I canâ€™t remember what.)\n\nJunko is going through the first-aid kit, a swirl of sterile wrappers and bandages and surgical steel implements. Her gaze terminates there, right in front of her.\n\n<center>~~~</center>\n\nAlan continues to speak loudly in his deep voice. He looks us all in the eye, in turn. Heâ€™s our leader (did we appoint him? Or did he seize the role?) and we should pay more attention to him. I will try, though his arguments unfurl like a scroll that runs behind me into the past where I canâ€™t see it. He has a voice that is accustomed to speaking in arguments, in bullet points. He is saying that:\n\n* We were Chosen.\n* We have to stick together, even in our dire straits.\n* We cannot disappoint our _true_ leader.\n* We cannot become confused by the lies of the TV men.\n* We have a glorious destiny, and itâ€™s coming up soon, if only we can hold on.\n* We are all very _disappointed_ in Alison.\n\nIf you ask me, Alan sounds like heâ€™s nuts. His wild beard and red eyes donâ€™t help. But I have to admit that Iâ€™m short on context here, in my post-accident diminished capacity, and I could be misinterpreting. All I can do is watch and learn. (And forget, and watch again, and learn againâ€¦)\n\n<center>~~~</center>\n\nAlison is struggling. Did I list her already? But she is small, and nearly exhausted, and Dave is large. Did I mention Dave? Alisonâ€™s gaze goes everywhere, darting like a laser-pointer. Her eyes are mad. Her hair flies around her head. Dave focuses close by, on his grip, keeping Alison from getting loose.\n\nAlison is yelling. â€œâ€”Fucking tyrant, I want _out_ of this cult, I am opening that door and _leaving!_ Yes, I know whatâ€™s outside! Fuck you all, itâ€™s better than this _shithole_, better than lying here day after day afraid to do anything, no room to stretch out, just waiting for it to come closer! Get your goddamn stinks away from me! I want to go outside! _Outletmeoutout_ â€”â€ Alison is on a short conversational loop, and it really only takes a few seconds to absorb the gist of it.\n\n<center>~~~</center>\n\nAlan also says that:\n\n* He has the highest respect for our mission.\n* None of us can be permitted to jeopardize it.\n* The Titan king Saturn has seized the throne and castrated his father.\n* Saturn = Kronos = Time, and time has abandoned us. There is only this moment, this endless moment in our cramped room. We must escape, we _will_ escape, but _not now_. We must stay tight together, packed in our shell, for leaving now will expose us to the hell that is outside. Let one of us so much as open the door, and itâ€™s all over â€” the cold of the outside will devour us, we will fly apart and never be together again, the TV men will laugh and say they knew we would fail.\n* We must remember our _true destination_.\n\n<center>~~~</center>\n\nJunko hovers before him, a gift of a scalpel gleaming in her thin fingers. Alan curls his fist around it. (Did this happen before? Did I watch this already?) Alison screams â€¦ Madeline counts, her lips moving â€¦ Charles sobs. Alan reiterates that:\n\n* Alison _in particular_ must remember our true destination, not the false one\n* â€¦ and the importance of _staying_ true to it\n* â€¦ and this will help her rememberâ€”\n\nDave holds Alison very still, all but her screaming mouth, as Alan carves the letters into the flesh of her forearm: M â€” A â€” R â€” S.\n\nDrops of blood swell into red spheres and break free for Junko to vacuum up tidily with her little suction device. Alan finishes the third stroke of the lightning-bolt S and Junko sprays the whole with cautery fluid, stopping the bleeding.\n\nAlison has stopped screaming now, her noises are softer, her gaze has rolled up within her skull. Dave maintains his grip. Charles tries to crawl through the floor, or is it the wall? Madeline continues her soft breathy counting, one second per second into the future without end.\n\n<center>~~~</center>\n\nOutside the window the stars are rolling now. Inside, a few small objects not fastened down bump their way along the wall, following them. The swirled orange sphere rises majestically from the windowsill, its famous rings glittering. It doesnâ€™t fill the frame, not yet; I can still reach my hand out and cover it. But it grows larger, I remember that now. Every day, in every way, every 86,400 of Madelineâ€™s metronomic counts. Donâ€™t let her stop, or weâ€™ll hang suspended here forever more. Don't let her continue, or the titan will devour us, his children.\n\n<center>~~~</center>\n\n* Where are we going?\n\nAlanâ€™s fiery eyes burn into mine. My mouth is dry. My mind is empty, a broken vessel, a stuck record. I look desperately at my arm for clues, reading the large unfriendly letters written there in white puckered scar tissue.\n\nâ€œMars, sir.â€\n\n<hr />\n\n_[Written for \"Thing-A-Day 2009\":http://thing-a-day.com. Inspired by a claustrophobic dream I had a few months ago. Disclaimer: This is a work of fiction ... no matter what the TV men say. Now shut the curtains.]_"
  post_title: "Couch"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "couch"
  to_ping: ""
  pinged: ""
  post_modified: "2009-02-03 00:09:51"
  post_modified_gmt: "2009-02-03 07:09:51"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/02/couch/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 299
  post_author: 2
  post_date: "2009-02-13 09:56:01"
  post_date_gmt: "2009-02-13 16:56:01"
  post_content: "*The Pessimistic Form*\nThe set of commands available in a toolbar (even via customization) is restricted to those that are either:\n(a) painfully obvious (New, Save, etc.), or\n(b) useless to you (Save As EBCDIC, Post To CompuServe, Bilinear Zeta-Regression, etc.)\n\n*The Optimistic Form*\nCombine this with the well-known principle that, while everyone uses only a subset of an application's features, everyone uses a _different_ subset. Conclusion:\n\nTo be useful, a toolbar's customization UI should allow _every single command in the application_.\n\nh2. Discussion\n\nThere are three difficulties that stand in the way of making every command available in a toolbar:\n\n# Every toolbar item needs an icon. Icons are hard to design, especially for the more unusual commands, and usually require payment to a designer or a stock-icon service.\n# Toolbar items need to be enabled/disabled immediately after every user action, as opposed to menu items that only need to be updated when the menus are pulled down. In some cases it's too expensive to check the status of the command that often (especially during typing.)\n# I suspect the OS X \"Customize Toolbar...\" UI won't scale well to the number of commands available in a decent-sized app. (I'm not even sure if the sheet even has a maximum height and a scrollbar.) Listing the commands in alphabetical order might be sufficient, though.\n\n[Update, 1:45PM: Clarified the wording a little bit, to make it clear I'm talking about the customization options, not what's in the toolbar by default.]"
  post_title: "sneJ&#8217;s Law of Toolbars"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "snejs-law-of-toolbars"
  to_ping: ""
  pinged: ""
  post_modified: "2009-02-13 09:56:01"
  post_modified_gmt: "2009-02-13 16:56:01"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/02/snejs-law-of-toolbars/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 300
  post_author: 2
  post_date: "2009-02-15 17:50:59"
  post_date_gmt: "2009-02-16 00:50:59"
  post_content: "So, Web 2.0's heyday is over, and somewhere out there, Web 3.0 is slouching toward us waiting to be born. What will it be?\n\nThere's really no such single thing as \"Web _x_\", of course. And all predictions are really just wishes. That being said, my wish is that Web 3.0 will be about _distributed_ systems. To oversimplify:\n\nWeb 1.0 built up big brand-name websites with their own content -- things written by them, or repurposed from the media companies that owned them, or stuff to buy.\n\nWeb 2.0 embraced \"user-created content\" and interaction between users. The content creation has become less centralized, outsourced to whomever wants to register an account and post stuff, but the sites managing, storing and serving the content are still centralized.\n\nWeb 3.0, I hope, will take the decentralization to the software, and the storage. Monolithic web apps run by huge server farms -- Facebook, Blogger, Twitter, Flickr, etc. -- will be at least in part supplanted by apps that users run locally (or at least 'nearby') and which share data among each other.\n\nh3. Why is this important?\n\n* Centralization creates concentrations of power, and that's dangerous. The people who run the servers have total control over your (and everyone's) data. They can snoop at it (however private it's supposed to be), they can sell it to advertisers, they can accidentally lose it, they can accidentally expose it to hackers.\n\n* Centralization leads to walled gardens. Your data on each service is intrinsically disjoint. It can be linked together, through hyperlinks and feeds and APIs and mashups, but only to the degree each service allows, and it's never seamless.\n\n* Centralized services are hard to run. The more popular they get, the heavier the demands on the servers, and the worse the problems of abuse. (I see this every day in my job, even though the service I work on is one of the smallest Google runs.) This acts as a tax on innovation. Modern frameworks like Rails and Django make it easy to create a site, but to take it beyond just you and your friends, you have to get expensive hosting and deal with server clusters, database replication and so on. The early days of 3rd-party Facebook apps were a great example of this: no sooner would an app come online, than it'd drown under the load of its users and have to be resurrected by panicked owners upgrading their servers to more-expensive hosting plans.\n\n* Centralized services are usually closed-source. I'm not an open-source zealot, and I've spent my career working on closed-source software, but I don't think it's healthy for [nearly] all large web apps to keep their source code locked away. It discourages innovation and it makes it hard for open alternatives to compete (especially when you consider the huge intrinsic network effects that discourage switching.)\n\nh3. What do we need?\n\nDecentralized systems need well-defined protocols and data formats for communicating. We've been making headway with that as part of Web 2.0 -- there's an arsenal of technologies like REST, Atom, AtomPub, OpenID, OAuth, RDF, JSON and so on -- but they're not well integrated with each other. And we need higher level abstractions.\n\nI've been researching \"CouchDB\":http://couchdb.apache.org this week, and I'm getting more and more excited by it the more I learn. It combines data storage, REST-based APIs, scalability and data propagation through replication, and even application hosting. It's actually a lot like Google's internal infrastructure, but in an open and modular form.\n\nYou can use CouchDB as the back end of a traditional web service, glomming more and more instances of the server together for scalability; that's the kind of architecture that Google and Amazon use. But you can also run instances independently from each other, and have them pull data from each other, very much like the way distributed version control systems like Git and Mercurial operate. As I've said before, once you have a decentralized system, you can easily design centralized systems of any form as special cases.\n\nSince each CouchDB instance also runs as a web server, that means I can run my social network from my machine, and you can run yours from yours, and yet they can be the _same_ social network. But I can keep my private data private, and I can hack on my software if I want, and the load on my server only scales with the size of _my_ friend list, no matter how big the entire global network grows.\n\nThese are things I've been thinking of for a while (and my unfinished Cloudy app includes some of them), but CouchDB comes closer than any other software platform I've seen to making them implementable. It's still unfinished (nearing version 0.9 right now), and some of the authentication and replication features that would be needed for this aren't ready yet, but it really sounds like the people developing CouchDB Get It, and are working to make this vision of Web 3.0 come true.\n\nbq. [If this sounds interesting to you, go and read the preliminary draft of the \"upcoming O'Reilly book on CouchDB\":http://books.couchdb.org/relax/. Only the first few chapters exist yet, but they're well-written and lay out the basics pretty well.]"
  post_title: "What will Web 3.0 be?"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "what-will-web-30-be"
  to_ping: ""
  pinged: ""
  post_modified: "2009-02-15 17:50:59"
  post_modified_gmt: "2009-02-16 00:50:59"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/02/what-will-web-30-be/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 301
  post_author: 2
  post_date: "2009-02-24 10:42:30"
  post_date_gmt: "2009-02-24 17:42:30"
  post_content: "The feelings created by music are so strong, for me, but so ineffable. The problem of perception is usually described using color â€” how can we know if the visual sensation I call \"red\" is anything like the one you call \"red\"? â€” but only gets worse as you ascend to higher order perceptions, where even names become harder to apply. What do you call the feeling incited by \"Guernica\", and even if you find the same words I would, is it the same feeling? And yet vision is our strongest, highest-bandwidth, most describable sense. We struggle to describe sound without using the technical terms of musicians, or vague metaphors.\n\nIt doesn't help that so much of the music I like is so inward-focused: the guitarist gazing (not at shoes) at effect pedals, the producer sliding waveforms around a timeline, the listener bracketed in headphones like my picture above.\n\nEveryone wants their experience of music to be shared. To play an instrument or sing for others, to blast the song from car speakers. To identify with music meant to shock, and use it to shock others. To attend a concert and know that those around you are hearing and feeling the same thing you are, right then: sitting following the intricacies of Bach, or exploding in a mosh pit. Drugs of many kinds help to collapse this emotional waveform, unite a group into a Bose-ian condensate, whether it's alcohol to bring out desire and anger, or Ecstasy to turn arpeggios and filter sweeps into spinal shivers and universal love.\n\nNowadays I experience music by myself, mostly on headphones, like right now on the bus to work. Little circuits inside them are actively removing the signs of the outside world, leaving a weird sibilant hush that I fill with the noise I choose. My eyes are on a screen where I sort my music into playlists, or read what other people say about the music they love, and sometimes reach out and listen to their music myself.\n\nI take little piles of songs and chain them together, finding the little hooks at the ends where they fit, making daisy chains to \"share with people\":http://recordings.mooseyard.com/. Is this creation? I didn't create the songs, but joining them can make something new, like a work of collage. I would love to use the songs as words given to me, and string them together to tell a story. In some of the mixes I've made I can hear some of that: abstract arcs of emotion flying across 80 minutes, or juxtapositions that change the sounds on either side into something new that reflects the other.\n\nThe worst part about creation is finishing, and throwing the end product out the door into the sunlight where it blows away in sheets. Diana tells me the abalone are dying out because they reproduce by scattering their seed into the ocean and hoping the eggs and sperm will meet; and as their numbers decrease, so does the likelihood of this success. In some ways the progression of my musical tastes has been like that. The Internet has been a tremendous boon, but the distance involved always makes me doubt, as the notes and bytes fly away out of sight, that they'll ever find a mate, or if they do, whether I'll even know."
  post_title: "Music, Alone"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "music-alone"
  to_ping: ""
  pinged: ""
  post_modified: "2009-02-24 10:42:30"
  post_modified_gmt: "2009-02-24 17:42:30"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/02/music-alone/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 302
  post_author: 2
  post_date: "2009-02-25 15:56:45"
  post_date_gmt: "2009-02-25 22:56:45"
  post_content: "Roy Blount, president of the Authors' Guild, writing in the New York Times, attempts to defend his groups assertion that the Amazon Kindle 2's text-to-speech capability is cheating authors out of audio-book royalties:\n\nbq. \"What the guild is asserting is that authors have a right to a fair share of the value that audio adds to Kindle 2â€™s version of books.\"\n\nAnd that assertion makes absolutely no sense. The creator of an item does _not_ have a right to impose an arbitrary tax on anyone who adds value to the item. Otherwise we'd be open to all sorts of nonsensical scenarios, like:\n\n<hr />\nThe RIAA hits Apple with a lawsuit, claiming that the trippy visualizer component built into iTunes adds value to the music, and demands extra visual-performance royalties.\n\n<hr />\nMovie studios take issue with the \"up-scaling\" feature built into current DVD players, which increases the resolution of the image to improve picture quality on HTDVs. They point out that the output resolution is comparable to Blu-Ray, making the consumers' DVDs roughly twice as valuable, and demand the DVD manufacturers cut them a share of that.\n\n<hr />\nThe CEO of Exxon-Mobil asserts that his company has a right to a share of the extra value that the Prius adds to every gallon of gasoline. Prius owners are getting more mileage out of it, making the gas more valuable to them, so Toyota should be paying $1 a gallon in royalties to the oil companies.\n\n<hr />\nInternational Paper Corp. demands a share of the extra value that book publishers are adding to the paper it produces by printing books out of it. \"We sell them a ream of paper for a buck,\" said a company spokesman, \"and they put some ink on it and turn around and sell it as two hardback books for $25 each! All we're asking for is our fair share, say 10% of that $24 markup.\"\n\n<hr />\nIPC's gutsy move is being watched with interest by Universal Forest Products, which points out that its wood pulp is being used by paper manufactuers and resold at a higher price. It is seeking 10% of the \"unconscionable, exploitative profit\" that IPC and other paper companies make from the pulp they get from UFP.\n\n<hr />\nIn a hastily-arranged press conference, The Lorax -- who speaks for the trees -- demands massive overdue royalties from the forest products industry, the paper industry, book publishers, as well as Amazon and Apple. Analysts praise the bouncy meter and humorous rhyme scheme of the announcement..."
  post_title: "Adding Value = Theft!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "adding-value-theft"
  to_ping: ""
  pinged: ""
  post_modified: "2009-02-25 15:56:45"
  post_modified_gmt: "2009-02-25 22:56:45"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/02/adding-value-theft/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 303
  post_author: 2
  post_date: "2009-03-07 17:20:03"
  post_date_gmt: "2009-03-08 00:20:03"
  post_content: "Flying Meat Software has <a href=\"http://gusmueller.com/blog/archives/2009/03/voodoopad_4.1_and_vp_reader_for_iphone_released.html\">released a VoodooPad Reader app for iPhone</a>, as a complement to their great desktop wiki. So now you can sync your VP docs to your iPhone and access them on the go, with or without a network.\n\nWhat's especially cool, to me, is that VP Reader uses my \"MYNetwork\":http://mooseyard.com/projects/MYNetwork library and BLIP protocol for its networking. Gus calls it \"an awesome network library ... It made moving pages from VoodooPad to the iPhone over the network completely painless. A++ would recommend again.\" Thanks, Gus! I believe this is the first appearance of BLIP in a shipping product, since my own apps remain in limbo.\n\nThe \"VP Reader source code is available\":http://flycode.googlecode.com/svn/trunk/vpreader/ if you want to see how it was done."
  post_title: "VoodooPad 4.1 and VP Reader for iPhone Released"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "voodoopad-41-and-vp-reader-for-iphone-released"
  to_ping: ""
  pinged: ""
  post_modified: "2009-03-07 17:20:03"
  post_modified_gmt: "2009-03-08 00:20:03"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/03/voodoopad-41-and-vp-reader-for-iphone-released/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 304
  post_author: 2
  post_date: "2009-03-18 09:26:33"
  post_date_gmt: "2009-03-18 16:26:33"
  post_content: "The GameKit framework in iPhone OS 3.0 is very interesting to a Bonjour / P2P head \"like yrs truly\":http://mooseyard.com/Jens/2008/04/cloudy-as-buzzwords/. It basically provides a very easy-to-use API for ad-hoc group formation and many-to-many messaging on a local network. Great for games, of course, but also for many other types of social apps. (I just saw a report on a dev forum that somebody had \"whipped up a basic chat app in about 15 minutes\":http://www.iphonedevsdk.com/forum/iphone-sdk-development-iphone-os-3-0/13601-using-new-iphone-os-3-0-a.html#post61710.)\n\nGameKit uses BlueTooth networking; that lets it work where there's no WiFi, but it also limits the range. BlueTooth covers just a few meters, whereas a WiFi network connected to an Ethernet subnet can easily cover a whole floor of a building.\n\nMy \"MYNetwork\":http://mooseyard.com/projects/MYNetwork/ framework seems like a good way to bridge that gap. The TCP connection classes provide the Bonjour discovery and makes point-to-point connections, and the \"BLIP\":http://mooseyard.com/Jens/2008/05/blip-come-n-get-it/ protocol lets you send data blobs over those connections.\n\nIt should be pretty straightforward to build some classes that are plug-compatible with the GameKit network classes but use MYNetwork. Then iPhone apps could easily support both protocols, and compatible Mac apps could be developed. Anyone want to try it?\n\n<i>[Note: I'm only referring to information that was publicly discussed at \"Apple's press event yesterday\":http://events.apple.com.edgesuite.net/0903lajkszg/event/index.html. I've read through the APIs, but I won't go into details about them here in public.]</i>"
  post_title: "Plugging a hole in GameKit"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "plugging-a-hole-in-gamekit"
  to_ping: ""
  pinged: ""
  post_modified: "2009-03-18 09:26:33"
  post_modified_gmt: "2009-03-18 16:26:33"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/03/plugging-a-hole-in-gamekit/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 305
  post_author: 2
  post_date: "2009-04-13 09:55:02"
  post_date_gmt: "2009-04-13 16:55:02"
  post_content: "I've got a new open-source Mac/iPhone library out ... but it's early days and it's not really ready for use yet. I'm hoping some smart folks [that's you] will want to help implement missing bits, or at least find bugs.\n\nIt's called \"*MYCrypto*\":http://mooseyard.com/projects/MYCrypto/ and it's a high-level cryptography API, with object-oriented interfaces to:\n\n* Symmmetric cryptography (session keys and password-based encryption)\n* Asymmetric cryptography (public and private keys; digital signatures)\n* X.509 identity certificates (for use with SSL, S/MIME and CMS)\n* Cryptographic digests/hashes (effectively-unique IDs for data)\n* The Keychain (a secure, encrypted storage system for keys and passwords)\n* Cryptographic Message Syntax [CMS] for signing/encrypting data\n\nMYCrypto is really \"just a wrapper\" around the system \"*Keychain*\":http://developer.apple.com/documentation/Security/Conceptual/keychainServConcepts/02concepts/concepts.html#//apple_ref/doc/uid/TP30000897-CH204-TP9, *CDSA/CSSM*, and *CommonCrypto* APIs. But if you've tried to use any of these, you know that Keychain is rather complex and confusing, CSSM is <em>incredibly</em> opaque and nearly undocumented, and CommonCrypto is easy but limited.\n\nWhat's worse, the Keychain APIs are quite different on iPhone OS, and CSSM isn't available at all. (Unless you're running in the simulator, where for some reason you get the Mac OS, not iPhone, Keychain APIs, just to make it harder to test your apps.)\n\nSo with MYCrypto I've used lots of #ifdefs, and gleaned bits of arcane SecKeychain and CSSM sample code from Apple and from the comprehensive-but-huge third-party \"Keychain.framework\":http://sourceforge.net/projects/keychain, and tried to shovel the lot under a pretty, object-oriented rug.\n\nh2. What can you do with MYCrypto?\n\n* Encrypt files, with the keys securely stored in the Keychain. You can use randomly-generated symmetric keys and never have to bother the user with making up a password.\n\n* Encrypt data the user stores on the network (i.e. on iDisk or a WebDAV server), either using direct symmetric keys, or passwords to make it easy to retrieve the data from another computer.\n\n* Generate your own (i.e. your users' own) identity certificates. Self-signed certs are free and instant and don't require dealing with Verisign or Thawte.\n\n* Use these certs to make secure peer-to-peer SSL connections (perhaps using my MYNetwork library.)\n\n* Sign anything using your identity, to prove that you wrote it.\n\n* Encrypt anything, for delivery to the holders of particular certificates, without having to pre-arrange passwords or keys, or make a direct connection to them.\n\nh2. Examples\n\n[Sorry about the line-spacing in these. My Textile processor is old and cranky.]\n\nh4. Creating an RSA key-pair\n\nUse \"MYKeychain\":http://mooseyard.com/projects/MYCrypto/Documentation/html/interfaceMYKeychain.html to create a \"MYPrivateKey\":http://mooseyard.com/projects/MYCrypto/Documentation/html/interfaceMYPrivateKEy.html and \"MYPublicKey\":http://mooseyard.com/projects/MYCrypto/Documentation/html/interfaceMYPublicKey.html:\n\n<pre style=\"font-size: 10px; line-height: normal;\">\nMYPrivateKey *keyPair = [[MYKeychain defaultKeychain] generateRSAKeyPairOfSize: 2048];\nMYPublicKey publicKey = keyPair.publicKey;\n</pre>\n\nh4. Creating a self-signed identity certificate:\n\nUse \"MYIdentity\":http://mooseyard.com/projects/MYCrypto/Documentation/html/interfaceMYIdentity.html:\n\n<pre style=\"font-size: 10px; line-height: normal\">\nNSDictionary *attrs = [NSDictionary dictionaryWithObjectsAndKeys:\n		@\"alice\", @\"Common Name\",\n		@\"Alice\", @\"Given Name\",\n		@\"Lidell\", @\"Surname\",\n		nil];\nMYIdentity *ident = [keyPair createSelfSignedIdentityWithAttributes: attrs];\n\nNSData *certData = ident.certificateData;\n</pre>\n\nh4. Signing and encrypting a message:\n\nUse \"MYEncoder\":http://mooseyard.com/projects/MYCrypto/Documentation/html/interfaceMYEncoder.html:\n\n<pre style=\"font-size: 10px; line-height: normal\">\nNSData *cleartext = [@\"Attack at dawn\" dataUsingEncoding: NSUTF8StringEncoding];\nMYEncoder *encoder = [[MYEncoder alloc] init];\n[encoder addSigner: ident];\n[encoder addRecipient: bob];\n[encoder addRecipient: carla];\n[encoder addData: cleartext];\n[encoder finish];\nNSData *ciphertext = encoder.encodedData;\n\nsendMessage(ciphertext);\n</pre>\n\nh4. Verifying and decoding a message:\n\nUse \"MYDecoder\":http://mooseyard.com/projects/MYCrypto/Documentation/html/interfaceMYDecoder.html:\n\n<pre style=\"font-size: 10px; line-height: normal\">\nNSData *ciphertext = receiveMessage();\nNSError *error;\nMYDecoder *decoder = [[MYDecoder alloc] initWithData: ciphertext error: &error];\nif (!decoder)\n    return NO;\n\nif (!decoder.isSigned)\n    return NO;\ndecoder.policy = [MYCertificate X509Policy];\nNSMutableArray *signerCerts = [NSMutableArray array];\nfor (MYSigner *signer in decoder.signers) {\n    if (signer.status != kCMSSignerValid) {\n        return NO;\n    [signerCerts addObject: signer.certificate];\n}\n\nNSData *plaintext = decoder.content;\nprocessMessage(plaintext, signerCerts);\n</pre>\n\nh2. I did say \"alpha\"...\n\nWhat, it's not finished yet? You can read the details on the \"project home page\":http://mooseyard.com/projects/MYCrypto/, but the important gotchas are:\n\n* *MYCrypto 0.2 is new code and has not yet been used in any real projects. Expect bugs.* (I'm talking about my wrapper/glue code. The underlying cryptographic functionality provided by the OS is robust.) Please try it out, and report any issues you find.\n\n* *MYCrypto does not yet work on the iPhone.* It currently builds, but runs into problems at runtime. I'm currently trying to figure these out. The iPhone OS Security APIs are very different from the Mac OS X ones, and I'm much less familiar with them. This is an area where you could really help out, if you've used the Keychain APIs on iPhone before.\n\nIf that doesn't scare you off, then go \"browse the documentation\":http://mooseyard.com/projects/MYCrypto/Documentation/html/ or \"the source code\":http://mooseyard.com/hg/hgwebdir.cgi/MYCrypto/file/tip, or just \"download it\":http://mooseyard.com/hg/hgwebdir.cgi/MYCrypto/archive/tip.zip ..."
  post_title: "MYCrypto library now alpha-testing"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "mycrypto-library-now-alpha-testing"
  to_ping: ""
  pinged: ""
  post_modified: "2009-04-13 09:55:02"
  post_modified_gmt: "2009-04-13 16:55:02"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/04/mycrypto-library-now-alpha-testing/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 306
  post_author: 2
  post_date: "2009-04-14 09:38:23"
  post_date_gmt: "2009-04-14 16:38:23"
  post_content: "I've set up \"a project tracker site for MYCrypto\":http://mooseyard.lighthouseapp.com/projects/29227/home on Lighthouse. It's got the usual features -- a -bug- ticket database, milestone tracker, news posts, etc.\n\nRight now there are no -bugs- tickets filed. So MYCrypto must be done. Haha! No, I still need to file tickets on the known issues and planned features, but I haven't gotten around to it yet. (Maybe I should file a ticket to remind myself.)\n\nOh, and there's \"a MYCrypto news feed\":feed://mooseyard.lighthouseapp.com/projects/29227-mycrypto/events.atom you can subscribe to."
  post_title: "Project/bug tracker for MYCrypto"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "projectbug-tracker-for-mycrypto"
  to_ping: ""
  pinged: ""
  post_modified: "2009-04-14 09:38:23"
  post_modified_gmt: "2009-04-14 16:38:23"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/04/projectbug-tracker-for-mycrypto/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 307
  post_author: 2
  post_date: "2009-04-21 13:55:54"
  post_date_gmt: "2009-04-21 20:55:54"
  post_content: "<i>â€œSome people have suggested that mental illness is a kind of adaptation to the sort of circumstances that will arise in the future. As we move towards a more and more psychotic landscape, the psychotic traits are signs of a kind of Darwinian adaptation.â€</i> --1998\n\nh3. Abstract.\n\nNumerous studies have been conducted upon patients in terminal paresis (GPI), placing the author J.G. Ballard in a series of simulated auto crashes, e.g. multiple pileups, head-on collisions, motorcade attacks (fantasies of Presidential assassinations remained a continuing preoccupation, subjects showing a marked polymorphic fixation on windshields and rear trunk assemblies). Powerful erotic fantasies of an anal-sadistic nature surrounded the image of the award-winning novelist.\n\nh3. J.G. Ballard And The Conceptual Auto-Disaster.\n\nJ.G. Ballard died yesterday in his last car-crash. During his life he had rehearsed his death in many crashes, but this was his only true accident. Driven on a collision course towards the royal limousine, his car jumped the rails of the London Airport flyover and plunged through the roof of a bus filled with airline passengers. The crushed bodies of package tourists, like a hÃ¦morrhage of the sun, still lay across the vinyl seats an hour later. Holding the arm of her chauffeur, the Princess Diana, with whom Ballard had dreamed of dying for so many months, stood alone under the revolving ambulance lights, a gloved hand to her throat.\n\nCould she see, in Ballard's posture, the formula of the death he had devised for her? During the last weeks of his life Ballard had thought of nothing else but her death, a coronation of wounds he had staged with the devotion of an Earl Marshal. The walls of his apartment near the film studios at Shepperton were covered with the photographs he had taken with his zoom lens each morning as she left her hotel in London, from the pedestrian bridges above the westbound motorways, and from the roof of the multi-storey car-park at the studios. The magnified details of her knees and hands, of the inner surface of her thighs and the left apex of her mouth, he matched at his apartment with the photographs of grotesque wounds in a textbook of plastic surgery.\n\nYesterday his body lay under the police arc-lights at the foot of the flyover, veiled by a delicate lacework of blood. The broken postures of his legs and arms, the bloody geometry of his face, seemed to parody the photographs of crash injuries that covered the walls of his apartment. Twenty yards away, illuminated by the revolving lamps, the princess hovered on the arm of her chauffeur. Ballard had dreamed of dying at the moment of her orgasm.\n\nBefore his death Ballard had taken part in many crashes. As I think of Ballard I see him in the stolen cars he drove and damaged, the surfaces of deformed metal and plastic that for ever embraced him.\n\nh3. The Voices Of Time.\n\nYou're not alone, Ballard, don't think you are. These are the voices of time, and they're all saying goodbye to you.\nEvery particle in your body, every grain of sand, every galaxy carries the same signature.\nYou know what the time is now,\nso what does the rest matter?\n\nh3. References.\n\n* Ballard, J.G. \"â€œThe Voices Of Timeâ€\":http://en.wikipedia.org/wiki/The_Voices_of_Time [1962]\n* Ballard, J.G. \"â€œWhy I Want To Fuck Ronald Reaganâ€\":http://info.interactivist.net/node/3244 [1967]\n* Ballard, J.J. <i>\"The Atrocity Exhibition\":http://www.amazon.com/Atrocity-Exhibition-Flamingo-Modern-Classics/dp/0007116861 </i> [1969]\n* Ballard, J.G. <i>\"Crash\":http://www.amazon.com/Crash-Novel-J-G-Ballard/dp/0312420331 </i> [1973]\n\n<i>[For the perplexed or appalled: This is a pastiche assembled out of bits of Ballard's best-known works, with the names changed around. I claim no ownership of these words nor personal identification with their opinions.]</i>"
  post_title: "The Assassination of J.G. Ballard Considered As A Metafictional Homage"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-assassination-of-jg-ballard-considered-as-a-metafictional-homage"
  to_ping: ""
  pinged: ""
  post_modified: "2009-04-21 13:55:54"
  post_modified_gmt: "2009-04-21 20:55:54"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/04/the-assassination-of-jg-ballard-considered-as-a-metafictional-homage/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 308
  post_author: 2
  post_date: "2009-04-22 22:47:16"
  post_date_gmt: "2009-04-23 05:47:16"
  post_content: "I've set up new homes for my various programming projects on \"Bitbucket.org\":http://bitbucket.org/snej, which is rather like \"Github\":http://github.com, only for Mercurial instead of Git. (<tt>hg clone github.com</tt>, perhaps?)\n\nIn addition to Mercurial repository hosting, each project gets a nice source browser, a wiki, and a bug-tracker.\n\n<a href=\"http://bitbucket.org/snej\"><img src=\"http://bitbucket.org/m/img/logo_myriad.png\" /></a>\n\nTo kick things off, I've put up a new release of \"MYNetwork\":http://bitbucket.org/snej/mynetwork/. It doesn't change the core functionality much, but it adds\n* A new \"PortMapper\":http://bitbucket.org/snej/mynetwork/src/tip/PortMapper/MYPortMapper.h class that lets you open up your TCPListener to receive connections from outside your local network, when behind a NAT;\n* \"Bonjour\":http://bitbucket.org/snej/mynetwork/src/tip/Bonjour/MYBonjourBrowser.h classes for browsing for network services.\n\nI've also restored the \"BLIP protocol documentation\":http://bitbucket.org/snej/mynetwork/wiki/BLIP/Protocol that went AWOL when my own local project server died last year."
  post_title: "MYProjects now hosted on Bitbucket.org"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "myprojects-now-hosted-on-bitbucketorg"
  to_ping: ""
  pinged: ""
  post_modified: "2009-04-22 22:47:16"
  post_modified_gmt: "2009-04-23 05:47:16"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/04/myprojects-now-hosted-on-bitbucketorg/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 11
-
  ID: 309
  post_author: 2
  post_date: "2009-04-29 20:23:29"
  post_date_gmt: "2009-04-30 03:23:29"
  post_content: "After repeated prodding, I've finally gotten off my butt and released *Murky*, a GUI client app for the \"Mercurial\":http://selenic.com/mercurial version-control system. I've been working on it for over a year, and using it a lot myself; I had always planned to open-source it \"when it's ready\", but never actually got around to doing the necessary cleanup and uploading.\n\nI'm happy to say that Murky is finally blinking in the light of day, with \"its own Mercurial [natch] repository on Bitbucket\":http://bitbucket.org/snej/murky/wiki/Home.\n\nh2. Setting Expectations\n\n*Murky isn't \"done\", and this isn't a 1.0, or even a beta, release.* I'm not even providing a compiled app to download, just the source repository. No one but me has ever tested it. About nine months ago Murky became \"good enough\" for what I usually do, and I'm a happy customer, but I've lost the impetus to keep adding things to it. I hope some other people will grab the baton and improve it further. Then we can throw a party for a real 1.0 release, with several names on the About box.\n\nh2. Obligatory Screenshot\n\n!http://bitbucket.org/snej/murky/wiki/Screenshot.png!\n\nh2. Features\n\nHere's what it can do so far:\n\n* Create a new repository from an existing folder\n* Clone a remote (or local) repository\n* View the revision history (log) of a repo as a table view, complete with * a visual graph showing the inheritance of revisions\n* View the source tree, and the contents of files, from any past revision\n* See which files were changed, added or removed in any revision\n* Compare revisions of files, either visually with FileMerge, or as straight 'diff' output\n* Add or remove files from the local working tree\n* Commit (or revert) changed files\n* Update to a specific revision (past or present)\n* Push to or pull from remote repositories\n* Automatically detects filesystem changes made by other apps (or by the 'hg' tool) and updates the display immediately"
  post_title: "Murky: A Mercurial Client App"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "murky-a-mercurial-client-app"
  to_ping: ""
  pinged: ""
  post_modified: "2009-04-29 20:23:29"
  post_modified_gmt: "2009-04-30 03:23:29"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/04/murky-a-mercurial-client-app/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 29
-
  ID: 310
  post_author: 2
  post_date: "2009-05-03 23:05:38"
  post_date_gmt: "2009-05-04 06:05:38"
  post_content: "I just discovered that \"a number of commercial artists are really insulted that Google approached them to create artwork, without offering to pay for it\":http://drawger.com/taxman/?section=articles&article_id=7693. This did seem unreasonable to me ... until I read further and saw that this is for the Chrome browser.\n\nNow, Chrome is open source. (Technically the open source project is a separate thing called \"Chromium\", but that's mostly an organizational detail; the code is the same.) So when I compared this controversy to the rather different attitude of the many programmers who've gladly contributed to Chrome and WebKit (and thus also Safari) without pay ... I went \"hmm\".\n\nThere's a long comment thread about this on \"the LiveJournal of the talented cartoonist Rebecca Clements\":http://kinokofry.livejournal.com/199482.html?view=1229114. The craziest comment I saw was by one \"Anonymous\":\n\nbq. â€œGood will never paid a bill or put shoes on my child. I admit there should be some caring people in the world. But Google being kind ...so we all should be kind like them and give our work away? Come on give me a break. Someone in their executive chain of management has thought this through enough to realize it as a Public Relations \"cool\" thing to do to get more attention and drive people to Google as a source. It wasn't because they feel like being kind and giving something away.â€ \"*\":http://kinokofry.livejournal.com/199482.html?thread=1227578#t1227578\n\nMaybe I'm especially pissed off at this attitude because I just spent most of my weekend \"being kind and giving my work away\":http://bitbucket.org/snej/murky/changesets/ (as well as the work of several others). And I'm sure much of the software these complaining artists use was created for free by open-source programmers. Do they draw with The Gimp or Inkscape? Use Firefox or Chrome or Safari? Run Linux or BSD? Host their blogs with WordPress or LiveJournal? (Let's just hope they're not using pirated copies of Photoshop or CorelDraw...)\n\nSo is there a double standard here, or am I missing something?"
  post_title: "Open Source Good, Giving Away Art Bad?"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "open-source-good-giving-away-art-bad"
  to_ping: ""
  pinged: ""
  post_modified: "2009-05-03 23:05:38"
  post_modified_gmt: "2009-05-04 06:05:38"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/05/open-source-good-giving-away-art-bad/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 31
-
  ID: 311
  post_author: 2
  post_date: "2009-05-08 13:14:54"
  post_date_gmt: "2009-05-08 20:14:54"
  post_content: "I've set up a \"Google Groups mailing-list\":https://groups.google.com/group/murky-app for \"Murky\":http://bitbucket.org/snej/murky/wiki/Home, my Mercurial version-control app. It'll be for both developers and users of the app.\n\nSpeaking of \"developers\", I've been really pleased with the reaction to my initial \"source-dump\":http://bitbucket.org/snej/murky/src/tip/Source/ to Bitbucket! So far, in nine days:\n\n* \"79 people\":http://bitbucket.org/snej/murky/zealots/ have subscribed to change notifications;\n* \"10 people\":http://bitbucket.org/snej/murky/descendants/ have forked the repository so they can modify the code;\n* 8 people have contributed to the code, fixing bugs and adding some new features;\n* \"39 changesets\":http://bitbucket.org/snej/murky/changesets/28b5bf11b6ca:c1069914bc82/ have been committed to the repository;\n* \"29 bug reports and feature suggestions\":http://bitbucket.org/snej/murky/issues/ have been filed,\n* \"12 of which\":http://bitbucket.org/snej/murky/issues/?status=resolved&status=invalid&status=duplicate have been fixed.\n\nI'm especially happy about the patches I've received; I've gotten some in the past, but never this many or so quickly. Part of this is thanks to \"Bitbucket\":http://bitbucket.org, which (like its inspiration, Github) makes it so easy to share code and manage contributions. I've been getting more contributions to MYNetwork as well, since hosting it there.\n\nMy initial motivation was like Tom Sawyer whitewashing the fence -- I was hoping someone else would take over the project, since I'd run out of steam and hadn't done any work on it in a while. But what happened instead is that the attention got me enthused to work on it again, so I've made a lot of progress on it this past week. That's a good thing!, just not what I expected.\n\nNow I think it's about time to put out an actual easy-to-download binary release of Murky, as some of the main bugs have been squashed and I have more confidence that it works for other people besides me. I'll probably do that this weekend, and mention it here as well as on the new mailing list (don't forget to subscribe.)"
  post_title: "Murky Mailing List And Progress Report"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "murky-mailing-list-and-progress-report"
  to_ping: ""
  pinged: ""
  post_modified: "2009-05-08 13:14:54"
  post_modified_gmt: "2009-05-08 20:14:54"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/05/murky-mailing-list-and-progress-report/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 312
  post_author: 2
  post_date: "2009-05-20 14:30:32"
  post_date_gmt: "2009-05-20 21:30:32"
  post_content: "MobileOrchard just published \"a tutorial article by Peter Bakhyryev\":http://www.mobileorchard.com/tutorial-networking-and-bonjour-on-iphone/, describing a sample iPhone app called \"Chatty\" that acts as a simple peer-to-peer chat-room.\n\nbq. \"In this tutorial, we are going to explore a simple chat application for the iPhone. It allows you to host your own chat room and advertise it on your local Wi-Fi network (in which case your app acts as a chat â€œserverâ€) or find and join chat rooms hosted by other people on your network (acting as a chat â€œclientâ€). Both announcement and discovery of chat rooms are implemented using Appleâ€™s Bonjour protocol. The goal of this app is to show you how to use various networking-related frameworks available in the iPhone SDK version 2.x. The UI is minimal (consisting of only 3 simple views) - just enough to be able to play with the core functionality of the app without having to deal with complex UIKit code.\"\n\nIt's a well-written overview of everything from sockets to runloops to message framing, and it happens to basically describe what my \"MYNetwork\":http://bitbucket.org/snej/mynetwork/wiki/Home framework does. So an alternate way to read the tutorial is as a description of things you _don't_ have to worry about if you're going to use MYNetwork ;-) Because honestly, the stuff he's describing can be a real mess to deal with, and isn't that the kind of thing that should be solved once and stuffed into a reusable framework?\n\nNow I am seriously tempted to download the app, replace its networking and messaging code with MYNetwork, and see how small it comes out. If I do, I'll be sure to post the results here.\n\nbq. [ *Update:* I actually did it. \"Here's my forked Chatty\":http://bitbucket.org/snej/chatty/wiki/Home.]"
  post_title: "A Bonjour / Chat Tutorial For iPhone Developers"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "a-bonjour-chat-tutorial-for-iphone-developers"
  to_ping: ""
  pinged: ""
  post_modified: "2009-05-20 14:30:32"
  post_modified_gmt: "2009-05-20 21:30:32"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/05/a-bonjour-chat-tutorial-for-iphone-developers/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 6
-
  ID: 313
  post_author: 2
  post_date: "2009-05-22 09:37:25"
  post_date_gmt: "2009-05-22 16:37:25"
  post_content: "Here is the latest absurdity to come out of Apple's deeply, endemically fucked-up App Store approval process: Jamie Montgomerie's \"Eucalyptus\":http://th.ingsmadeoutofotherthin.gs/eucalyptus/ app, an e-book reader that can download public-domain books from Project Gutenberg -- about the most innocuous thing you could imagine, right? -- \"gets rejected not once but _three times_\":http://www.blog.montgomerie.net/whither-eucalyptus for containing \"obscene, pornographic, offensive or defamatory content\".\n\nLeaving aside the issue of whether Apple has any business deciding what constitutes obscenity (a task that's driven grown Supreme Court justices to drink) --\n\nAnd leaving aside also the fact that Apple's censors have three times now been too dim to comprehend that the application does not contain any books, obscene or otherwise, but downloads them from the Internet much like Safari --\n\nNo, the really outrageous issue is that the supposed obscenity here consists of a text-only English translation of the \"Kama Sutra\":http://en.wikipedia.org/wiki/Kama_sutra. Apple specifically called out some pages of steamy advice for \"when a man wishes to enlarge his _lingam_\". (No, \"really\":http://www.blog.montgomerie.net/user/files/Whither%20Eucalyptus/Rejection2-1.PNG.) [1]\n\nNow, Richard Burton had to get his 1883 translation of this ancient text \"printed privately\":http://en.wikipedia.org/wiki/Kama_sutra#Translations when no publishers would accept it, but that was in the Victorian era. The current authoritative translation is nowadays published by that infamous smut peddler, Oxford University Press. Much harder-core fare like _Ulysses_ and _Lady Chatterley's Lover_ -- books which go so far as to use _recognizable English names_ of the naughty bits -- were judged after some controversy to be free of obscenity in the 1930s. By 1970 the obscenity statutes had been lifted from nearly all printed material, and nowadays anything goes -- take a look at some of the e-books available for sale on the iTunes store.\n\nMontgomerie has now, humiliatingly, been driven to self-censorship: his latest message to Apple states \"I have now submitted a new version that specifically blocks access to the Kama Sutra book you identified. Is this what you mean?\"\n\nbq. [<b>Update, May 24:</b> \"Mongomerie reports\":http://www.blog.montgomerie.net/hither-eucalyptus that on the 23rd he \"received a phone call from an Apple representative. He was very complimentary about Eucalyptus.\" The whole matter was, of course, resolved, and Eucalyptus is now \"available for purchase\":http://tr.im/ptus.  A happy ending, certainly, and congratulations on the release! ...But I don't believe it invalidates my argument below. After all, this isn't the first time an outrageous rejection has been reversed after mass humiliation of Apple. It's the overall default policies and behaviors, and their chilling effects, that I'm complaining about, and there's still no sign of those changing.]\n\nh2. The \"E\" word.\n\nI don't think anyone but a card-carrying member of the Christian Coalition or Taliban would disagree that this was a _stupid_ decision on Apple's part. (And it was a considered decision, not a 'glitch in the approval process', given that Apple repeated it twice.)\n\nI feel the need to step up to a stronger word. How does *evil* sound?\n\nHear me out. I'm not talking \"evil\" as in killing babies or nuclear blackmail, rather in the sense it's meant in Google's corny motto \"Don't Be Evil\", or alluded to in the older proverb \"With great power comes great responsibility\". But yes, I do mean \"evil\" as malign, the opposite of good, etc. etc.\n\nLast year Apple put itself into an ethically very delicate situation with the App Store, by creating a market in which it has the sole power to make 3rd party software available (or to take it away). As has been amply discussed before, iPhone developers have no choice (if they want to be iPhone developers) but to put tremendous effort into developing the product, only finding out at the very end whether or not Apple will let it be sold.[2]\n\nThere are definitely some good reasons for such a model, primarily that it helps keep the platform secure from malware, and that by preventing piracy it allows developers to collect a lot more revenues per user, allowing them to set prices far lower than those in other software markets.\n\nBut in return Apple had the obligation to be very, very careful to be ethical, upright and transparent in its dealings with developers and the public, to minimize the dangers (of censorship, of conflicts of interest, of stifling innovation) inherent in its position.\n\nAnd being Apple, it completely and utterly fucked it up. Because it's in Apple's genetic code to be about as transparent as a lead brick. This has always annoyed the press, and it has frequently enraged developers, who suffer from the consequences of blank silence from Apple in between carefully-scripted WWDC keynotes and PR-scrubbed announcements. But in the context of the App Store, Apple's inscrutability and arbitrariness has become actively malign.\n\nh2. Evil is as evil does.\n\nI'm not saying that Apple _is_ evil; it isn't run by bluestockings or monopolists or cackling supervillains. But evil is a result of what you _do_ [3], and actions are not excused by good intentions; in the real world those who do evil (excepting psychopaths) uniformly believe they're working for the good.\n\nApple's App Store approval process has, over the past year, shown that the company is:\n\n* acting like a Victorian-era book censor;\n* quashing competition by blocking apps that improve on Apple's products;\n* blocking innovation by denying 3rd party apps access to the user's legally-owned data (such as MP3s);\n* attempting to deny end-users the freedom to do what they want with the hardware they bought and paid for (viz. its current efforts to have jailbreaking declared illegal);\n* and causing undue hardship to small developers by arbitrarily withholding their ability to sell the apps they've developed.\n\nNor has Apple engaged in the slightest bit of dialog with its developers and users to work through any of these issues. The best that's happened is that, after much public ridicule, Apple has without comment released some apps that it had previously blocked.\n\nMaybe you think \"evil\" is too strong or melodramatic or exaggerated a word for this. Then feel free to substitute something that has fewer loaded connotations to you -- \"unethical\" or \"anticompetitive\" or whatever. But if you're one of those who, like me, has applied the \"e\" word to the past actions of Microsoft, or to groups that try to ban books from libraries, then I think there's really no option but to use the same blunt language here and now.\n\n<hr /><font size=\"-1\">\n\n[1] By these standards, Apple should have banned its own Mail app, too. It sends me these kind of _lingam_-enlargment messages all the time.\n\n[2] This is arguably worse than the console video-game industry's similar monopoly on approving games, because those companies listen to developer pitches up-front before development. (Also, this kind of restraint is much nastier when applied to all types of software, including books, than just to games.)\n\n[3] This semantic distinction is one I'm not sure Google gets either. \"Don't _Do_ Evil\" would have been a better motto. But in its defense, Google does in practice seem to understand its responsibilities and is admirably open about its actions.</font>"
  post_title: "Apple Never Promised Us It Wouldn&#8217;t Be Evil"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "apple-never-promised-us-it-wouldnt-be-evil"
  to_ping: ""
  pinged: ""
  post_modified: "2009-05-22 09:37:25"
  post_modified_gmt: "2009-05-22 16:37:25"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/05/apple-never-promised-us-it-wouldnt-be-evil/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 22
-
  ID: 314
  post_author: 2
  post_date: "2009-05-24 14:46:36"
  post_date_gmt: "2009-05-24 21:46:36"
  post_content: "As \"foreshadowed\":http://mooseyard.com/Jens/2009/05/a-bonjour-chat-tutorial-for-iphone-developers/, I've created a modified version of the \"Chatty\":http://www.mobileorchard.com/tutorial-networking-and-bonjour-on-iphone/ iPhone sample app, which uses the \"MYNetwork\":http://bitbucket.org/snej/mynetwork/ library instead of custom networking code. You can \"get it off of Bitbucket\":http://bitbucket.org/snej/chatty/wiki/Home."
  post_title: "Chatty + MYNetwork"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "chatty-mynetwork"
  to_ping: ""
  pinged: ""
  post_modified: "2009-05-24 14:46:36"
  post_modified_gmt: "2009-05-24 21:46:36"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/05/chatty-mynetwork/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 315
  post_author: 2
  post_date: "2009-06-14 17:16:40"
  post_date_gmt: "2009-06-15 00:16:40"
  post_content: "I've always liked the Keychain technology in Mac OS X. Sure, the API is notoriously confusing and awkward, but the end-user benefits are compelling:\n\n# Secure, encrypted storage for all passwords and keys.\n# Items can be shared between applications -- so in principle you don't have to enter a given password more than once, since other apps will find the existing item in the keychain.\n# Items have access control lists, so they can be restricted to certain apps.\n# The user can \"lock\" the keychain, requiring a passphrase to be entered before there's any further access to it. This happens by default when the system goes to sleep, which is a good security feature especially for laptops.\n# If an app's code changes, it has to ask permission to use the keychain again (protects against malicious code patches)\n\nFor the past few weeks' worth of Copious Spare Time, I've been trying to get my \"MYCrypto\":http://bitbucket.org/snej/mycrypto/wiki/Home framework, which is in part a friendly API to the Keychain, to run on iPhone. The iPhone has a Keychain API, but it's a _different_ API than the Mac OS one. At first glance it looks simpler and easier to use, and maybe it would be if it were properly documented, but in practice the item-storage part of it (the SecItem* functions) is incredibly frustrating because the documentation is both incomplete and just plain wrong.\n\nCurrently I've gotten a lot of it working, but I'm stuck on some issues that seem like either major Keychain bugs or philosophical differences (parts of the API don't seem to work at all with items that exist in memory but haven't been persistently added to the Keychain store.) I've filed at least six bug reports to Apple in the last week, including the kind of basic unit tets that I would have hoped Apple QA engineers would have written before iPhone 2.0 ever went to developers. I'm very frustrated.\n\nh2. All this for what?\n\nAfter finishing the bug reports, I had the crazy idea: _why should I be using the Keychain store at all on iPhone?_ Going through my above list of benefits, I realized that hardly any of them apply:\n\n# The iPhone security model relies on app sandboxing to protect data. Even malicious app code can't reach the keychain file because it's outside the app sandbox. <strike>(I have some data that implies that the file is in fact just a plaintext SQLite database, not the fancy encrypted store it is on OS X.)</strike> [ _Update:_ I now have confirmation that \"the Keychain file is encrypted on the device and in backups\":http://developer.apple.com/DOCUMENTATION/Security/Conceptual/keychainServConcepts/02concepts/concepts.html#//apple_ref/doc/uid/TP30000897-CH204-DontLinkElementID_3, making it secure against most attacks.]\n# iPhone apps can't share keychain items. Every app effectively has its own sandboxed keychain. So there's no usability benefit of putting passwords in it.\n# No sharing means no point in access control lists, of course.\n# There's no keychain passphrase or lock/unlock behavior on iPhone. Once you unlock the iPhone itself, all apps can access their keychains freely.\n# Since all apps are signed, there's no question of malicious patches.\n\n<strike>So much for that. What you're left with is a rudimentary flat-file database, specialized for just a few data types, with a really clunky and badly documented API. Other than the fact that it happens to already exist, there's nothing about it that's as good as something you could write in a few hours using CoreData, or your favorite high-level SQLite API like FMDB or QuickLite. Heck, for simple needs you could just use a property list, for example an NSDictionary mapping URLs to [username, password] pairs. It ought to be just as secure, because the sandbox prevents any other apps from being able to access the file.</strike>\n\n_Updated:_ What you're left with is an encrypted flat-file database, specialized for just a few data types, with a really clunky and badly documented API. As I wrote above, its functionality could be duplicated, with a better API, without much effort. The encryption part is significant, though, since its primary purpose is to keep keys and passwords safe. A DIY key database could be protected by encrypting it with a symmetric key, and then putting _that_ key in the Keychain.\n\nI'm not sure where that leaves MYCrypto. I'm not sure I'm motivated to write a general-purpose version of this data store myself. If I can get some good answers and workaround to my Keychain API bug reports, I may just continue to tough it out."
  post_title: "Is There Any Point To Using The Keychain API On iPhone?"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "is-there-any-point-to-using-the-keychain-api-on-iphone"
  to_ping: ""
  pinged: ""
  post_modified: "2009-06-14 17:16:40"
  post_modified_gmt: "2009-06-15 00:16:40"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/06/is-there-any-point-to-using-the-keychain-api-on-iphone/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 19
-
  ID: 316
  post_author: 2
  post_date: "2009-07-03 18:31:24"
  post_date_gmt: "2009-07-04 01:31:24"
  post_content: "I've been working at Google since last August. The Big G's hiring process is rather weird -- when you interview, it's not for any specific team. It's only after you get an offer that you decide which team to join, of the ones with open positions.\n\nI decided on \"Google Sites\":http://sites.google.com, which I knew and liked from its days as JotSpot, a hosted wiki with some powerful features. It ended up not being the right place for me, for a couple of reasons:\n\n* Currently, Sites' priorities are in website publishing, as a replacement for Google Page Creator (which is being phased out soon.) It's quite good at it, but I'm less interested in that than in collaboration features.\n* Google's server-side infrastructure is really, really, _really_ huge and complex. There is an endless landscape of internal technologies and tools -- the few that have been described in public (MapReduce, BigTable, Chubby, etc.) are just the tip of the iceberg. I have discovered that I am not very interested in this kind of stuff, and I quickly became frustrated by the deluge of technologies I needed to learn to get things done.\n* Running a large web service is like running a nuclear power plant or an electric power grid. It requires 24/7/365 monitoring, and at that scale, anything that can go wrong will go wrong, and frequently does. I do not have the right temperament for working with this, especially not when it comes to taking turns carrying a pager that wakes me up at 4AM because some service's latency has gone above 300ms.\n* I've been vocal about my frustration with centralized systems; Google's websites are kind of the ultimate in that (even though, ironically, they're implemented as P2P-like networks internally, as I believe all large web operations are today.)\n\nThe good news is that Google encourages transfers between teams, and makes it easy to do so. The near-total transparancy inside the company makes it easy to find out everything that's going on, and there's a well-designed website for engineering transfers that helps you find teams that need people. I even went to an internal job fair.\n\nI've now ended up working on \"Chrome\":http://www.google.com/chrome, Google's web browser. The team I'm on is responsible for implementing \"HTML 5\":http://www.whatwg.org/specs/web-apps/current-work/multipage/ features, as well as designing and implementing other new features (for standardization) that will help web apps become as powerful as native apps. Much of what we do will go into the WebKit source tree, where it will also directly benefit Safari, Android, the Palm Pre, and other WebKit-based browsers.\n\nIn fact, everything I work on (more or less) is going to be open source. Both the WebKit and Chromium source trees are public. You can view, if you care to, \"the one patch I've contributed so far\":http://codereview.chromium.org/151095 and \"the one that's currently out for review\":http://codereview.chromium.org/150188. That's kind of mind-blowing, in a good way, to me, steeped as I am in the secrecy of Apple.\n\nI'm pretty excited by this. There are quite a lot of things I'm interested in working on -- client-side storage, local apps, drag-and-drop, better font support, menus, even far-out stuff like peer-to-peer networking. Forward in all directions!"
  post_title: "Career Update, Part ++n"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "career-update-part-n"
  to_ping: ""
  pinged: ""
  post_modified: "2009-07-03 18:31:24"
  post_modified_gmt: "2009-07-04 01:31:24"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/07/career-update-part-n/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 317
  post_author: 2
  post_date: "2009-07-05 13:19:17"
  post_date_gmt: "2009-07-05 20:19:17"
  post_content: "bq. *Introduction:* I wrote this as part of a reply on Apple's bonjour-dev mailing list, then decided it might be worth publishing more visibly. I've found that Cocoa's Distributed Objects technology is immediately attractive to many developers, while those who've used it end up finding that it's much more complex than it looks. But I haven't seen much written about the caveats of using it.\n\nbq. I am not saying \"don't use DO\" or \"DO is broken\"! It has valid uses, and it works as designed. But you should be aware of the less-obvious complexities. If you have a single GUI app and a single background agent, that's a great use-case. If the agent communicates with multiple apps (like the iChatAgent), things get trickier. If you're going to use DO over the network, you've got to be really, really careful.\n\n\"Distributed Objects\":http://developer.apple.com/documentation/Cocoa/Conceptual/DistrObjects/Concepts/AboutDistributedObjects.html is not as simple as it looks at first glance, especially for use over a network. Here are some of the issues I've run into:\n\n* *Ref-counting bugs* can be really hard to track down, because remote objects can be holding onto references to your local objects via their proxies. It's possible to have reference-loops that span two machines! Note that this means a buggy client can cause its server to leak memory.\n* Any message sent to a remote object can *potentially throw an exception* if there's a network problem or the remote peer disconnects. To make your app robust you have to handle all such exceptions and clean up gracefully. (A nasty case of this that I've seen is where a client's crash causes the server to crash, which then causes all the other clients to crash...)\n* Sending a non-oneway message to a remote object *blocks the thread indefinitely* until the remote peer sends a response. This effectively lets the peer hold your thread hostage, and can cause your app to lock up if the peer is overloaded or buggy or actively hostile. You can also end up with deadlocks that span multiple computers -- good luck debugging those! (In the app I shipped that used DO, we ended up using only oneway messages in our API for this reason.)\n* Even oneway message sends can fail if *DO's send buffer fills up*. The Mach queue is fixed size; I'm not sure if this applies to TCP too. We found it necessary to build a wrapper layer for sends that would catch the resulting exception and re-send the message again after a delay.\n\nIt gets worse if you're using DO over a network. In most cases, _especially in a P2P app_, you have to consider the possibility of *malicious peers*. (Even if your app will only be used in controlled environments, a buggy peer can have similar effects.) This means *you can't trust any input you get from a peer without validating it first*. A distributed object API can be really dangerous in such an environment because it blurs the line between local/trusted and remote/untrusted code and data. It makes it harder to identify the points in your code where you have to verify.\n\nHere are some of the possible security problems:\n\n* Any remotely-accessible method has to handle *arbitrary parameter values* without ill effects. If it takes an <code>NSString*</code>, it has to survive being passed nil. If that causes a crash, it's a denial-of-service attack. If it throws an exception, you have to make sure all of your code cleans up state on the way out, otherwise corrupted state could lead to denial of service or worse.\n* If a remotely-accessible method allocates nontrivial amounts of memory (like creating new objects), then a malicious peer could call it in an infinite loop and *run your app out of memory*, most likely crashing it. Another DOS attack.\n* It's easy to fall into the assumption that a remote object behaves the way your implementation of it says it does. This isn't true, in the malicious case, because an attacker could implement *their own version of the same interface* with arbitrary behavior. A particularly stupid example would be a <code>RemoteClient</code> interface with a boolean <code>isLoggedIn</code> property. You expect that this will return NO until you set it to YES, but what if someone implemented it to always return YES?\n\nYou can argue that this just calls for good unit testing and black-box testing as with any public API. Which is partly true; except that you can't get away with simply stating that \"nil values are not allowed for this parameter\" or \"the effect of calling this twice is undefined\". You have to expect anything. And worse, any bugs not found in testing are not just mundane customer-support issues, but potential priority-zero security holes that could cause really serious problems.\n\nThe end result of my experiences is that I don't think I would use DO again. By the time you've refactored the API to be all-oneway, and written wrappers to delegate messaging to background threads, it doesn't look like regular message-sends anymore. In other words, instead of writing\n<pre>\n	result = [remoteObject doSomething: param using: param2];\n</pre>\nby the time you've added the delegation, asynchrony and error handling you end up with something like:\n<pre>\n	NSError *error;\n	if (![dispatcher sendMessage: @selector(doSomething:withObject:) toObject: remoteObject withObject: param withObject: param2\n			target: self action: @selector(didSomething:) error: &error])\n		[self handleError: error];\n	// now keep going while you wait for the -didSomething: call ...\n\n	...\n\n	- (void) didSomething: (NSString*)result {\n		//...now handle the result\n	}\n</pre>\n\nSo you might as well use something lower-level to send the commands over the socket and save yourself a lot of complexity."
  post_title: "The Subtle Dangers Of Distributed Objects"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-subtle-dangers-of-distributed-objects"
  to_ping: ""
  pinged: ""
  post_modified: "2009-07-05 13:19:17"
  post_modified_gmt: "2009-07-05 20:19:17"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/07/the-subtle-dangers-of-distributed-objects/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 12
-
  ID: 318
  post_author: 2
  post_date: "2009-07-07 08:17:29"
  post_date_gmt: "2009-07-07 15:17:29"
  post_content: "\"New happy fun summer mix!\":http://recordings.mooseyard.com/mub59/\n\n!http://mooseyard.com/recordings/mub59/Cover.jpg!"
  post_title: "320, 160, 192, GO!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "320-160-192-go"
  to_ping: ""
  pinged: ""
  post_modified: "2009-07-07 08:17:29"
  post_modified_gmt: "2009-07-07 15:17:29"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/07/320-160-192-go/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 319
  post_author: 2
  post_date: "2009-07-13 07:47:25"
  post_date_gmt: "2009-07-13 14:47:25"
  post_content: "I got an iPhone 3GS yesterday (yes, it totally rules.) While setting up online account access for billing, AT&T had me enter a password.\n\nThere was one of those colored password-strength meters next to the text field, and it said the password I entered was \"weak\". Alright, I changed it to add some commas and dashes.\n\nThen I hit Submit, and was told that passwords can only contain letters and digits.\n\nsigh."
  post_title: "Security: Not Quite Getting It"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "security-not-quite-getting-it"
  to_ping: ""
  pinged: ""
  post_modified: "2009-07-13 07:47:25"
  post_modified_gmt: "2009-07-13 14:47:25"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/07/security-not-quite-getting-it/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 320
  post_author: 2
  post_date: "2009-08-11 08:22:19"
  post_date_gmt: "2009-08-11 15:22:19"
  post_content: "\"iPhone playing cards by Meninos\":http://www.meninos.us/products.php?product=Cards:\n\n!http://gadgets.boingboing.net/iphone-playing-cards2.jpg!"
  post_title: "The Exact Inverse of GeekGameBoard"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "the-exact-inverse-of-geekgameboard"
  to_ping: ""
  pinged: ""
  post_modified: "2009-08-11 08:22:19"
  post_modified_gmt: "2009-08-11 15:22:19"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/08/the-exact-inverse-of-geekgameboard/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 321
  post_author: 2
  post_date: "2009-08-11 10:30:33"
  post_date_gmt: "2009-08-11 17:30:33"
  post_content: "\"AppleInsider reports on the iTunes 9 rumors\":http://www.appleinsider.com/articles/09/08/11/apple_rumored_to_create_social_media_consolidation_client.html:\n\nbq. \"The social networking integration that we reported iTunes 9 would have seems to be part of a bigger social networking push by Apple,\" the report states. \"Weâ€™ve been informed that Apple has plans to tie iTunes 9 into a \"Social\" application that they plan to release in the future.\"\n\nThis sounds like the kind of app (though separate from iTunes) that Jessica Kahn and I kept trying in vain to get Apple to build, circa 2003-2005. Maybe they'll get some use out of our abandoned prototypes.\n\nbq. The report goes on to say that the new application would allow users to share their listening habits with friends [and] send music to friends\"\n\nMike Estee and I had actually prototyped this in iChat in 2003, but the feature never got approved since there were so many more _important_ things to add, like 3-way video conferencing. (Plus the fact that Apple execs turned white as a sheet if you said the words \"send music\" near them.)\n\nAnyway, personal bitterness aside, I think it's really amusing that Apple keeps shoving the kitchen sink into iTunes, since that has to be the single nastiest, hardest-to-extend codebase they have â€” it's their last remaining Carbon app, with a foundation that dates back to Casady & Greene's SoundJam, circa 1998."
  post_title: "iTunes 9 Deja Vu"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "itunes-9-deja-vu"
  to_ping: ""
  pinged: ""
  post_modified: "2009-08-11 10:30:33"
  post_modified_gmt: "2009-08-11 17:30:33"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/08/itunes-9-deja-vu/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 322
  post_author: 2
  post_date: "2009-08-14 10:16:21"
  post_date_gmt: "2009-08-14 17:16:21"
  post_content: "The other day I took it into my head to implement a \"B+tree\":http://en.wikipedia.org/wiki/B%2Btree. Why? Because they sound neat, and I've done hardly any serious programming with trees in my career. (Someone, I think Buzz Andersen, once noted that there are two kinds of programmers: those who do think in terms of trees, and those who do everything with hash tables. I'm in the latter camp.)\n\nAnd also because I'm a big fan of \"CouchDB\":http://couchdb.apache.org, and really admire its elegant storage model. It's an on-disk B-tree -- no surprises there -- but \"the file is append-only\":http://horicky.blogspot.com/2008/10/couchdb-implementation.html, which both makes it impervious to crash-related corruption, provides nearly lockless concurrency, and makes it easy to access earlier revisions.\n\nbq. [In a nutshell: Updated data values or tree nodes are appended to the file instead of overwriting the earlier versions. Since updating a node changes its location, its parent node needs to be updated too to point to the new location. This recurses up the tree, meaning any change ends up with a new root node written at the very end of the file. In fact, when you open the file you find the root by looking at the very end. Since no data is ever changed, once you open the file you're impervious to changes made by other writers since they don't affect anything you're looking at.]\n\nI'd love to use something like that for various projects, but as CouchDB is implemented in the exotic functional language Erlang, I can't really use its storage layer as-is. So: could I implement something like it in C++?\n\nThus far I have a working in-memory B+tree implementation. Inserts and deletes work, and I'm working on the iterator. Even this much was harder to get working than it should have been, or so it feels. But that always seems to be true -- algorithms sound straightforward when you read about them, but putting them into practice exposes you to all the details and subtleties inherent in hand-waving like \"now merge the node with a neighbor\".\n\nActually I haven't implemented a straight B+tree, rather \"a 'top-down' variant described by Ohad Rodeh\":http://www.cs.tau.ac.il/~ohadrode/papers/btree_TOS.pdf that's better suited to this type of application because it changes fewer numbers of interior nodes during an update.\n\nWhat's next?\n\n* Support for string keys (so far it just handles ints)\n* Serializing nodes to/from disk\n* Keeping track of which nodes are touched during an operation, and appending those to the file\n* Writing a trailer to the file to mark a successful update (and to link back to the previous trailer, for historical purposes.)\n\nSounds straightforward, but of course the devil's in the details."
  post_title: "Iâ€™m Building Me A B-Tree"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "im-building-me-a-b-tree"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:41:04"
  post_modified_gmt: "2009-10-19 16:41:04"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/08/im-building-me-a-b-tree/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 8
-
  ID: 323
  post_author: 2
  post_date: "2009-08-16 19:52:43"
  post_date_gmt: "2009-08-17 02:52:43"
  post_content: "Last year I wrote \"a series of blog posts about a peer-to-peer system called Cloudy\":http://mooseyard.com/Jens/?s=cloudy that I was developing. I was going up the stack, from messaging to identity, but didn't finish documenting all the layers I'd built. I mostly stopped working on Cloudy after I went back to gainful employment, but I keep thinking about this stuff.\n\nh2. \"Lakitu\"?\n\nI've since heard about another unrelated project nicknamed Cloudy; and the whole term \"cloud\" has gotten so debased in the past year that it now stands for outsourcing to giant hidden server farms, which is the antithesis of what I stand for. So I've decided to use the name *Lakitu* instead. Nintendo fans will recognize \"Lakitu\":http://www.mariowiki.com/Lakitu as a bit character in the Mario games -- he's a goggled turtle who rides a little one-seater cloud. This makes him an appropriate mascot for P2P technologies, I think.\n\n[I'm sure Nintendo has a trademark on the character, but they don't appear to have copyrighted the _word_ \"Lakitu\". He's not even known by that name in Japan, where he's called \"ã‚¸ãƒ¥ã‚²ãƒ \" or \"Jugem\". I have been unable to find out what \"Lakitu\" means or why they decided to use it in the English translation. I could also note threateningly that I have some intellectual-property issues of my own with Nintendo's depiction of Lakitu's smiling cloud, which is _clearly infringing_ on my son's comic-strip character \"Cloudy\":http://mooseyard.com/Jed/Cloudy/. So let's call it a draw, Iwata-san?]\n\nMy last Cloudy post was about \"verifying people's identities\":http://mooseyard.com/Jens/2008/04/cloudy-verification/, and the next one was going to be about gossip. I've become unhappy about the rather kludgy way I designed gossip in Cloudy, so yesterday I started designing a new protocol for it, which I'm going to write about.\n\nh2. \"Gossip\"?\n\nA \"gossip protocol\":http://en.wikipedia.org/wiki/Gossip_protocol is a means of broadcasting information in a distributed system. Pairs of computers periodically connect and swap new bits of information with each other; the result is that the information gets dispersed through the whole network (provided it's a connected graph.) The tricky part is avoiding infinite loops and combinatorial explosions, and optimizing the way pairs of computers swap messages so it scales well.\n\nI started defining a protocol, based on stuff I've been thinking about for a while. I don't think it's as advanced as what's reported in research papers, but I'm hoping it will work well enough when used in a socially-driven network -- one where the connections between machines are driven by the social connections between their users. Social networks have short horizons, so any particular participant only \"sees\" a constrained number of near-neighbors even though the entire network may be huge.\n\nI'm making this protocol agnostic as to the type of messaging being used. \"BLIP\":http://bitbucket.org/snej/mynetwork/wiki/BLIP/Overview will work well, but it ought to be possible to use Jabber or even email; anything that can send messages between two participants. It's also agnostic as to message content, beyond a few simple assumptions that a message has an author, a timestamp, and some arbitrary \"topic\" tags.\n\nFor example, it ought to work fine at distributing tweet-like micro-blog posts.\n\nRight now I have the protocol written down as an outline in \"Notebook\":http://www.circusponies.com. I'll flatten it out, expand it and post it here in a day or two."
  post_title: "Gossip For Lakitu"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "gossip-for-lakitu"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:41:39"
  post_modified_gmt: "2009-10-19 16:41:39"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/08/gossip-for-lakitu/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 324
  post_author: 2
  post_date: "2009-09-05 20:03:22"
  post_date_gmt: "2009-09-06 03:03:22"
  post_content: "I know, three weeks ago I said I was \"building me a B-Tree\":http://mooseyard.com/Jens/2009/08/im-building-me-a-b-tree/. I did build it, even the parts I listed under \"What's next?\" in that post, and it works. But it became apparent there was a more urgent need for a hash table, for work-related reasons, so I switched gears to build one of those on the same principles.\n\nThe biggest principle is Append-Only Storage, as described in the prior post. So I thought back to the simplest on-disk hash table I know of -- \"Dan Bernstein's CDB\":http://cr.yp.to/cdb.html -- which is very clever, but read-only. I implemented something similar, and then mashed in the CouchDB-like approach of incrementally appending only the modified sub-components.\n\nInitially I made the file a series of key-value pairs, followed by the hash-table index as an array of {hash code, position} structures, each of which pointed to the position of the corresponding key and value. Very simple. To save changes, I'd write out the changed pairs, followed by a new copy of the index. The problem with that was that the index gets large as the number of records increases, so with a 100,000-record file, changing even one record would append almost a megabyte.\n\nI had a brainstorm about how to fix that -- add a bit of tree structure. So now there's a root index of 256 pointers to sub-indexes. The 8 most significant bits of the key's hash code are looked up in the root index to find the sub-index (hash table) in which to look up the value. The advantage is that every value change only alters one sub-index; when saving, only sub-indexes that were modified, plus the root, have to be written out. So if only one key changes, that's just one sub-index, meaning only 1/256 as much data to append as before.\n\n[I thought I was really clever for coming up with this, but then when I went back and looked at the original CDB, which I hadn't seen in a year and a half, it turns out \"it does it too\":http://cr.yp.to/cdb/cdb.txt! I guess I'd just forgotten about that...]\n\nh2. What I have now\n\nWhat I have now is a persistent dictionary whose keys and values can be arbitrary data blobs. You can make changes in memory, and then save them back to disk, where they're appended to the file. (Or you can rewrite the file from scratch, which takes a bit longer but reclaims wasted space.) The file format should be virtually un-corruptible by crashes, <strike>unlike a traditional database such as sqlite</strike>. An interesting extra benefit is better concurrency -- the file doesn't require any form of read-locking, because it's perfectly safe for one client to write to the file while another is reading from it.\n\n(The grand total's about 3400 lines of C++, for both the tree and hash table.)\n\nI plan to upload this to Bitbucket soon, but I keep brutally refactoring the classes, or maliciously changing the file format, neither of which would endear me to other people trying to use the code. Hopefully things will settle down soon, now that I've got nearly all the functionality I want. I'll let you know.\n\n[Update: Struck out a comparison that's probably unfair to current versions of sqlite, judging by  \"descriptions of how it saves transactions\":http://www.sqlite.org/atomiccommit.html.]"
  post_title: "I Has A Hash Table"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "i-has-a-hash-table"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:40:54"
  post_modified_gmt: "2009-10-19 16:40:54"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2009/09/i-has-a-hash-table/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 204
  post_author: 2
  post_date: "2006-10-06 17:37:15"
  post_date_gmt: "2006-10-07 00:37:15"
  post_content: "Yes, I stopped posting to this blog for a long time.\n\nYes, when I noticed it again I found I was tired of its look and its software.\n\nYes, I consequently moved it to another engine (actually, back to WordPress) and to \"another theme\":http://themes.wordpress.net/columns/1-column/929/d3s1gn-4uck-1/, which I \"heavily customized\":http://mooseyard.com/Jens/.\n\nYes, there is no guarantee this cycle might not repeat itself again in the future â€¦ but in the meantime, hello again!\n\n(Oh, there's some good news and bad news associated with this.\n\n* The good news: WordPress has comment-spam filtering, so I've re-enabled comments. Make yourselves at home.\n* The bad news: The unique IDs of the posts are all different, so news readers will think all of the posts are new. Sorry! This will only happen once, though.)"
  post_title: "Blog 3.0 (beta)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "closed"
  ping_status: "closed"
  post_password: ""
  post_name: "blog-30-beta"
  to_ping: ""
  pinged: ""
  post_modified: "2006-10-06 17:37:15"
  post_modified_gmt: "2006-10-07 00:37:15"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/words/2006/10/blog-30-beta/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 205
  post_author: 2
  post_date: "2006-10-07 10:14:56"
  post_date_gmt: "2006-10-07 17:14:56"
  post_content: "I always find this \"blog\" thing weird because, unlike more-centralized social network services, there's not an inbuilt sense of community. This is simply a black box into which I type words, and they pop out on a page, and someone might or might not be paying attention. It makes me feel like I'm Helen Keller standing on a soapbox.\n\nI know there are \"services\":http://technorati.com that help you find out who's writing about you [_centralized_ services ... so much for blogging as a distributed platform.] So I'm getting myself all signed up with those, in anticipation of nervously re-checking my blog rank every 15 minutes.\n\nBut it's not the same as comments. Comments are the spare change of the attention economy. There is no one so rich they don't get a thrill out of finding a quarter on the street. To continue the strained analogy above, it's like I'm holding a hat in my hand as I lecture/declaim/narrate/confess from my soapbox, and I feel the little clinks of the coins falling in and it's like they're spelling _I hear you, you're interesting_ into my palm.\n\n*Therefore, I am asking of you reading this that you please comment on this post.* Just a quick \"Hi, I read your blog\", like a wave or passing-in-the-hallway smile. Thanks.\n\n*PS:* For the occasion, I've enabled \"OpenID\":http://openid.net authentication for comments. If you have a LiveJournal or TypePad account, or another form of OpenID, you can just enter it in the comment form."
  post_title: "Please wave &#8220;hello&#8221;!"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "please-wave-hello"
  to_ping: ""
  pinged: ""
  post_modified: "2006-10-07 10:14:56"
  post_modified_gmt: "2006-10-07 17:14:56"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/10/please-wave-hello/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 77
-
  ID: 206
  post_author: 2
  post_date: "2006-10-09 22:51:59"
  post_date_gmt: "2006-10-10 05:51:59"
  post_content: "I've always picked at my nails, bitten them, the cuticles too. A sign of nervousness, I know, and unsightly and unsanitary. Can't help it, though. The nails, fingertips, are always growing, always in different configurations, and some of those configurations are just wrong, asymmetrical, with sharp bits sticking out. And I can't leave those alone: I always think in the moment that I can peel off the wrong part and leave the nail smooth and right. But I really know that it almost always makes it worse.\n\nbq. Suggested background music: Frost - \"Steelwound\":http://www.posteverything.com/artists/release.php?id=9082\n[audio:Steelwound.mp3]\n\nI dreamed once, in high school, that my fingernails had turned to bone: spongy like the inside of a broken chicken leg, thick and jagged-edged. I didn't touch them for a week after that, but the lesson didn't last. I never learn, a fact that has become only too apparent in college.\n\nI kicked open the door and stumbled into the bathroom; the door shut behind me, bringing relative stillness, and I realized how wasted I was. It always comes on gradually, and I'm at a party and there's loud music and loud people and everyone's inhibitions are lowering in synchrony and the drinks are simultaneously cold and burning going down â€” in the hot living room it's just natural and normal, the way I feel. But after the sudden transition to the cold and silence and bare walls of the bathroom, I sense this bubble of inebriation that I've brought in inside myself. It's a familiar sensation from parties, part of that life-cycle that begins with the ceremonial first drink and ends God knows where.\n\nI sat there on the toilet, just emptying my bladder of toxins but not trusting my balance or aim enough to stand, and picked idly at the paint on the wall next to me with the hand not occupied with the Corona bottle. Dirty looking yellow paint of Cameron's crappy apartment bathroom, peeling off of whatever was underneath. This was an old building, periodically spruced up by slapping on another coat of paint, and who knew how far down the layers went? The latest-but-one was evidently green.\n\nI was revealing more of it, picking off the yellow. It actually came off very satisfyingly, not just chipping off in bits but more often peeling in strips that could be coaxed along for a few inches. Amid the thumping of the bass from outside and the thudding of my pulse through my temples, I sat on my little throne and idly transformed this corner of wall. The revealed green was pretty, with a lacquer-like translucent depth to it, and had a pattern of gold lines across it. Fine gold lines, running parallel but then changing direction. Wallpaper? Not making a repeating pattern at all, but something with a strong sense of order. I ran my fingertips across it and felt the texture, the gold lines raised slightly. Smell of ozone.\n\nI hated that smell â€” it rose in clouds from my best friend Greg's model train set as the little HO-gauge cars whizzed past the tiny fake trees and bushes made of painted lichen. His little sister Clarisse, whom we alternately played with and tormented, sat with us that afternoon under the particle-board table in the upstairs playroom. I heard the clicking of the trains on tracks above, and the ozone smell drifted down across us, making me feel delirious and sick. I left in the back of my mom's station wagon with the foreknowledge that something was badly broken, over, gone; I cried all the way home. The next morning at school Greg pointedly switched desks, away from me, next to the cruel boys we hated, and became instantly one of them. A covalent bond. The lens of their attentions focused on me for a long time after that. Next year I came across a diagram of an ozone molecule in a science textbook and instantly vomited across it.\n\nSomeone had been banging on the door for some time now. I had yellow paint crud all under my fingernails. Two of them were bleeding. Several square feet of the wall were revealed by my efforts as what suddenly came into focus as printed circuit board: green resin overlaid with thin stamped copper wire traces. Tiny grids of holes marked where IC chips and other components would be inserted. The holes were mostly still clogged with yellow paint, but a few were open and I could discern red lights blinking behind.\n\nThe banging continued. I took a deep shuddering breath, pulled up my pants and stepped over and unlocked the door. On the other side Greg lowered his fist and partially relaxed his annoyed expression as he saw me. \"Russ, you've been in here for like ten minutes, and I gotta take a fucking piss, man, this shithole apt's only got one toilet, you know?\"\n\nI felt a rush of simultaneous terror and relief. Greg and I were, if no longer enemies, hardly close anymore; but there was clearly some bad stuff going down mentally inside me, and Greg could be counted on as an impartial observer, reliable narrator, looking every inch the straight-edge with his buzzcut and Minor Threat t-shirt. _\"Don't drink, don't smoke, what do you do?\"_ went the old Adam Ant refrain in my head. I believe I started expressing something along the lines of \"Greg, fuck, man, there must have been some kind of bad shit in the punch bowl, DMT or angel dust or something, I'm in here seeing stuff and it's freaking me out...\"\n\nGreg's eyes swiveled past me and widened. \"Russ, what the hell did you do to the wall? You're taking the paint off? Felice is going to kill you for this.\" He pushed me aside and ran his fingers over the revealed surface. \"Jesus, this is a PC board, like some kind of motherboard. And it's underneath the paint? You didn't put this here, it was underneath all along?\" He got on his knees and leaned in close. \"Smells like something's shorting out. Holy shit, there's some kind of lights in there, behind the wall...\"\n\nMy heart sank, stomach churned. Was this worse or better than a hallucination? I felt dizzier and reached for the wall to steady myself. Greg, analytical EE major, pushed the door shut and pulled the dangling string to turn off the light bulb, the better to apprehend the blinkenlights.\n\nRed lamps burned in the darkness, pixelated through the grids of little holes in the board. Monochrome gallium-arsenide-red lamps that were far away and huge and opened and shut like eyes. Ozone breathed out at us. I screamed, and thrashed my hands through the darkness feeling for the light cord. The beer bottle still in one hand hit something hard and broke with a crack. Greg yelled, I dimly saw his red-outlined silhouette grab its head, slip and fall. There was a second uglier-sounding crack. The cord finally materialized in my hand, I pulled hard till it snapped, and blessed tungsten-gold light flooded down.\n\nGreg lay with his head next to the toilet. He wasn't moving. His forehead looked dented, and there was blood. I had no idea what to do, besides stupidly watching the blood trickle toward the wall. Music continued to thump outside, and someone shrieked. The blood had reached the green-peeled wall and appeared to be oozing through the holes. I continued staring.\n\nGreg's body jerked in a sudden spasm that terrified me, and came to rest with one leg sticking through the wall. It did not appear to make a hole; the leg just went straight into the green circuit board and disappeared. My addled, shocked and now guiltily paranoid brain made a snap insight â€¦ and I reached down, grabbed Greg's body around the waist, and started pushing it through the wall. It went in smoothly, without resistance, clothes and all. The red lights were growing brighter: even with the light bulb on I could see them sticking out in little pinpoint beams, out of the holes and through the smoke-laden atmosphere. I left the head for last, for some reason, and had some trouble getting it through â€” I found out why after I shoved it hard in the face with my boots, and little clinks echoed on the tile floor as Greg finally and blessedly slid out of sight. There were eight gnarled metal bits of fillings left behind on the tile floor.\n\nI put the pointy lumps in my pocket and backed away from the stabbing red beams, which now had the sparkly diffraction patterns of laser light. I could see red dots projected all over the rest of the yellow walls, and the paint began sizzling and peeling away with a nauseating smell of molten solder and ozone, revealing (of course) more circuit board. Abruptly I was back in the living room, the door slamming behind me, navigating my way through the loud wet darkness out of the party. The lights were off, but with the red-lit afterglow in my eyes I could see everything and everyone in translucent skeletal form and pick my way through. There were some half-hearted gropes at my legs from people whom I might otherwise have willingly allowed to pull me down, but I ran out as fast as I could.\n\nI piss in alleys nowadays. I don't go inside any buildings if I can help it. Winter's on the horizon but I don't think that far ahead, to be honest. I've been following you for a few days. _What has it got in its pocketses?_ The afterimages are still with me and I can see all the way through you, see through that coat, see the black shadows of the little mercury amalgam pebbles in the pocket that your finger-bones fiddle with idly. You've been through this too. I can't even look at anyone else anymore, but you'll understand. Let's talk."
  post_title: "Ozone"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "open"
  post_password: ""
  post_name: "ozone"
  to_ping: ""
  pinged: ""
  post_modified: "2006-10-09 22:51:59"
  post_modified_gmt: "2006-10-10 05:51:59"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://mooseyard.com/Jens/2006/10/ozone/"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 332
  post_author: 2
  post_date: "2009-09-07 23:34:16"
  post_date_gmt: "2009-09-08 06:34:16"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of plums in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't elephants like playing cards in the jungle?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall from of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall from the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why do elephants paint their toenails green?\nA: So they can hide in the pea patch.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:34:16"
  post_modified_gmt: "2009-09-08 06:34:16"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 340
  post_author: 2
  post_date: "2009-09-07 23:48:47"
  post_date_gmt: "2009-09-08 06:48:47"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of grapes in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't African elephants like to play cards?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall out of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall out of the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision-9"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:48:47"
  post_modified_gmt: "2009-09-08 06:48:47"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision-9/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 333
  post_author: 2
  post_date: "2009-09-07 23:34:20"
  post_date_gmt: "2009-09-08 06:34:20"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of plums in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't elephants like playing cards in the jungle?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall from of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall from the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why do elephants paint their toenails green?\nA: So they can hide in the pea patch.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:34:20"
  post_modified_gmt: "2009-09-08 06:34:20"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 334
  post_author: 2
  post_date: "2009-09-07 23:42:13"
  post_date_gmt: "2009-09-08 06:42:13"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of grapes in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't elephants like playing cards in the jungle?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall from of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall from the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why do elephants paint their toenails green?\nA: So they can hide in the pea patch.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:42:13"
  post_modified_gmt: "2009-09-08 06:42:13"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 335
  post_author: 2
  post_date: "2009-09-07 23:42:17"
  post_date_gmt: "2009-09-08 06:42:17"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of grapes in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't elephants like playing cards in the jungle?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall from of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall from the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why do elephants paint their toenails green?\nA: So they can hide in the pea patch.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:42:17"
  post_modified_gmt: "2009-09-08 06:42:17"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 336
  post_author: 2
  post_date: "2009-09-07 23:44:44"
  post_date_gmt: "2009-09-08 06:44:44"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of grapes in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't African elephants like to play cards?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall from of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall from the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why do elephants paint their toenails green?\nA: So they can hide in the pea patch.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:44:44"
  post_modified_gmt: "2009-09-08 06:44:44"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 337
  post_author: 2
  post_date: "2009-09-07 23:44:47"
  post_date_gmt: "2009-09-08 06:44:47"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of grapes in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't African elephants like to play cards?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall from of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall from the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why do elephants paint their toenails green?\nA: So they can hide in the pea patch.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision-6"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:44:47"
  post_modified_gmt: "2009-09-08 06:44:47"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision-6/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 338
  post_author: 2
  post_date: "2009-09-07 23:46:07"
  post_date_gmt: "2009-09-08 06:46:07"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of grapes in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't African elephants like to play cards?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall out of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall out of the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why do elephants paint their toenails green?\nA: So they can hide in the pea patch.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision-7"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:46:07"
  post_modified_gmt: "2009-09-08 06:46:07"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision-7/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 339
  post_author: 2
  post_date: "2009-09-07 23:46:11"
  post_date_gmt: "2009-09-08 06:46:11"
  post_content: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door.\n\nQ: What's the difference between a dozen eggs and an elephant?\nA: If you don't know, I'm sure not going to send you to the store for a dozen eggs!\n\nQ: What the difference between a herd of elephants and a bunch of grapes?\nA: Grapes are _purple_, elephants are _gray_.\n\nQ: How do you stop a charging elephant?\nA: Take away his credit card.\n\nQ: What did Tarzan say when the elephants charged?\nA: \"Look out, here come the elephants!\"\n\nQ: What did Tarzan say when he saw a herd of elephants in the distance?\nA: \"Look, a herd of elephants in the distance!\"\n\nQ: What did Tarzan say when he saw a herd of elephants with sunglasses?\nA: Nothing. He didn't recognize them.\n\nQ: What did Tarzan say when he saw a herd of giraffes in the distance?\nA: \"Haha! You fooled me once with those disguises, but not this time!\"\n\nQ: What did Jane say when she saw a herd of elephants in the distance?\nA: \"Look! A herd of grapes in the distance!\" <small>[Jane is color blind.]</small>\n\nQ: Why are pygmies so short?\nA: They listened to Jane, and looked at the plums.\n\nQ: How do you get down from an elephant?\nA: You donâ€™t! You get down from a goose.\n\nQ: How does an elephant get down from a tree?\nA: He doesn't! Even elephants know you get down from a goose!\n\nQ: Oh, all right. How do elephants get _out of_ trees?\nA: They float down on the leaves between 4pm and 6pm.\n\nQ: What do you call an elephant that rides a bus?\nA: A passenger.\n\nQ: Why don't African elephants like to play cards?\nA: Because of all the cheetahs.\n\nQ: What's the difference between an African elephant and an Indian elephant?\nA: About 3,000 miles.\n\nQ: Why do elephants wear sandals?\nA: So that they don't sink in the sand.\n\nQ: Why do ostriches stick their head in the ground?\nA: They're looking for the elephants that forgot to wear their sandals.\n\nQ: What did the peanut say to the elephant?\nA: Nothing: peanuts can't talk.\n\nQ: What did the grape say when the elephant stepped on it?\nA: Nothing: it just let out a little whine.\n\nQ: Why did the elephant fall out of the tree?\nA<sub>1</sub>: She slipped.\nA<sub>2</sub>: She was dead.\n\nQ: Why did the second elephant fall out of the tree?\nA: He was glued to the first one.\n\nQ: Why did the third elephant fall out of the tree?\nA: He thought it was a game.\n\nQ: Why did the fourth elephant fall out of the tree?\nA: Because when his mother asked â€œIf all your friends jumped out of a tree, would you?â€, he said â€œYes!â€\n\nQ: Why did the tree fall down?\nA: It thought it was an elephant.\n\nQ: What's gray on the inside and red and white on the outside?\nA: Campbell's Cream Of Elephant Soup.\n\nQ: Why did the elephant stand on the marshmallow?\nA: So he wouldn't fall into the hot chocolate.\n\nQ: What do you know when you see three elephants walking down the street wearing pink sweatshirts?\nA: They're all on the same team.\n\nQ: What's gray and has four legs and a trunk?\nA: A mouse going on vacation.\n\nQ: What do you call an elephant with a machine gun?\nA: \"Sir\".\n\nQ: What do you call an elephant wearing pink earmuffs and a dress?\nA: Anything you want: it can't hear you.\n\nQ: Why do elephants drink so much?\nA: To try to forget.\n\nQ: What's gray, yellow, gray, yellow, gray, yellow, gray, yellow ... ?\nA: An elephant rolling down a hill with a daisy in its mouth.\n\nQ: What's gray, yellow, gray, yellow, <em>THUMP</em>, gray, black, blue, gray, black, blue ... ?\nA: An elephant rolling down a hill with a daisy in its mouth, that hit a rock.\n\nQ: Why do ducks have flat feet?\nA: So they can stamp out forest fires.\n\nQ: Why do elephants have such large, tough feet?\nA: So they can stamp out flaming ducks.\n\nQ: What's gray and puts out forest fires?\nA: Smokey The Elephant.\n\nQ: What do you get when you cross elephants with peanut butter?\nA<sub>1</sub>: Elephants that stick to the roof of your mouth.\nA<sub>2</sub>: Elephants that spread easily.\n\nQ: Why did the elephant wear red sneakers?\nA: So he could hide in the apple tree.\n\nQ: Why do elephants paint their toenails red?\nA: To hide in cherry trees.\n\nQ: Why do elephants hide in cherry trees?\nA: So they can jump out and stomp on people.\n\nQ: How did Tarzan die?\nA: Picking cherries.\n\nQ: What do you get if you cross an elephant with a kangaroo?\nA: Big holes all over Australia.\n\nQ: What kind of elephants live at the North Pole?\nA: Cold ones.\n\nQ: What's convenient and weighs 20,000 pounds?\nA: An elephant six-pack.\n\nQ: How do elephants talk to each other?\nA: By 'elephone.\n\nQ: Why do elephants have cracks between their toes?\nA: For carrying their library cards.\n\nQ: What's gray, has large wings, a long nose, and gives money to elephants?\nA: The Tusk Fairy.\n\nQ: Where do elephants with skin problems go?\nA: Pachydermatologists.\n\nQ: What do you get when you cross an elephant with a rhinoceros?\nA: Eliphino <small>_(Hell-if-I-Know)_</small>\n\nQ: What's the difference between an elephant and a piece of paper?\nA: You can't make a paper airplane out of an elephant.\n\nQ: How do you make an elephant float?\nA: Take two scoops of ice cream, some soda, and one elephant.\n\nQ: How can you tell if there's an elephant in the ice cream shop?\nA: His bike is outside.\n\nQ: How can you tell if there are _two_ elephants in the ice cream shop?\nA: There's a dent in the cross-bar.\n\nQ: How can you tell if there are _three_ elephants in the ice cream shop?\nA: Stand on the bike and have a look in the window.\n\nQ: Why do elephants have gray skin?\nA: To hold their insides together.\n\nQ: Why are elephants so wrinkled?\nA: Have you ever tried to iron one?\n\nQ: Why do elephants have trunks?\nA<sub>1</sub>: Because they'd look silly with glove compartments.\nA<sub>2</sub>: Because they don't have pockets.\n\nQ: Why do elephants have wrinkled knees?\nA: From playing marbles.\n\nQ: Why do elephants have crinkly feet?\nA: To give the ants a chance.\n\nQ: Why are elephants large, gray and wrinkled?\nA: If they were small, round and white, they'd be aspirins.\n\nQ: What time is it when an elephant sits on your fence?\nA: Time to get a new fence.\n\nQ: What time is it when an elephant sit on your sofa?\nA: Time to get a new sofa.\n\nQ: What time is it when an elephant sits on your toilet?\nA: Time to run away.\n\nQ: Where do you find elephants?\nA: It depends on where you left them.\n\nQ: What do you say when an elephant sneezes?\nA: â€œGesundheitâ€.\n\nQ: How do you fit 5 elephants in a Volkswagen Beetle?\nA: Two in the front, two in the back, and one in the glove compartment.\n\nQ: What goes, â€œClomp, clomp, clomp, squish, clomp, clomp, clomp, squish?\"\nA: An elephant with a wet sneaker.\n\nQ: Why did the elephant cross the road?\nA: It was the chickenâ€™s day off.\n\nQ: Why did the elephant lie down in the middle of the road?\nA: To trip the ants.\n\nQ: What would happen if an elephant sat in front of you at the movies?\nA: You would miss most of the show.\n\nQ: What is the biggest type of ant?\nA: An eleph-ant.\n\nQ: What's as big as an elephant, but doesn't weigh anything?\nA: An elephant's shadow.\n\nQ: Why were the elephants kicked out of the swimming pool?\nA: They couldn't keep their trunks up.\n\nQ: Why wasn't the elephant allowed on the airplane?\nA: Because his trunk wouldn't fit under the seat.\n\nQ: Why were the elephants the last animals off the ark?\nA: Because they had to pack their trunks.\n\nQ: Why do elephants paint their toenails green?\nA: So they can hide in the pea patch.\n\nQ: Why did the elephant paint her toenails all different colors?\nA: So she could hide in a bag of m&mâ€™s.\n\nQ: What would you get if you crossed two fish with two elephants?\nA: A pair of swimming trunks.\n\nQ: What should you do to a blue elephant?\nA: Cheer it up.\n\nQ: What should you do to a red elephant?\nA: Quit telling it dirty jokes.\n\nQ: What should you do to a yellow elephant?\nA: Teach it to be brave.\n\nQ: What should you do to a white elephant?\nA: Hold its nose until it turns blue, then follow the directions for a blue elephant.\n\nQ: What should you do to a green elephant?\nA<sub>1</sub>: Wait until it gets ripe.\nA<sub>2</sub>: Bury it! You were only supposed to hold its nose until it turned blue.\n\nQ: How did the cheerleader die?\nA: She tried to catch an elephant doing a split.\n\nQ: How does an elephant get out of a phone booth?\nA: Same way she got in.\n\nQ: Why don't elephants ride bicycles?\nA: They don't have thumbs to ring the bell.\n\nQ: What weighs 5,000 pounds and wears glass slippers?\nA: Cinderelephant!\n\nQ: What has 6 legs, 3 ears, 4 tusks, and 2 trunks?\nA: An elephant with spare parts.\n\nQ: What's large and gray and goes around and around in circles?\nA: An elephant stuck in a revolving door.\n\nQ: What do elephants have that no other animals have?\nA: Baby elephants.\n\nQ: Why do elephants stomp on people?\nA: They like the squishy feeling between their toes.\n\nQ: What game do elephants like to play most?\nA: Squash!\n\nQ: What did the cat say to the elephant?\nA: \"Meow!\"\n\nQ: Why do elephants paint the soles of their feet yellow?\nA: So they can hide upside-down in the custard.\n\nQ: Did you ever find an elephant in your custard?\nA: No? Well, it must work.\n\nQ: How do you catch an elephant?\nA: Wait at a street corner, and when you see the elephant raise your hand and yell, \"Yo, elephant!\"\n\nQ: How does an astronomer catch an elephant?\nA: With a telescope, a matchbox, and a pair of tweezers. Go to the jungle, and when you see an elephant, turn the telescope the wrong way around and look through it. The elephant will now be so small that you can pick it up with the tweezers and put it in the matchbox.\n\nQ: How does a programmer catch an elephant?\nA: Fly to Cape Town and head east. When you reach the ocean, go slightly north and head west. Keep repeating this until you see an elephant, then grab it.\n\nQ: How does an _experienced_ programmer catch an elephant?\nA: The same way; but before you start, you place an elephant at Gibraltar, so you won't fall into the Mediterranean if there are no elephants.\n\nQ: How do you get an elephant into a matchbox?\nA: Take out all the matches first.\n\nQ: How do you get an elephant out of the water?\nA: Wet.\n\nQ: How do you get two elephants out of the water?\nA: One by one.\n\nQ: How do you smuggle an elephant across the border?\nA: Put a slice of bread on each side, and call him \"lunch\".\n\nQ: How do you shoot a blue elephant?\nA: With a blue elephant gun, of course.\n\nQ: How do you shoot a yellow elephant?\nA: Wait for it to run away.\n\nQ: What was the elephant doing on the freeway?\nA: About 5 miles per hour.\n\nQ: What do you call two elephants on a bicycle?\nA: Optimistic!\n\nQ: What do you get if you take an elephant into the city?\nA: Free parking.\n\nQ: What do you get if you take an elephant into work?\nA: Sole use of the elevator.\n\nQ: Why do elephants wear tiny green hats?\nA: To sneak across a pool table without being seen.\n\nQ: How many elephants does it take to change a light bulb?\nA: Don't be stupid, elephants can't change light bulbs!\n\nQ: What do you get if you cross an elephant with a whale?\nA: A submarine with a built-in snorkel.\n\nQ: How do you know if an elephant's been sleeping in your bed?\nA: Peanut shells under the pillow.\n\nQ: How do you know if there's an elephant in your bed right now?\nA: He has a big 'E' on his pajamasâ€™ jacket pocket.\n\nQ: How do you know if thereâ€™s an elephant under the bed?\nA: Your nose is touching the ceiling.\n\nQ: How do you get an elephant on top of an oak tree?\nA: Stand him on an acorn and wait fifty years.\n\nQ: What if you don't want to wait fifty years?\nA: Parachute him from an airplane.\n\nQ: Why isn't it safe to climb oak trees between 2 and 4 in the afternoon?\nA: Because that is when the elephants practice their parachute jumping.\n\nQ: Why are elephantsâ€™ feet shaped that way?\nA: To fit on lily pads.\n\nQ: Why isn't it safe to go into the pond between 4 and 6 in the afternoon?\nA: That's when the elephants are walking on the lily pads.\n\nQ: Why are frogs so short?\nA: They go onto the lily pads between 4 and 6 in the afternoon.\n\nQ: What do you give a seasick elephant?\nA: Lots of room.\n\nQ: What's more difficult than getting an elephant into the back seat of your car?\nA: Getting _two_ elephants into the back seat of your car.\n\nQ: How do you know when an elephant has been in the baby carriage?\nA: By the footprints on the baby's forehead.\n\nQ: Why did the elephant wear sunglasses?\nA: With all the silly elephant jokes going around, it didn't want to be recognized.\n\nQ: What do elephants do for laughs?\nA: They tell people jokes.\n"
  post_title: "The Top 131 Elephant Jokes"
  post_excerpt: "So far, this blog's main claim to fame has been as the #2-ranked Google hit for \"[apricot jam recipe]\":http://www.google.com/search?q=apricot+jam+recipe. But that's no longer enough to sustain my extravagant lifestyle, so I'm following the next most obvious business opportunity: Elephant jokes! These were huge (the jokes) when I was a kid, but they seem to have been largely forgotten, which is a shame. I tested them out on my kids today, and they still work fine.\n\nThese jokes are, admittedly, about as unoriginal as \"my jam recipe\":http://jens.mooseyard.com/2007/07/apricot-jam-recipe/. And the list was generated roughly the same way as the jam, by picking pre-existing collections, cleaning off the typos, and boiling them down a lot. In fact, I'll lead off with an apricot joke:\n\nQ: How is an elephant like an apricot?\nA: They are both gray. Well, except the apricot.\n\nQ: How can you tell if an elephant is in the refrigerator?\nA: The door won't shut.\n\nQ: How can you tell if an elephant has been in the refrigerator earlier?\nA: Footprints in the butter.\n\nQ: How do you get an elephant into the fridge in the first place?\nA: Open door; Insert elephant; Close door.\n\nQ: How do you get a giraffe into the fridge?\nA: Open door; Remove elephant; Insert giraffe; Close door."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "331-revision-8"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-07 23:46:11"
  post_modified_gmt: "2009-09-08 06:46:11"
  post_content_filtered: ""
  post_parent: 331
  guid: "http://jens.mooseyard.com/2009/09/331-revision-8/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 341
  post_author: 2
  post_date: "2009-09-20 20:51:29"
  post_date_gmt: "2009-09-21 03:51:29"
  post_content: "\"As promised\":http://mooseyard.com/Jens/2009/09/i-has-a-hash-table/ ...\n\nh2. \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home is a lightweight, reliable key-value store with multi-version concurrency control.\n\n!http://bitbucket.org/snej/ottoman/wiki/ottoman.jpg!\n\nA key-value store is a persistent on-disk dictionary that maps arbitrary keys (usually short text strings) to arbitrary values (binary data of any length). There's already a large and venerable family of libraries that do this, often referred to by the name \"db\". Notable members include \"dbm\":http://en.wikipedia.org/wiki/Dbm, \"Berkeley DB\":http://www.oracle.com/database/berkeley-db/index.html, \"cdb\":http://cr.yp.to/cdb.html and \"Tokyo Cabinet\":http://tokyocabinet.sourceforge.net. What makes \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home different? \n\n# It tries to provide \"*extremely reliable storage*\":http://bitbucket.org/snej/ottoman/wiki/Storage, immune to \"file corruption\":http://bitbucket.org/snej/ottoman/wiki/Corruption caused by operating system crashes or power failure while writing.\n# It *stores past versions* of the database, as a useful side-effect of the way it works. Applications can use this to provide features like snapshots, timelines or persistent undo. (You can prune old versions, for space or privacy reasons, by writing a fresh copy of the file.)\n# It has *very low memory overhead*. The file and its contents are memory-mapped, so even large values can be accessed without having to copy them into the heap. (Opening a database only mallocs a few hundred bytes!)\n# It allows *concurrent read/write access* by multiple processes. *Optimistic concurrency* â€” as used by version-control systems like Subversion â€” keeps file locking to a minimum: readers are //never// blocked at all, and writers are only blocked briefly (clients can't lock the database for arbitrary periods, only for as long as it takes the accumulated changes to be written to disk.)\n\nWhy is it named after a footstool? First, as an homage to \"CouchDB\":http://couchdb.apache.org. Secondly, it turns out \"ottomans can be used for storage\":http://images.google.com/images?q=storage%20ottoman. Third, because I have a mild fascination with \"Asian and Islamic history\":http://en.wikipedia.org/wiki/Ottoman_empire.\n\n\"_...Read more at the project home page!_\":http://bitbucket.org/snej/ottoman/wiki/Home"
  post_title: "Announcing Ottoman"
  post_excerpt: "h2. \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home is a lightweight, reliable key-value store with multi-version concurrency control.\n\n!http://bitbucket.org/snej/ottoman/wiki/ottoman.jpg!\n\nA key-value store is a persistent on-disk dictionary that maps arbitrary keys (usually short text strings) to arbitrary values (binary data of any length). There's already a large and venerable family of libraries that do this, often referred to by the name \"db\". Notable members include \"dbm\":http://en.wikipedia.org/wiki/Dbm, \"Berkeley DB\":http://www.oracle.com/database/berkeley-db/index.html, \"cdb\":http://cr.yp.to/cdb.html and \"Tokyo Cabinet\":http://tokyocabinet.sourceforge.net. What makes \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home different?"
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "announcing-ottoman"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:38:37"
  post_modified_gmt: "2009-10-19 16:38:37"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=341"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 7
-
  ID: 342
  post_author: 2
  post_date: "2009-09-20 20:51:29"
  post_date_gmt: "2009-09-21 03:51:29"
  post_content: "\"As promised\":http://mooseyard.com/Jens/2009/09/i-has-a-hash-table/ ...\n\nh2. \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home is a lightweight, reliable key-value store with multi-version concurrency control.\n\n!http://bitbucket.org/snej/ottoman/wiki/ottoman.jpg!\n\nA key-value store is a persistent on-disk dictionary that maps arbitrary keys (usually short text strings) to arbitrary values (binary data of any length). There's already a large and venerable family of libraries that do this, often referred to by the name \"db\". Notable members include \"dbm\":http://en.wikipedia.org/wiki/Dbm, \"Berkeley DB\":http://www.oracle.com/database/berkeley-db/index.html, \"cdb\":http://cr.yp.to/cdb.html and \"Tokyo Cabinet\":http://tokyocabinet.sourceforge.net. What makes \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home different? \n\n# It tries to provide \"*extremely reliable storage*\":http://bitbucket.org/snej/ottoman/wiki/Storage, immune to \"file corruption\":http://bitbucket.org/snej/ottoman/wiki/Corruption caused by operating system crashes or power failure while writing.\n# It *stores past versions* of the database, as a useful side-effect of the way it works. Applications can use this to provide features like snapshots, timelines or persistent undo. (You can prune old versions, for space or privacy reasons, by writing a fresh copy of the file.)\n# It has *very low memory overhead*. The file and its contents are memory-mapped, so even large values can be accessed without having to copy them into the heap. (Opening a database only mallocs a few hundred bytes!)\n# It allows *concurrent read/write access* by multiple processes. *Optimistic concurrency* â€” as used by version-control systems like Subversion â€” keeps file locking to a minimum: readers are //never// blocked at all, and writers are only blocked briefly (clients can't lock the database for arbitrary periods, only for as long as it takes the accumulated changes to be written to disk.)\n\nWhy is it named after a footstool? First, as an homage to \"CouchDB\":http://couchdb.apache.org. Secondly, it turns out \"ottomans can be used for storage\":http://images.google.com/images?q=storage%20ottoman. Third, because I have a mild fascination with \"Asian and Islamic history\":http://en.wikipedia.org/wiki/Ottoman_empire.\n\n\"_...Read more at the project home page!_\":http://bitbucket.org/snej/ottoman/wiki/Home"
  post_title: "Announcing Ottoman"
  post_excerpt: "h2. \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home is a lightweight, reliable key-value store with multi-version concurrency control.\n\n!http://bitbucket.org/snej/ottoman/wiki/ottoman.jpg!\n\nA key-value store is a persistent on-disk dictionary that maps arbitrary keys (usually short text strings) to arbitrary values (binary data of any length). There's already a large and venerable family of libraries that do this, often referred to by the name \"db\". Notable members include \"dbm\":http://en.wikipedia.org/wiki/Dbm, \"Berkeley DB\":http://www.oracle.com/database/berkeley-db/index.html, \"cdb\":http://cr.yp.to/cdb.html and \"Tokyo Cabinet\":http://tokyocabinet.sourceforge.net. What makes \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home different?"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "341-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-20 20:51:29"
  post_modified_gmt: "2009-09-21 03:51:29"
  post_content_filtered: ""
  post_parent: 341
  guid: "http://jens.mooseyard.com/2009/09/341-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 343
  post_author: 2
  post_date: "2009-09-20 21:54:45"
  post_date_gmt: "2009-09-21 04:54:45"
  post_content: ""
  post_title: "moose-storage-ottoman.jpg"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "moose-storage-ottoman-jpg"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-20 21:54:45"
  post_modified_gmt: "2009-09-21 04:54:45"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/wp-content/uploads/2009/09/moose-storage-ottoman.jpg"
  menu_order: 0
  post_type: "attachment"
  post_mime_type: "image/jpeg"
  comment_count: 0
-
  ID: 344
  post_author: 2
  post_date: "2009-09-20 21:55:50"
  post_date_gmt: "2009-09-21 04:55:50"
  post_content: ""
  post_title: "abstract-design-storage-ottoman.jpg"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "abstract-design-storage-ottoman-jpg"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-20 21:55:50"
  post_modified_gmt: "2009-09-21 04:55:50"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/wp-content/uploads/2009/09/abstract-design-storage-ottoman.jpg"
  menu_order: 0
  post_type: "attachment"
  post_mime_type: "image/jpeg"
  comment_count: 0
-
  ID: 345
  post_author: 2
  post_date: "2009-09-20 21:56:46"
  post_date_gmt: "2009-09-21 04:56:46"
  post_content: "It's got a moose! But then I found the ottoman with hanging _files_ inside and it was even more perfect...\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2009/09/moose-storage-ottoman.jpg\" alt=\"moose-storage-ottoman.jpg\" border=\"0\" width=\"416\" height=\"349\" /></div>\n\nI thought this one was pretty damn stylish too:\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2009/09/abstract-design-storage-ottoman.jpg\" alt=\"abstract-design-storage-ottoman.jpg\" border=\"0\" width=\"550\" height=\"504\" /></div>"
  post_title: "Alternate images for Ottoman logo"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "alternate-images-for-ottoman-logo"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:38:11"
  post_modified_gmt: "2009-10-19 16:38:11"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=345"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 346
  post_author: 2
  post_date: "2009-09-20 21:56:46"
  post_date_gmt: "2009-09-21 04:56:46"
  post_content: "It's got a moose! But then I found the ottoman with hanging _files_ inside and it was even more perfect...\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2009/09/moose-storage-ottoman.jpg\" alt=\"moose-storage-ottoman.jpg\" border=\"0\" width=\"416\" height=\"349\" /></div>\n\nI thought this one was pretty damn stylish too:\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2009/09/abstract-design-storage-ottoman.jpg\" alt=\"abstract-design-storage-ottoman.jpg\" border=\"0\" width=\"550\" height=\"504\" /></div>"
  post_title: "Alternate images for Ottoman logo"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "345-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-20 21:56:46"
  post_modified_gmt: "2009-09-21 04:56:46"
  post_content_filtered: ""
  post_parent: 345
  guid: "http://jens.mooseyard.com/2009/09/345-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 347
  post_author: 2
  post_date: "2009-09-24 21:52:21"
  post_date_gmt: "2009-09-25 04:52:21"
  post_content: "I've pushed out a few \"updates to the Ottoman library\":http://bitbucket.org/snej/ottoman/changesets/ today. These fix a couple of embarrassing bugs, and also add an API in regular ol' Objective-C for those of you who aren't into that funky \"C++\" stuff.\n\n(The Cocoa stuff uses MYUtilities, so if you're not already using that, please read the \"setup instructions\":http://bitbucket.org/snej/mynetwork/wiki/Setup.)"
  post_title: "Ottoman For Cocoa (and bug-fixes)"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "ottoman-for-cocoa-and-bug-fixes"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:37:46"
  post_modified_gmt: "2009-10-19 16:37:46"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=347"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 348
  post_author: 2
  post_date: "2009-09-24 21:52:21"
  post_date_gmt: "2009-09-25 04:52:21"
  post_content: "I've pushed out a few \"updates to the Ottoman library\":http://bitbucket.org/snej/ottoman/changesets/ today. These fix a couple of embarrassing bugs, and also add an API in regular ol' Objective-C for those of you who aren't into that funky \"C++\" stuff.\n\n(The Cocoa stuff uses MYUtilities, so if you're not already using that, please read the \"setup instructions\":http://bitbucket.org/snej/mynetwork/wiki/Setup.)"
  post_title: "Ottoman For Cocoa (and bug-fixes)"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "347-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-24 21:52:21"
  post_modified_gmt: "2009-09-25 04:52:21"
  post_content_filtered: ""
  post_parent: 347
  guid: "http://jens.mooseyard.com/2009/09/347-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 375
  post_author: 2
  post_date: "2009-09-05 20:03:22"
  post_date_gmt: "2009-09-06 03:03:22"
  post_content: "I know, three weeks ago I said I was \"building me a B-Tree\":http://mooseyard.com/Jens/2009/08/im-building-me-a-b-tree/. I did build it, even the parts I listed under \"What's next?\" in that post, and it works. But it became apparent there was a more urgent need for a hash table, for work-related reasons, so I switched gears to build one of those on the same principles.\n\nThe biggest principle is Append-Only Storage, as described in the prior post. So I thought back to the simplest on-disk hash table I know of -- \"Dan Bernstein's CDB\":http://cr.yp.to/cdb.html -- which is very clever, but read-only. I implemented something similar, and then mashed in the CouchDB-like approach of incrementally appending only the modified sub-components.\n\nInitially I made the file a series of key-value pairs, followed by the hash-table index as an array of {hash code, position} structures, each of which pointed to the position of the corresponding key and value. Very simple. To save changes, I'd write out the changed pairs, followed by a new copy of the index. The problem with that was that the index gets large as the number of records increases, so with a 100,000-record file, changing even one record would append almost a megabyte.\n\nI had a brainstorm about how to fix that -- add a bit of tree structure. So now there's a root index of 256 pointers to sub-indexes. The 8 most significant bits of the key's hash code are looked up in the root index to find the sub-index (hash table) in which to look up the value. The advantage is that every value change only alters one sub-index; when saving, only sub-indexes that were modified, plus the root, have to be written out. So if only one key changes, that's just one sub-index, meaning only 1/256 as much data to append as before.\n\n[I thought I was really clever for coming up with this, but then when I went back and looked at the original CDB, which I hadn't seen in a year and a half, it turns out \"it does it too\":http://cr.yp.to/cdb/cdb.txt! I guess I'd just forgotten about that...]\n\nh2. What I have now\n\nWhat I have now is a persistent dictionary whose keys and values can be arbitrary data blobs. You can make changes in memory, and then save them back to disk, where they're appended to the file. (Or you can rewrite the file from scratch, which takes a bit longer but reclaims wasted space.) The file format should be virtually un-corruptible by crashes, <strike>unlike a traditional database such as sqlite</strike>. An interesting extra benefit is better concurrency -- the file doesn't require any form of read-locking, because it's perfectly safe for one client to write to the file while another is reading from it.\n\n(The grand total's about 3400 lines of C++, for both the tree and hash table.)\n\nI plan to upload this to Bitbucket soon, but I keep brutally refactoring the classes, or maliciously changing the file format, neither of which would endear me to other people trying to use the code. Hopefully things will settle down soon, now that I've got nearly all the functionality I want. I'll let you know.\n\n[Update: Struck out a comparison that's probably unfair to current versions of sqlite, judging by  \"descriptions of how it saves transactions\":http://www.sqlite.org/atomiccommit.html.]"
  post_title: "I Has A Hash Table"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "324-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-05 20:03:22"
  post_modified_gmt: "2009-09-06 03:03:22"
  post_content_filtered: ""
  post_parent: 324
  guid: "http://jens.mooseyard.com/2009/09/324-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 374
  post_author: 2
  post_date: "2009-10-16 08:24:36"
  post_date_gmt: "2009-10-16 15:24:36"
  post_content: "Call the roller of big dice,\nThe long-haired one, and bid him whip\nOn kitchen tables consecutive 18's.\nLet the fighters dawdle in such armor\nAs they are used to wear, and let the mages swap\nDelicious spells from last month's Dragon.\nLet a fumble be finale of its caster:\nThe only emperor is the dungeon master.\n\nTake from the manual of monsters\nPainted with three crude beasts, that sheet\nOn which I enumerated his stats once,\nAnd spread it so as to cover his face.\nIf his bag remains, rifle his hoard\nTo see who gets his precious +6 sword.\nLight the lamp to run away faster.\nThe only emperor is the dungeon master.\n\n{ \"after Wallace Stevens\":http://www.everypoet.com/archive/poetry/Wallace_Stevens/wallace_stevens_the_emperor_of_ice_cream.htm }"
  post_title: "The Dungeon Master"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "361-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-16 08:24:36"
  post_modified_gmt: "2009-10-16 15:24:36"
  post_content_filtered: ""
  post_parent: 361
  guid: "http://jens.mooseyard.com/2009/10/361-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 351
  post_author: 2
  post_date: "2009-10-14 15:00:10"
  post_date_gmt: "2009-10-14 22:00:10"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened seven years ago with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown in real time to the remote person makes me horrifically self-conscious, even though it wouldn't bother me at all to talk face-to-face with that person. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "the-lost-lesson-of-instant-typing"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:39:23"
  post_modified_gmt: "2009-10-19 16:39:23"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=351"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 37
-
  ID: 352
  post_author: 2
  post_date: "2009-10-14 15:00:10"
  post_date_gmt: "2009-10-14 22:00:10"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown to the remote person makes me horrifically self-conscious, even though it doesn't bother me to talk face-to-face in the same room. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand, but the haiku approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know it existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos.\n\nPart of the problem is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when successful demos are a key survival trait; but then they can't be removed later on because they're so well-known. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:00:10"
  post_modified_gmt: "2009-10-14 22:00:10"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 353
  post_author: 2
  post_date: "2009-10-14 15:00:14"
  post_date_gmt: "2009-10-14 22:00:14"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown to the remote person makes me horrifically self-conscious, even though it doesn't bother me to talk face-to-face in the same room. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand, but the haiku approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know it existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos.\n\nPart of the problem is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when successful demos are a key survival trait; but then they can't be removed later on because they're so well-known. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:00:14"
  post_modified_gmt: "2009-10-14 22:00:14"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 354
  post_author: 2
  post_date: "2009-10-14 15:02:30"
  post_date_gmt: "2009-10-14 22:02:30"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown to the remote person makes me horrifically self-conscious, even though it doesn't bother me to talk face-to-face in the same room. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:02:30"
  post_modified_gmt: "2009-10-14 22:02:30"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 355
  post_author: 2
  post_date: "2009-10-14 15:02:31"
  post_date_gmt: "2009-10-14 22:02:31"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown to the remote person makes me horrifically self-conscious, even though it doesn't bother me to talk face-to-face in the same room. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:02:31"
  post_modified_gmt: "2009-10-14 22:02:31"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 356
  post_author: 2
  post_date: "2009-10-14 15:03:35"
  post_date_gmt: "2009-10-14 22:03:35"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown in real time to the remote person makes me horrifically self-conscious, even though it wouldn't bother me at all to talk face-to-face with that person. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:03:35"
  post_modified_gmt: "2009-10-14 22:03:35"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 357
  post_author: 2
  post_date: "2009-10-14 15:03:41"
  post_date_gmt: "2009-10-14 22:03:41"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown in real time to the remote person makes me horrifically self-conscious, even though it wouldn't bother me at all to talk face-to-face with that person. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-6"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:03:41"
  post_modified_gmt: "2009-10-14 22:03:41"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-6/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 358
  post_author: 2
  post_date: "2009-10-14 15:05:03"
  post_date_gmt: "2009-10-14 22:05:03"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened seven years ago with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown in real time to the remote person makes me horrifically self-conscious, even though it wouldn't bother me at all to talk face-to-face with that person. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-7"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:05:03"
  post_modified_gmt: "2009-10-14 22:05:03"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-7/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 359
  post_author: 2
  post_date: "2009-10-14 15:05:09"
  post_date_gmt: "2009-10-14 22:05:09"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened seven years ago with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown in real time to the remote person makes me horrifically self-conscious, even though it wouldn't bother me at all to talk face-to-face with that person. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-8"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:05:09"
  post_modified_gmt: "2009-10-14 22:05:09"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-8/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 360
  post_author: 2
  post_date: "2009-10-14 15:05:26"
  post_date_gmt: "2009-10-14 22:05:26"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened seven years ago with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown in real time to the remote person makes me horrifically self-conscious, even though it wouldn't bother me at all to talk face-to-face with that person. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-9"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:05:26"
  post_modified_gmt: "2009-10-14 22:05:26"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-9/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 361
  post_author: 2
  post_date: "2009-10-16 08:18:29"
  post_date_gmt: "2009-10-16 15:18:29"
  post_content: "Call the roller of big dice,\nThe long-haired one, and bid him whip\nOn kitchen tables consecutive 18's.\nLet the fighters dawdle in such armor\nAs they are used to wear, and let the mages swap\nDelicious spells from last month's Dragon.\nLet a fumble be finale of its caster:\nThe only emperor is the dungeon master.\n\nTake from the manual of monsters\nPainted with three crude beasts, that sheet\nOn which I enumerated his stats once,\nAnd spread it so as to cover his face.\nIf his bag remains, rifle his hoard\nTo see who gets his precious +6 sword.\nLight the lamp to run away faster.\nThe only emperor is the dungeon master.\n\n{ \"after Wallace Stevens\":http://www.everypoet.com/archive/poetry/Wallace_Stevens/wallace_stevens_the_emperor_of_ice_cream.htm }"
  post_title: "The Dungeon Master"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "the-dungeon-master"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:40:35"
  post_modified_gmt: "2009-10-19 16:40:35"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=361"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 362
  post_author: 2
  post_date: "2009-10-16 08:18:29"
  post_date_gmt: "2009-10-16 15:18:29"
  post_content: "<font size=\"+1\">Call the roller of big dice,\nThe long-haired one, and bid him whip\nOn kitchen tables consecutive 18's.\nLet the fighters dawdle in such armor\nAs they are used to wear, and let the mages swap\nDelicious spells from last month's Dragon.\nLet a fumble be finale of its caster:\nThe only emperor is the dungeon master.\n\nTake from the manual of monsters\nPainted with three crude beasts, that sheet\nOn which I enumerated his stats once,\nAnd spread it so as to cover his face.\nIf his bag remains, rifle his hoard\nTo see who gets his precious +6 sword.\nLight the lamp to run away faster.\nThe only emperor is the dungeon master.</font>\n\n{ \"after Wallace Stevens\":http://www.everypoet.com/archive/poetry/Wallace_Stevens/wallace_stevens_the_emperor_of_ice_cream.htm }"
  post_title: "The Dungeon Master"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "361-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-16 08:18:29"
  post_modified_gmt: "2009-10-16 15:18:29"
  post_content_filtered: ""
  post_parent: 361
  guid: "http://jens.mooseyard.com/2009/10/361-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 363
  post_author: 2
  post_date: "2009-10-16 08:18:34"
  post_date_gmt: "2009-10-16 15:18:34"
  post_content: "<font size=\"+1\">Call the roller of big dice,\nThe long-haired one, and bid him whip\nOn kitchen tables consecutive 18's.\nLet the fighters dawdle in such armor\nAs they are used to wear, and let the mages swap\nDelicious spells from last month's Dragon.\nLet a fumble be finale of its caster:\nThe only emperor is the dungeon master.\n\nTake from the manual of monsters\nPainted with three crude beasts, that sheet\nOn which I enumerated his stats once,\nAnd spread it so as to cover his face.\nIf his bag remains, rifle his hoard\nTo see who gets his precious +6 sword.\nLight the lamp to run away faster.\nThe only emperor is the dungeon master.</font>\n\n{ \"after Wallace Stevens\":http://www.everypoet.com/archive/poetry/Wallace_Stevens/wallace_stevens_the_emperor_of_ice_cream.htm }"
  post_title: "The Dungeon Master"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "361-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-16 08:18:34"
  post_modified_gmt: "2009-10-16 15:18:34"
  post_content_filtered: ""
  post_parent: 361
  guid: "http://jens.mooseyard.com/2009/10/361-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 366
  post_author: 2
  post_date: "2009-10-16 08:24:26"
  post_date_gmt: "2009-10-16 15:24:26"
  post_content: "Call the roller of big dice,\nThe long-haired one, and bid him whip\nOn kitchen tables consecutive 18's.\nLet the fighters dawdle in such armor\nAs they are used to wear, and let the mages swap\nDelicious spells from last month's Dragon.\nLet a fumble be finale of its caster:\nThe only emperor is the dungeon master.\n\nTake from the manual of monsters\nPainted with three crude beasts, that sheet\nOn which I enumerated his stats once,\nAnd spread it so as to cover his face.\nIf his bag remains, rifle his hoard\nTo see who gets his precious +6 sword.\nLight the lamp to run away faster.\nThe only emperor is the dungeon master.\n\n{ \"after Wallace Stevens\":http://www.everypoet.com/archive/poetry/Wallace_Stevens/wallace_stevens_the_emperor_of_ice_cream.htm }"
  post_title: "The Dungeon Master"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "361-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-16 08:24:26"
  post_modified_gmt: "2009-10-16 15:24:26"
  post_content_filtered: ""
  post_parent: 361
  guid: "http://jens.mooseyard.com/2009/10/361-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 364
  post_author: 2
  post_date: "2009-10-16 08:23:15"
  post_date_gmt: "2009-10-16 15:23:15"
  post_content: "<span style=\"font-size: xx-small;\">Call the roller of big dice, The long-haired one, and bid him whip On kitchen tables consecutive 18's.\nLet the fighters dawdle in such armor\nAs they are used to wear, and let the mages swap\nDelicious spells from last month's Dragon.\nLet a fumble be finale of its caster:\nThe only emperor is the dungeon master.\n\n</span>\n\n<span style=\"font-size: xx-small;\">Take from the manual of monsters\nPainted with three crude beasts, that sheet\nOn which I enumerated his stats once,\nAnd spread it so as to cover his face.\nIf his bag remains, rifle his hoard\nTo see who gets his precious +6 sword.\nLight the lamp to run away faster.\nThe only emperor is the dungeon master.</span>\n\n{ \"after Wallace Stevens\":http://www.everypoet.com/archive/poetry/Wallace_Stevens/wallace_stevens_the_emperor_of_ice_cream.htm }"
  post_title: "The Dungeon Master"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "361-autosave"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-16 08:23:15"
  post_modified_gmt: "2009-10-16 15:23:15"
  post_content_filtered: ""
  post_parent: 361
  guid: "http://jens.mooseyard.com/2009/10/361-autosave/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 365
  post_author: 2
  post_date: "2009-10-16 08:19:41"
  post_date_gmt: "2009-10-16 15:19:41"
  post_content: "<p><font size=\"+1\">Call the roller of big dice,<br />\r\nThe long-haired one, and bid him whip<br />\r\nOn kitchen tables consecutive 18's.<br />\r\nLet the fighters dawdle in such armor<br />\r\nAs they are used to wear, and let the mages swap<br />\r\nDelicious spells from last month's Dragon.<br />\r\nLet a fumble be finale of its caster:<br />\r\nThe only emperor is the dungeon master.</p>\r\n<p>Take from the manual of monsters<br />\r\nPainted with three crude beasts, that sheet<br />\r\nOn which I enumerated his stats once,<br />\r\nAnd spread it so as to cover his face.<br />\r\nIf his bag remains, rifle his hoard<br />\r\nTo see who gets his precious +6 sword.<br />\r\nLight the lamp to run away faster.<br />\r\nThe only emperor is the dungeon master.</font></p>\r\n<p>{ \"after Wallace Stevens\":http://www.everypoet.com/archive/poetry/Wallace_Stevens/wallace_stevens_the_emperor_of_ice_cream.htm }</p>\r\n"
  post_title: "The Dungeon Master"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "361-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-16 08:19:41"
  post_modified_gmt: "2009-10-16 15:19:41"
  post_content_filtered: ""
  post_parent: 361
  guid: "http://jens.mooseyard.com/2009/10/361-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 367
  post_author: 2
  post_date: "2009-10-19 09:36:05"
  post_date_gmt: "2009-10-19 16:36:05"
  post_content: "I've pushed \"a new update\":http://bitbucket.org/snej/ottoman/changesets/ of my Ottoman storage library.\n\nWhat's new is the option to have individual additions to the dictionary written directly to disk, instead of being buffered in memory until you save a new version. This helps performance if you're writing a ton of data all at once. And there's a simple demo called \"PackDir\":http://bitbucket.org/snej/ottoman/src/tip/test/PackDir.cpp that writes a ton of data all at once: it packs the contents of an entire directory tree into an Ottoman file, with keys being filenames and values being file contents.\n\nTo implement this I had to violate the lockless semantics a bit, because having multiple clients appending key/value pairs to the file at the same time would make it a lot harder to keep their revisions straight. So before being able to do any direct puts, you have to enter an [ugh] ExclusiveTransaction.\n\n(Of course, the issues with locking don't matter if the file is only being used by one process. Or even if there are multiple readers but only one writer, since the locks don't interrupt readers.)"
  post_title: "Ottoman Update: Direct-Write Mode"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "ottoman-update-direct-write-mode"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:39:39"
  post_modified_gmt: "2009-10-19 16:39:39"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=367"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 368
  post_author: 2
  post_date: "2009-10-19 09:36:05"
  post_date_gmt: "2009-10-19 16:36:05"
  post_content: "I've pushed \"a new update\":http://bitbucket.org/snej/ottoman/changesets/ of my Ottoman storage library.\n\nWhat's new is the option to have individual additions to the dictionary written directly to disk, instead of being buffered in memory until you save a new version. This helps performance if you're writing a ton of data all at once. And there's a simple demo called \"PackDir\":http://bitbucket.org/snej/ottoman/src/tip/test/PackDir.cpp that writes a ton of data all at once: it packs the contents of an entire directory tree into an Ottoman file, with keys being filenames and values being file contents.\n\nTo implement this I had to violate the lockless semantics a bit, because having multiple clients appending key/value pairs to the file at the same time would make it a lot harder to keep their revisions straight. So before being able to do any direct puts, you have to enter an [ugh] ExclusiveTransaction.\n\n(Of course, the issues with locking don't matter if the file is only being used by one process. Or even if there are multiple readers but only one writer, since the locks don't interrupt readers.)"
  post_title: "Ottoman Update: Direct-Write Mode"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "367-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:36:05"
  post_modified_gmt: "2009-10-19 16:36:05"
  post_content_filtered: ""
  post_parent: 367
  guid: "http://jens.mooseyard.com/2009/10/367-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 369
  post_author: 2
  post_date: "2009-09-24 21:52:24"
  post_date_gmt: "2009-09-25 04:52:24"
  post_content: "I've pushed out a few \"updates to the Ottoman library\":http://bitbucket.org/snej/ottoman/changesets/ today. These fix a couple of embarrassing bugs, and also add an API in regular ol' Objective-C for those of you who aren't into that funky \"C++\" stuff.\n\n(The Cocoa stuff uses MYUtilities, so if you're not already using that, please read the \"setup instructions\":http://bitbucket.org/snej/mynetwork/wiki/Setup.)"
  post_title: "Ottoman For Cocoa (and bug-fixes)"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "347-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-24 21:52:24"
  post_modified_gmt: "2009-09-25 04:52:24"
  post_content_filtered: ""
  post_parent: 347
  guid: "http://jens.mooseyard.com/2009/09/347-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 370
  post_author: 2
  post_date: "2009-09-20 21:56:51"
  post_date_gmt: "2009-09-21 04:56:51"
  post_content: "It's got a moose! But then I found the ottoman with hanging _files_ inside and it was even more perfect...\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2009/09/moose-storage-ottoman.jpg\" alt=\"moose-storage-ottoman.jpg\" border=\"0\" width=\"416\" height=\"349\" /></div>\n\nI thought this one was pretty damn stylish too:\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2009/09/abstract-design-storage-ottoman.jpg\" alt=\"abstract-design-storage-ottoman.jpg\" border=\"0\" width=\"550\" height=\"504\" /></div>"
  post_title: "Alternate images for Ottoman logo"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "345-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-20 21:56:51"
  post_modified_gmt: "2009-09-21 04:56:51"
  post_content_filtered: ""
  post_parent: 345
  guid: "http://jens.mooseyard.com/2009/09/345-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 371
  post_author: 2
  post_date: "2009-09-20 20:51:34"
  post_date_gmt: "2009-09-21 03:51:34"
  post_content: "\"As promised\":http://mooseyard.com/Jens/2009/09/i-has-a-hash-table/ ...\n\nh2. \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home is a lightweight, reliable key-value store with multi-version concurrency control.\n\n!http://bitbucket.org/snej/ottoman/wiki/ottoman.jpg!\n\nA key-value store is a persistent on-disk dictionary that maps arbitrary keys (usually short text strings) to arbitrary values (binary data of any length). There's already a large and venerable family of libraries that do this, often referred to by the name \"db\". Notable members include \"dbm\":http://en.wikipedia.org/wiki/Dbm, \"Berkeley DB\":http://www.oracle.com/database/berkeley-db/index.html, \"cdb\":http://cr.yp.to/cdb.html and \"Tokyo Cabinet\":http://tokyocabinet.sourceforge.net. What makes \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home different? \n\n# It tries to provide \"*extremely reliable storage*\":http://bitbucket.org/snej/ottoman/wiki/Storage, immune to \"file corruption\":http://bitbucket.org/snej/ottoman/wiki/Corruption caused by operating system crashes or power failure while writing.\n# It *stores past versions* of the database, as a useful side-effect of the way it works. Applications can use this to provide features like snapshots, timelines or persistent undo. (You can prune old versions, for space or privacy reasons, by writing a fresh copy of the file.)\n# It has *very low memory overhead*. The file and its contents are memory-mapped, so even large values can be accessed without having to copy them into the heap. (Opening a database only mallocs a few hundred bytes!)\n# It allows *concurrent read/write access* by multiple processes. *Optimistic concurrency* â€” as used by version-control systems like Subversion â€” keeps file locking to a minimum: readers are //never// blocked at all, and writers are only blocked briefly (clients can't lock the database for arbitrary periods, only for as long as it takes the accumulated changes to be written to disk.)\n\nWhy is it named after a footstool? First, as an homage to \"CouchDB\":http://couchdb.apache.org. Secondly, it turns out \"ottomans can be used for storage\":http://images.google.com/images?q=storage%20ottoman. Third, because I have a mild fascination with \"Asian and Islamic history\":http://en.wikipedia.org/wiki/Ottoman_empire.\n\n\"_...Read more at the project home page!_\":http://bitbucket.org/snej/ottoman/wiki/Home"
  post_title: "Announcing Ottoman"
  post_excerpt: "h2. \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home is a lightweight, reliable key-value store with multi-version concurrency control.\n\n!http://bitbucket.org/snej/ottoman/wiki/ottoman.jpg!\n\nA key-value store is a persistent on-disk dictionary that maps arbitrary keys (usually short text strings) to arbitrary values (binary data of any length). There's already a large and venerable family of libraries that do this, often referred to by the name \"db\". Notable members include \"dbm\":http://en.wikipedia.org/wiki/Dbm, \"Berkeley DB\":http://www.oracle.com/database/berkeley-db/index.html, \"cdb\":http://cr.yp.to/cdb.html and \"Tokyo Cabinet\":http://tokyocabinet.sourceforge.net. What makes \"Ottoman\":http://bitbucket.org/snej/ottoman/wiki/Home different?"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "341-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-09-20 20:51:34"
  post_modified_gmt: "2009-09-21 03:51:34"
  post_content_filtered: ""
  post_parent: 341
  guid: "http://jens.mooseyard.com/2009/09/341-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 372
  post_author: 2
  post_date: "2009-10-14 15:05:32"
  post_date_gmt: "2009-10-14 22:05:32"
  post_content: "Farhad Manjoo \"writing in Slate\":http://www.slate.com/id/2232311/pagenum/all about Google Wave:\n\nbq. The trouble is, everything you type into Wave is transmitted live, in real time -- every keystroke was getting sent to Zach just as I hit it. This made me too self-conscious to get my thoughts across.\n\nbq. ... Maybe I should just delete what I'd written and say, \"Twitter works because it's simple.\" But I couldn't do that, because Zach was watching me. He could see me struggling right nowâ€”he could see that I'd gotten myself stuck in a textual cul-de-sac and that I was desperately searching for a way out without looking foolish. Now I saw Zach beginning to type: \"Don't let the live-typing get you down!\" The game was up; what was the point of making a point now? I ended my thought clumsily and then resolved never to attempt to say anything very deep on Wave.\n\nThe same thing happened seven years ago with the live-typing feature that I implemented in iChat 1.0 (which was only supported for Bonjour chats.) I thought it was an awesome idea, and I'd wanted to have it in a chat program since about 1997. But it turned out that, in actual use, people hated it, for exactly the reasons Manjoo describes: it makes you self-conscious. We took it out in the next release.\n\n(Interestingly, I hate video chat for a very similar reason. Somehow, the fact that my picture is being shown in real time to the remote person makes me horrifically self-conscious, even though it wouldn't bother me at all to talk face-to-face with that person. I don't know whether it's the little preview on my screen, or the fact that the person is spookily both present and not-present, but the few times I've tried video-chat have been really unpleasant.)\n\nI'm usually on the side of more technology. I believe that our online communications tools are still horribly primitive and have only scratched the surface of what's possible. But this was a case where more technology was bad.\n\n<pre>The low-tech alternative that lots of people use in IM, \nis to write in short fragments,\neach a separate message,\nso the other person can see them one by one\nwithout waiting for you to finish the whole sentence.</pre>\n\nThe difference is that you're in control over when to send a partial message, and the other person knows you're in control, and so on. I still think it might be possible to do this in a higher-tech way, like using a hot-key to send a partial message on demand without having the funky line-breaks, but the current approach isn't so bad as long as you're not embarrassed about unintentional free verse.\n\nI could have told the Wave people about what I'd learned, except I didn't know Wave existed until April (shortly before the public announcement), and even then I was just some guy lost in the crowd at the demos....\n\nPart of the problem, in both cases, is that live typing is one of those Cool Demo Features that looks really awesome when showing off the app. Features like that can be dangerous because they are legitimately very useful during the app's gestation, when exciting demos are a key survival trait; but then they can't be removed later on because they're so well-known, even if they turn out to be useless. Sometimes these features aren't actually harmful to the user experience, they just make the code more complex and harder to maintain. Instant typing is both, unfortunately. (The clever sync algorithms and rapid-fire network messages Wave uses would be needed even without live typing, but the fact that they have to run on every few keystrokes, not just every minute or so, pushes those things so much harder.)"
  post_title: "The Lost Lesson Of Instant Typing"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "351-revision-10"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-14 15:05:32"
  post_modified_gmt: "2009-10-14 22:05:32"
  post_content_filtered: ""
  post_parent: 351
  guid: "http://jens.mooseyard.com/2009/10/351-revision-10/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 373
  post_author: 2
  post_date: "2009-10-19 09:36:11"
  post_date_gmt: "2009-10-19 16:36:11"
  post_content: "I've pushed \"a new update\":http://bitbucket.org/snej/ottoman/changesets/ of my Ottoman storage library.\n\nWhat's new is the option to have individual additions to the dictionary written directly to disk, instead of being buffered in memory until you save a new version. This helps performance if you're writing a ton of data all at once. And there's a simple demo called \"PackDir\":http://bitbucket.org/snej/ottoman/src/tip/test/PackDir.cpp that writes a ton of data all at once: it packs the contents of an entire directory tree into an Ottoman file, with keys being filenames and values being file contents.\n\nTo implement this I had to violate the lockless semantics a bit, because having multiple clients appending key/value pairs to the file at the same time would make it a lot harder to keep their revisions straight. So before being able to do any direct puts, you have to enter an [ugh] ExclusiveTransaction.\n\n(Of course, the issues with locking don't matter if the file is only being used by one process. Or even if there are multiple readers but only one writer, since the locks don't interrupt readers.)"
  post_title: "Ottoman Update: Direct-Write Mode"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "367-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-10-19 09:36:11"
  post_modified_gmt: "2009-10-19 16:36:11"
  post_content_filtered: ""
  post_parent: 367
  guid: "http://jens.mooseyard.com/2009/10/367-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 376
  post_author: 2
  post_date: "2009-08-14 10:16:21"
  post_date_gmt: "2009-08-14 17:16:21"
  post_content: "The other day I took it into my head to implement a \"B+tree\":http://en.wikipedia.org/wiki/B%2Btree. Why? Because they sound neat, and I've done hardly any serious programming with trees in my career. (Someone, I think Buzz Andersen, once noted that there are two kinds of programmers: those who do think in terms of trees, and those who do everything with hash tables. I'm in the latter camp.)\n\nAnd also because I'm a big fan of \"CouchDB\":http://couchdb.apache.org, and really admire its elegant storage model. It's an on-disk B-tree -- no surprises there -- but \"the file is append-only\":http://horicky.blogspot.com/2008/10/couchdb-implementation.html, which both makes it impervious to crash-related corruption, provides nearly lockless concurrency, and makes it easy to access earlier revisions.\n\nbq. [In a nutshell: Updated data values or tree nodes are appended to the file instead of overwriting the earlier versions. Since updating a node changes its location, its parent node needs to be updated too to point to the new location. This recurses up the tree, meaning any change ends up with a new root node written at the very end of the file. In fact, when you open the file you find the root by looking at the very end. Since no data is ever changed, once you open the file you're impervious to changes made by other writers since they don't affect anything you're looking at.]\n\nI'd love to use something like that for various projects, but as CouchDB is implemented in the exotic functional language Erlang, I can't really use its storage layer as-is. So: could I implement something like it in C++?\n\nThus far I have a working in-memory B+tree implementation. Inserts and deletes work, and I'm working on the iterator. Even this much was harder to get working than it should have been, or so it feels. But that always seems to be true -- algorithms sound straightforward when you read about them, but putting them into practice exposes you to all the details and subtleties inherent in hand-waving like \"now merge the node with a neighbor\".\n\nActually I haven't implemented a straight B+tree, rather \"a 'top-down' variant described by Ohad Rodeh\":http://www.cs.tau.ac.il/~ohadrode/papers/btree_TOS.pdf that's better suited to this type of application because it changes fewer numbers of interior nodes during an update.\n\nWhat's next?\n\n* Support for string keys (so far it just handles ints)\n* Serializing nodes to/from disk\n* Keeping track of which nodes are touched during an operation, and appending those to the file\n* Writing a trailer to the file to mark a successful update (and to link back to the previous trailer, for historical purposes.)\n\nSounds straightforward, but of course the devil's in the details."
  post_title: "I&#8217;m Building Me A B-Tree"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "322-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-08-14 10:16:21"
  post_modified_gmt: "2009-08-14 17:16:21"
  post_content_filtered: ""
  post_parent: 322
  guid: "http://jens.mooseyard.com/2009/08/322-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 377
  post_author: 2
  post_date: "2009-08-16 19:52:43"
  post_date_gmt: "2009-08-17 02:52:43"
  post_content: "Last year I wrote \"a series of blog posts about a peer-to-peer system called Cloudy\":http://mooseyard.com/Jens/?s=cloudy that I was developing. I was going up the stack, from messaging to identity, but didn't finish documenting all the layers I'd built. I mostly stopped working on Cloudy after I went back to gainful employment, but I keep thinking about this stuff.\n\nh2. \"Lakitu\"?\n\nI've since heard about another unrelated project nicknamed Cloudy; and the whole term \"cloud\" has gotten so debased in the past year that it now stands for outsourcing to giant hidden server farms, which is the antithesis of what I stand for. So I've decided to use the name *Lakitu* instead. Nintendo fans will recognize \"Lakitu\":http://www.mariowiki.com/Lakitu as a bit character in the Mario games -- he's a goggled turtle who rides a little one-seater cloud. This makes him an appropriate mascot for P2P technologies, I think.\n\n[I'm sure Nintendo has a trademark on the character, but they don't appear to have copyrighted the _word_ \"Lakitu\". He's not even known by that name in Japan, where he's called \"ã‚¸ãƒ¥ã‚²ãƒ \" or \"Jugem\". I have been unable to find out what \"Lakitu\" means or why they decided to use it in the English translation. I could also note threateningly that I have some intellectual-property issues of my own with Nintendo's depiction of Lakitu's smiling cloud, which is _clearly infringing_ on my son's comic-strip character \"Cloudy\":http://mooseyard.com/Jed/Cloudy/. So let's call it a draw, Iwata-san?]\n\nMy last Cloudy post was about \"verifying people's identities\":http://mooseyard.com/Jens/2008/04/cloudy-verification/, and the next one was going to be about gossip. I've become unhappy about the rather kludgy way I designed gossip in Cloudy, so yesterday I started designing a new protocol for it, which I'm going to write about.\n\nh2. \"Gossip\"?\n\nA \"gossip protocol\":http://en.wikipedia.org/wiki/Gossip_protocol is a means of broadcasting information in a distributed system. Pairs of computers periodically connect and swap new bits of information with each other; the result is that the information gets dispersed through the whole network (provided it's a connected graph.) The tricky part is avoiding infinite loops and combinatorial explosions, and optimizing the way pairs of computers swap messages so it scales well.\n\nI started defining a protocol, based on stuff I've been thinking about for a while. I don't think it's as advanced as what's reported in research papers, but I'm hoping it will work well enough when used in a socially-driven network -- one where the connections between machines are driven by the social connections between their users. Social networks have short horizons, so any particular participant only \"sees\" a constrained number of near-neighbors even though the entire network may be huge.\n\nI'm making this protocol agnostic as to the type of messaging being used. \"BLIP\":http://bitbucket.org/snej/mynetwork/wiki/BLIP/Overview will work well, but it ought to be possible to use Jabber or even email; anything that can send messages between two participants. It's also agnostic as to message content, beyond a few simple assumptions that a message has an author, a timestamp, and some arbitrary \"topic\" tags.\n\nFor example, it ought to work fine at distributing tweet-like micro-blog posts.\n\nRight now I have the protocol written down as an outline in \"Notebook\":http://www.circusponies.com. I'll flatten it out, expand it and post it here in a day or two."
  post_title: "Gossip For Lakitu"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "323-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-08-16 19:52:43"
  post_modified_gmt: "2009-08-17 02:52:43"
  post_content_filtered: ""
  post_parent: 323
  guid: "http://jens.mooseyard.com/2009/08/323-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 380
  post_author: 2
  post_date: "2007-07-16 15:40:27"
  post_date_gmt: "2007-07-16 22:40:27"
  post_content: "\"This tale of woe\":http://use.perl.org/%7EAristotle/journal/33448 is making me rethink whether I want to be running any \"PHP-based software\":http://wordpress.org on my website.\n\nYes, integer overflows happen to the best of us (\"even those of us who write popular algorithm textbooks\":http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html), but I would hope that once one is pointed out, the people maintaining the code would have a clue about how to fix it.\n\nStuff like \"if (size>INT_MAX)...\" is funny, but I find it even scarier that someone would think the solution to integer overflow is to store potentially-huge byte counts in variables of type \"float\". Which is apparently still being done in top-of-tree PHP.\n\n[Hint: \"float\" is almost always 32-bit IEEE format with a 24-bit mantissa, meaning it can't represent any integer larger than 2^23^-1 (8 MB) exactly. And round-off error is the _last_ thing you want when computing how large a buffer to allocate.]"
  post_title: "How not to fix buffer overflows"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "222-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2007-07-16 15:40:27"
  post_modified_gmt: "2007-07-16 22:40:27"
  post_content_filtered: ""
  post_parent: 222
  guid: "http://jens.mooseyard.com/2007/07/222-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 381
  post_author: 2
  post_date: "2007-07-07 23:37:25"
  post_date_gmt: "2007-07-08 13:37:25"
  post_content: "Here's my family recipe for apricot jam, handed down through generations. One generation, really â€” my mom got it from a pamphlet put out by some local womens' group, after we moved to an old ramshackle house in the middle of a huge but disused apricot orchard. The trees were old, but a lot of them still produced fruit, and it was no trouble to walk around and collect bucketsful. So we needed some way to make use of all that fruit...\n\nThis recipe is different from the usual one you find packed in a box of pectin, because, well, it doesn't use pectin. Instead, you thicken the jam by cooking it a lot longer. This means it tastes less like fresh fruit; but it has a wonderful taste of its own, a bit like dried apricots, and a nice gloopy texture. As a bonus, putting an apricot kernel^1^ in every jar gradually adds an almond-y aroma^2^.\n<!--more-->\n\n<h3>The Pep Talk</h3>\n\nMaking jam is much easier (and safer) than most people think. After all, 100 years ago everyone used to can food, unless they were millionaire financiers or nomadic tribesmen. If our primitive ancestors could do it, so can you! And jam is easier than canning vegetables because the acidity of the fruit inhibits microorganisms, so you don't have to be paranoid about sterilizing everything.\n\nJamming basically boils down [sorry] to mixing the fruit with <i>lots</i> of sugar and some lemon juice, cooking it, and pouring it into clean canning jars. The heat of the boiling jam helps sterilize the jar, and turning it upside down at first gets the lid too. As the air at the top cools, it shrinks and forms a partial vacuum that holds the lid on tightly to maintain the seal.\n\nThe jam keeps for years, although unless you make a lot of it, you'll run out long before then. We've eaten three-year-old jam that still tasted great. A very few jars go bad â€” maybe one in 20 â€” and a bad jar is pretty obvious because it's either lost its seal or has mold on top, so you just throw it away and get another one.\n\nIt takes only about an hour of active time, it will make your house smell amazing, and you'll end up with yummy jam and syrup that you can enjoy for years. Do it!\n\nBut: *Read The Directions All The Way Through First.* Some of the details are important.\n\n<h3>Requirements</h3>\n\nYou'll need to buy:\n\n* Apricots, duh. Firm and slightly under-ripe if possible. (As a rough estimate, it takes about 1 1/2 cups of cut-up apricots to make an 8 oz jar of jam.)\n* Lots of sugar. Get one of those big sacks. Don't skimp on sugar or the jam won't turn out right. NutraSweetâ„¢ is _right out_.\n* Several lemons.\n* 8oz canning jars, usually made by Ball or Mason. Most supermarkets have them, usually in the baking aisle. Make sure the jars come with the screw-on rings that hold the lids on.\n* Jar lids. These are usually sold separately because, unlike the jars, they're not re-usable. Make sure they're the right diameter for your jars.\n\nYour kitchen needs to have:\n\n* A big _non-aluminum_^3^ cooking pot.\n* A big stirring spoon, ideally wood.\n* A ladle.\n* Optional: A quart-size jar or sealable plastic container (for the syrup).\n* Optional: a hammer (to extract the kernels).\n\n<h3>Preparing The Fruit</h3>\n\nCut the apricots in half and put them in a large <i>non-aluminum</i> cooking pot. Set aside the pits for later. For each cup of apricots, add 3/4 cup sugar and 1 1/2 tsp lemon juice.\n\nLet the mixture stand at least two hours, and watch as the magic force of osmosis sucks the water out of the apricots, dissolving them and the sugar into yummy goo.\n\n<h3>Cooking</h3>\n\nNow put the pot on the stove and bring the goo to a boil over high heat. At first you'll just need to stir occasionally to keep it from scorching, then as it comes to a boil you'll need to stir continuously. Once it's at a steady boil, set a timer for 25 minutes and keep stirring...\n\nWhen it first starts boiling, it's going to produce lots and lots of pale orange foam, which you're going to have to skim off with a ladle to keep the pot from overflowing. When I was a kid, we serendipitously discovered that, if you put the foam in a quart jar and let it settle, it turns into apricot syrup. Do this!! The syrup is awesome on pancakes or ice cream. Keep it in the fridge.\n\nThe foaming will stop, I promise, even though you'll feel like the Sorcerer's Apprentice for a few minutes. Then just keep stirring, stirring, stirring...\n\nWhen the timer goes off, take a look at the mixture. If it still seems liquidy, let it boil another five minutes (but no more). The goal is to have reduced the volume by about half, and for what's left to be fairly thick; sort of like _boiling jam_. When it's ready, turn off the heat.\n\n<h3>Flashback: Preparing The Jars</h3>\n\nYou will have first prepared^4^ a bunch of canning jars. The jars will have just gone through the dishwasher (even if they're new). The lids will have been soaking in a bowl with boiling water poured over them. The rings will have been just sitting around.\n\n(If you <i>didn't</i> first prepare this stuff, while the apricots were dissolving in sugar, you're in trouble now. Serves you right for not reading the recipe through! All you can do is let the jam cool a bit, pour it into any clean containers you have around, and put it in the fridge. You'll have to eat it all in a few weeks. Get friends to help.)\n\nAs an optional but recommended bonus: Extract enough kernels from the pits so you have one intact kernel per jar. To do this, get a hammer and put the pit on a clean cloth on a _very_ hard surface like the sidewalk. Whack the pit with the hammer, hard enough to crack it open but not hard enough to mush the kernel inside, which looks like a little almond. This takes a bit of practice, so it's a good thing you have dozens of pits.\n<h3>Filling The Jars</h3><p>Now fill each jar as follows: Take it out of the dishwasher, turn it right-side-up _(very important!)_, drop in an apricot kernel, and ladle jam into it up to about 1/4\" below the rim. Try not to get jam on the rim^5^. (The right amount of airspace is important for getting the jar to seal.) Put a lid on top^6^, then screw a ring over it tightly. Turn the jar upside-down (very important!) Go on to the next jar. Repeat till you run out of jam.\n\nYou'll probably end up with a half-full jar at the end. This won't seal properly, so keep it in the fridge. Or if you run out of jars first, you can put the remaining jam into any other closeable containers you have around, and put them in the fridge. Either way, the refrigerated jam will keep for a few weeks.\n\nWhen the last jar is filled and flipped over, set a timer for 5 minutes. When it bleeps, flip all of the jars back upright and let them stand for a little while. You should soon hear a little metallic \"ping!\" sound as each jar seals shut â€” the cooling air shrinks and forms a partial vacuum that pulls the lid tight and makes it flip from convex to concave.\n\nIf any jars haven't popped shut by themselves in 15 minutes, they're not properly sealed, so put them in the fridge and eat the jam soon.\n\nTighten the sealed jars' rings some more, and label them with the type of jam and the approximate date. In a reasonably cool place (basements are good) they'll keep for at least 2 years.\n\n(Before you open a jar for the first time, press on the lid to make sure it's still sealed. If you can pop the lid down, or if you can pull it off without a fair amount of force, it's lost its seal and you should throw the jam away. But this happens really rarely.)</p>\n\n<h3>Notes</h3>\n\n[1] As a child, I knew that apricot kernels were full of deadly cyanide, and felt sort of nervous about using them in the jam. (But not too nervous to eat it.) It turns out, though, that the concentration is really pretty minimal.\n\n[2] I am told that almond extract is often made from apricot pits, and that marzipan sometimes is too.\n\n[3] The acid in the fruit would react with the aluminum, giving the jam a nasty metallic taste.\n\n[4] I've always wanted to write that!\n\n[5] A canning funnel, which is a squat wide-mouthed funnel, is helpful here. Your better cooking-supply stores, like Williams-Sonoma, should carry them.\n\n[6] Don't forget that the water the lids are in is still hot! Tongs are one way to get them out. Even better, we have a nifty magnetic-tipped wand we got from Ball a few years ago."
  post_title: "Apricot Jam Recipe"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "221-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2007-07-07 23:37:25"
  post_modified_gmt: "2007-07-08 13:37:25"
  post_content_filtered: ""
  post_parent: 221
  guid: "http://jens.mooseyard.com/2007/07/221-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 382
  post_author: 2
  post_date: "2009-11-07 09:21:40"
  post_date_gmt: "2009-11-07 17:21:40"
  post_content: "As everyone knows who works in the pet-food industry (or computer software for that matter), it can be hard to start eating your own dogfood. Case in point: I just this week set Chrome to be my default browser, though I've been working on it for four months now.\n\nPartly that's because when I started in July the Mac version of Chrome was too immature; and partly it's because a web browser is something you need to have running and working all the time -- especially since the Chrome project's bug tracker and code-review tool are web-based.\n\nBut Mac Chrome is quite stable enough to use now, and as I haven't been doing much Chrome development on this MacBook Pro lately (it takes too long to compile compared to my souped-up Mac Pro) I've installed the latest \"dev-channel build\":http://dev.chromium.org/getting-involved/dev-channel and replaced Safari with it in my Dock and as my default browser.\n\nIt's hard to get used to a new browser, after all these years. I remember that I dropped IE 5 like a hot rock as soon as Safari became useable, but that's because IE sucked so badly on OS X (as you youngsters may not remember.) But Safari is a great browser. Chrome's great too, but in different ways, and the Mac version's not finished yet so there are some missing bits.\n\nI should note that I generally don't work on the user-visible parts of Chrome, rather the underlying WebKit engine; so I haven't been focusing on the UI much, or noticing the features being added, until experiencing them as an end-user.\n\nIn Chrome's favor:\n\n* It definitely feels faster. At work I've been obsessing over some micro-benchmarks, but in regular use what I notice is simply that pages come up more quickly. I think a lot of this has to do with DNS pre-fetching, because DNS query times here at home can often be slow.\n* The UI of the tabs is better than Safari's. I like that they take up less room (though without eliminating the title bar the way the Safari 4 beta did), and the transition animations when opening/closing/detaching tabs are extremely slick, definitely Apple-quality.\n* The downloads shelf at the bottom of the window is more visible than Safari's little Downloads window, which always gets hidden behind the browser.\n* The list of recently-closed tabs at the bottom of the new-tab page is very thoughtful and handy. In general I find the new-tab page more useful than Safari's, if less flashy.\n\nRough edges (remember, this is a pre-beta build):\n\n* PDF display doesn't work well. There's no way to switch pages yet (making multi-page documents unusable), there's no zooming, the Save command doesn't work, and often the renderer process starts redrawing constantly and eating up CPU time.\n* The only indication you have that a page is loading is the little 16x16-pixel spinning circle that replaces the tab's icon. I like the visual design of this, but it's too hard to find. I still miss the big progress bar in the address bar from Safari 1-3. (Cursor feedback would be nice -- wasn't there a browser once that put a little wristwatch badge on the arrow cursor?)\n* The bookmarking UI is still unfinished and unpolished. In particular, there's no way to edit/move/delete bookmarks yet. I love the idea of being able to quickly bookmark by clicking a Google-y star icon, but in practice it pops up a floating panel for choosing a folder, which makes me think about where to put it just like Safari's bookmark sheet does. I'd rather the star button just added it to an \"Unsorted\" folder that I could open and organize later.\n* Autofill doesn't seem to work as well as in Safari. For example, it won't autofill login forms until I type in the username; I think this may be a security feature, but I find it annoying.\n\nI've been impressed by Chrome's stability too, for a pre-beta development build. The app hasn't crashed once, and I haven't even gotten the \"Oh, snap!\" page that shows that a renderer process crashed. (I've seen plugins crash a few times, but that's probably Flash's fault, and as in Safari on 10.6, this doesn't affect the browser or even the rest of the page.)\n\nOne thing I'm really looking forward to is \"extensions\":http://blog.chromium.org/2009/09/extensions-status-on-runway-getting.html. Safari's a closed system, and I've long been envious of the plethora of cool plug-ins available for Firefox. I'm looking forward to using, and maybe \"developing\":http://code.google.com/chrome/extensions/index.html, extensions for Chrome. (In the current dev channel Mac release, extensions can be installed, but the ones I've tried don't do anything yet.)"
  post_title: "Dogfooding Chrome"
  post_excerpt: "As everyone knows who works in the pet-food industry (or computer software for that matter), it can be hard to start eating your own dogfood. Case in point: I just this week set Chrome to be my default browser, though I've been working on it for four months now.\n\nPartly that's because when I started in July the Mac version of Chrome was too immature; and partly it's because a web browser is something you need to have running and working all the time -- especially since the Chrome project's bug tracker and code-review tool are web-based.\n\nBut Mac Chrome is quite stable enough to use now, and as I haven't been doing much Chrome development on this MacBook Pro lately (it takes too long to compile compared to my souped-up Mac Pro) I've installed the latest dev-channel build and replaced Safari with it."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "dogfooding-chrome"
  to_ping: ""
  pinged: ""
  post_modified: "2009-11-07 09:21:47"
  post_modified_gmt: "2009-11-07 17:21:47"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=382"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 9
-
  ID: 383
  post_author: 2
  post_date: "2009-11-07 09:21:40"
  post_date_gmt: "2009-11-07 17:21:40"
  post_content: "As everyone knows who works in the pet-food industry (or computer software for that matter), it can be hard to start eating your own dogfood. Case in point: I just this week set Chrome to be my default browser, though I've been working on it for four months now.\n\nPartly that's because when I started in July the Mac version of Chrome was too immature; and partly it's because a web browser is something you need to have running and working all the time -- especially since the Chrome project's bug tracker and code-review tool are web-based.\n\nBut Mac Chrome is quite stable enough to use now, and as I haven't been doing much Chrome development on this MacBook Pro lately (it takes too long to compile compared to my souped-up Mac Pro) I've installed the latest \"dev-channel build\":http://dev.chromium.org/getting-involved/dev-channel and replaced Safari with it in my Dock and as my default browser.\n\nIt's hard to get used to a new browser, after all these years. I remember that I dropped IE 5 like a hot rock as soon as Safari became useable, but that's because IE sucked so badly on OS X (as you youngsters may not remember.) But Safari is a great browser. Chrome's great too, but in different ways, and the Mac version's not finished yet so there are some missing bits.\n\nI should note that I generally don't work on the user-visible parts of Chrome, rather the underlying WebKit engine; so I haven't been focusing on the UI much, or noticing the features being added, until experiencing them as an end-user.\n\nIn Chrome's favor:\n\n* It definitely feels faster. At work I've been obsessing over some micro-benchmarks, but in regular use what I notice is simply that pages come up more quickly. I think a lot of this has to do with DNS pre-fetching, because DNS query times here at home can often be slow.\n* The UI of the tabs is better than Safari's. I like that they take up less room (though without eliminating the title bar the way the Safari 4 beta did), and the transition animations when opening/closing/detaching tabs are extremely slick, definitely Apple-quality.\n* The downloads shelf at the bottom of the window is more visible than Safari's little Downloads window, which always gets hidden behind the browser.\n* The list of recently-closed tabs at the bottom of the new-tab page is very thoughtful and handy. In general I find the new-tab page more useful than Safari's, if less flashy.\n\nRough edges (remember, this is a pre-beta build):\n\n* PDF display doesn't work well. There's no way to switch pages yet (making multi-page documents unusable), there's no zooming, the Save command doesn't work, and often the renderer process starts redrawing constantly and eating up CPU time.\n* The only indication you have that a page is loading is the little 16x16-pixel spinning circle that replaces the tab's icon. I like the visual design of this, but it's too hard to find. I still miss the big progress bar in the address bar from Safari 1-3. (Cursor feedback would be nice -- wasn't there a browser once that put a little wristwatch badge on the arrow cursor?)\n* The bookmarking UI is still unfinished and unpolished. In particular, there's no way to edit/move/delete bookmarks yet. I love the idea of being able to quickly bookmark by clicking a Google-y star icon, but in practice it pops up a floating panel for choosing a folder, which makes me think about where to put it just like Safari's bookmark sheet does. I'd rather the star button just added it to an \"Unsorted\" folder that I could open and organize later.\n* Autofill doesn't seem to work as well as in Safari. For example, it won't autofill login forms until I type in the username; I think this may be a security feature, but I find it annoying.\n\nI've been impressed by Chrome's stability too, for a pre-beta development build. The app hasn't crashed once, and I haven't even gotten the \"Oh, snap!\" page that shows that a renderer process crashed. (I've seen plugins crash a few times, but that's probably Flash's fault, and as in Safari on 10.6, this doesn't affect the browser or even the rest of the page.)\n\nOne thing I'm really looking forward to is \"extensions\":http://blog.chromium.org/2009/09/extensions-status-on-runway-getting.html. Safari's a closed system, and I've long been envious of the plethora of cool plug-ins available for Firefox. I'm looking forward to using, and maybe \"developing\":http://code.google.com/chrome/extensions/index.html, extensions for Chrome. (In the current dev channel Mac release, extensions can be installed, but the ones I've tried don't do anything yet.)"
  post_title: "Dogfooding Chrome"
  post_excerpt: "As everyone knows who works in the pet-food industry (or computer software for that matter), it can be hard to start eating your own dogfood. Case in point: I just this week set Chrome to be my default browser, though I've been working on it for four months now.\n\nPartly that's because when I started in July the Mac version of Chrome was too immature; and partly it's because a web browser is something you need to have running and working all the time -- especially since the Chrome project's bug tracker and code-review tool are web-based.\n\nBut Mac Chrome is quite stable enough to use now, and as I haven't been doing much Chrome development on this MacBook Pro lately (it takes too long to compile compared to my souped-up Mac Pro) I've installed the latest dev-channel build and replaced Safari with it."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "382-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-11-07 09:21:40"
  post_modified_gmt: "2009-11-07 17:21:40"
  post_content_filtered: ""
  post_parent: 382
  guid: "http://jens.mooseyard.com/2009/11/382-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 384
  post_author: 2
  post_date: "2009-11-28 17:51:03"
  post_date_gmt: "2009-11-29 01:51:03"
  post_content: "\"ZSync\":http://www.zarrastudios.com/ZSync/ZSync.html is a new Mac/iPhone library that uses my \"BLIP\":http://bitbucket.org/snej/mynetwork/wiki/BLIP/Overview P2P networking protocol:\n\nbq. \"ZSync is an open source syncing library designed to allow easy syncing of data between an iPhone/iPod Touch and the OS X Desktop.\nZSync utilizes the BLIP library and Appleâ€™s Sync Services to allow easy and seamless syncing of data.\"\n\nIt's still in early development though, with a first public release expected in January:\n\nbq. Right now the code is in a private GitHub repository while the initial framework and protocols are fleshed out.  This is expected to go public in January of 2010.  Until then we are keeping the development team very small so that we can flesh out the design without a lot of overhead.\n\nThis looks like it'll be super useful for iPhone apps that want to integrate with their Mac siblings, especially since their design won't require you to have the Mac app running while you sync."
  post_title: "ZSync"
  post_excerpt: "\"ZSync\":http://www.zarrastudios.com/ZSync/ZSync.html is a new Mac/iPhone library that uses my \"BLIP\":http://bitbucket.org/snej/mynetwork/wiki/BLIP/Overview P2P networking protocol."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "zsync"
  to_ping: ""
  pinged: ""
  post_modified: "2009-11-28 17:51:05"
  post_modified_gmt: "2009-11-29 01:51:05"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=384"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 385
  post_author: 2
  post_date: "2009-11-28 17:51:03"
  post_date_gmt: "2009-11-29 01:51:03"
  post_content: "\"ZSync\":http://www.zarrastudios.com/ZSync/ZSync.html is a new Mac/iPhone library that uses my \"BLIP\":http://bitbucket.org/snej/mynetwork/wiki/BLIP/Overview P2P networking protocol:\n\nbq. \"ZSync is an open source syncing library designed to allow easy syncing of data between an iPhone/iPod Touch and the OS X Desktop.\nZSync utilizes the BLIP library and Appleâ€™s Sync Services to allow easy and seamless syncing of data.\"\n\nIt's still in early development though, with a first public release expected in January:\n\nbq. Right now the code is in a private GitHub repository while the initial framework and protocols are fleshed out.  This is expected to go public in January of 2010.  Until then we are keeping the development team very small so that we can flesh out the design without a lot of overhead.\n\nThis looks like it'll be super useful for iPhone apps that want to integrate with their Mac siblings, especially since their design won't require you to have the Mac app running while you sync."
  post_title: "ZSync"
  post_excerpt: "\"ZSync\":http://www.zarrastudios.com/ZSync/ZSync.html is a new Mac/iPhone library that uses my \"BLIP\":http://bitbucket.org/snej/mynetwork/wiki/BLIP/Overview P2P networking protocol."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "384-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-11-28 17:51:03"
  post_modified_gmt: "2009-11-29 01:51:03"
  post_content_filtered: ""
  post_parent: 384
  guid: "http://jens.mooseyard.com/2009/11/384-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 386
  post_author: 2
  post_date: "2009-12-08 09:12:16"
  post_date_gmt: "2009-12-08 17:12:16"
  post_content: "Yes, I'm still working on Ottoman (my append-only multiversion-concurrent storage library). As the code grows in size and complexity, so it grows in its resistance to being changed, but as Piet Hein said and I never tire of quoting:\n\nbq. _Problems worthy of attack_\n_Prove their worth by fighting back._\n\nI just pushed \"my latest changes\":http://bitbucket.org/snej/ottoman/changesets/ up to bitbucket.org. What's new?\n\n*Variable-sized top-level index.* Previously, the hash data structure used a top level array of 256 hashtables. I've now made that '256' a variable that scales with the number of records. This saves a lot of room for smaller datasets. (Sounds easy, right? I thought so too. But it ended up triggering significant changes to the file format and algorithms and took a lot of debugging.)\n\n*The return of the trees! part un.* I started this as a project to learn about B+trees, but when I got to the point of implementing the append-only multiversion stuff I did it with hashtables first because it's more straightforward that way, and the tree code went into the freezer. Well, it's back now. There is a \"new\" \"Tree\":http://bitbucket.org/snej/ottoman/src/tip/src/Tree.h class that can be used to read and write persistent B+trees. It's not yet integrated into the top-level Ottoman class, though, so you can only use it on its own, not intermixed with hash-tables, and without the API for tracking versions.\n\nThe next task is of course to integrate the tree API into the Ottoman class. But more than that, it will be entwined with the hashtable such that trees will serve as searchable indexes into the data store. So the hashtable will provide extremely fast but unordered access via a unique \"record ID\", but you can build as many indexes as you like that will use ordered secondary keys (of your choice) to look up hash values.\n\nAt that point, I believe Ottoman will be ready to serve as a substrate for HTML local data storage, for \"implementing a CouchDB-compatible database\":http://jchrisa.net/drl/_design/sofa/_show/post/HTML5-Storage-Continues (a la \"JSONDB\":http://github.com/jchris/WebWorkerStorage/blob/master/JSONDB.md), or for other fun databasey purposes."
  post_title: "Ottoman Status"
  post_excerpt: "Yes, I'm still working on Ottoman (my append-only multiversion-concurrent storage library). As the code grows in size and complexity, so it grows in its resistance to being changed. But I just pushed \"my latest changes\":http://bitbucket.org/snej/ottoman/changesets/ up to bitbucket.org. What's new? ..."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "ottoman-status"
  to_ping: ""
  pinged: ""
  post_modified: "2009-12-08 09:12:25"
  post_modified_gmt: "2009-12-08 17:12:25"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=386"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 387
  post_author: 2
  post_date: "2009-12-08 09:12:16"
  post_date_gmt: "2009-12-08 17:12:16"
  post_content: "Yes, I'm still working on Ottoman (my append-only multiversion-concurrent storage library). As the code grows in size and complexity, so it grows in its resistance to being changed, but as Piet Hein said and I never tire of quoting:\n\nbq. _Problems worthy of attack_\n_Prove their worth by fighting back._\n\nI just pushed \"my latest changes\":http://bitbucket.org/snej/ottoman/changesets/ up to bitbucket.org. What's new?\n\n*Variable-sized top-level index.* Previously, the hash data structure used a top level array of 256 hashtables. I've now made that '256' a variable that scales with the number of records. This saves a lot of room for smaller datasets. (Sounds easy, right? I thought so too. But it ended up triggering significant changes to the file format and algorithms and took a lot of debugging.)\n\n*The return of the trees! part un.* I started this as a project to learn about B+trees, but when I got to the point of implementing the append-only multiversion stuff I did it with hashtables first because it's more straightforward that way, and the tree code went into the freezer. Well, it's back now. There is a \"new\" \"Tree\":http://bitbucket.org/snej/ottoman/src/tip/src/Tree.h class that can be used to read and write persistent B+trees. It's not yet integrated into the top-level Ottoman class, though, so you can only use it on its own, not intermixed with hash-tables, and without the API for tracking versions.\n\nThe next task is of course to integrate the tree API into the Ottoman class. But more than that, it will be entwined with the hashtable such that trees will serve as searchable indexes into the data store. So the hashtable will provide extremely fast but unordered access via a unique \"record ID\", but you can build as many indexes as you like that will use ordered secondary keys (of your choice) to look up hash values.\n\nAt that point, I believe Ottoman will be ready to serve as a substrate for HTML local data storage, for \"implementing a CouchDB-compatible database\":http://jchrisa.net/drl/_design/sofa/_show/post/HTML5-Storage-Continues (a la \"JSONDB\":http://github.com/jchris/WebWorkerStorage/blob/master/JSONDB.md), or for other fun databasey purposes."
  post_title: "Ottoman Status"
  post_excerpt: "Yes, I'm still working on Ottoman (my append-only multiversion-concurrent storage library). As the code grows in size and complexity, so it grows in its resistance to being changed. But I just pushed \"my latest changes\":http://bitbucket.org/snej/ottoman/changesets/ up to bitbucket.org. What's new? ..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "386-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-12-08 09:12:16"
  post_modified_gmt: "2009-12-08 17:12:16"
  post_content_filtered: ""
  post_parent: 386
  guid: "http://jens.mooseyard.com/2009/12/386-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 388
  post_author: 2
  post_date: "2009-12-13 10:31:35"
  post_date_gmt: "2009-12-13 18:31:35"
  post_content: "Every year the Albums Of The Year lists seem more and more removed from my experience. (Most of the time I haven't heard a single album on the list.) Worse, we're now getting into the Of The Decade lists, making me realize how long this has been going on*. If you ask me the top albums of the '80s or '90s, I don't have too much trouble rattling off a bunch of names. But this decade? I get confused and have to start thinking hard and looking through the back covers of my mix CDs. Why is that? <i>[Ed.: it's because you're getting old. Duh.]</i>\n\nLet me start with this year, 2009. What was good? Hm; my prosthetic brain units at iTunes and last.fm tell me that it's:\n\n&bull; <strong>Dysrhythmia</strong>, &quot;<a href=\"http://www.myspace.com/dysrhythmiaband\">Psychic Maps</a>&quot; [jaw-dropping instrumental math-metal, will have you banging your head in 7/13 time.]\n\n&bull; <strong>Isis</strong>, &quot;<a href=\"http://pitchfork.com/reviews/albums/13009-wavering-radiant/\">Wavering Radiant</a>&quot; [post-metal? huge lowercase-'p' progressive epics. so good I'm willing to overlook the cookie-monster vocals.]\n\n&bull; <strong>Pelican</strong>, &quot;<a href=\"http://www.emusic.com/album/Pelican-Ephemeral-MP3-Download/11487598.html\">Ephemeral</a>&quot; EP [is it post-rock with big riffs? or restrained brainy instrumental metal?]\n\n&bull; <strong>Apricot Rail</strong>, &quot;<a href=\"http://music.hiddenshoal.com/artists/apricot-rail/\">Apricot Rail</a>&quot; [ok, this is instrumental-post-rock for sure, but atypically cheerful, kind of like Do Make Say Think. they've even got oboes omg!]\n\n&bull; <strong>The Happy Hollows</strong>, &quot;<a href=\"http://www.myspace.com/thehappyhollows\">Spells</a>&quot; [this is the token recognizably-indie-rock album on the list. are they secretly Deerhoof covering the Pixies? Or Lush covering Interpol? also, they are <a href=\"http://www.rockscope.com/article/259/Happy-Hollows---Spaceland\">hella cute</a> and I can't wait to see them live]\n\n&bull; <strong>Dirty Projectors</strong>, &quot;<a href=\"http://westernvinyl.com/artists/dirty_projectors.html\">Bitte Orca</a>&quot; [I still can't figure this out, with its Afrobeat guitar lines, intricate interlocking vocals, weird rhythms and weirder lyrics. ok, that description makes it sound like &quot;Remain In Light&quot;, which it isn't at all like, but maybe is somehow.]\n\n&bull; <strong>Elisa Luu</strong>, &quot;<a href=\"http://agora.hiddenshoal.com/index.php?main_page=product_info&amp;cPath=42&amp;products_id=117\">Chromatic Sigh</a>&quot; [can I say &quot;eclectic&quot; with a straight face? really interesting electronic music, clearly song-like, ranging between poles of rock and ambient.]\n\n&bull; <strong>Anduin + Jasper TX</strong>, &quot;<a href=\"http://www.boomkat.com/item.cfm?id=177591\">The Bending Of Light</a>&quot; [guitar-based drone. majestic.]\n\n&bull; <strong>Brock van Wey</strong>, &quot;<a href=\"http://www.popmatters.com/pm/review/116078-brock-van-wey-white-clouds-drift-on-and-on/\">White Clouds Drift On And On</a>&quot; [exactly what it sounds like. it comes with or without beats, your choice.]\n\n&bull; <strong>Eluder</strong>, &quot;<a href=\"http://www.archaichorizon.com/releases/ah030/ah030.html\">Drift</a>&quot; [exactly what it sounds like, too. careful with this one, some people have had trouble returning to earth afterwards.]\n\n&bull; <strong>J&oacute;nsi &amp; Alex</strong>, &quot;<a href=\"http://jonsiandalex.com/\">Riceboy Sleeps</a>&quot; [Sigur R&oacute;s guitarist and his boyfriend do Stars Of The Lid. delicious in small doses.]\n\n&bull; <strong>Victoire</strong>, &quot;<a href=\"http://www.emusic.com/features/spotlight/2009_200903-qa-selects-victoire.html\">A Door Into The Dark</a>&quot; EP [a string ensemble that embraces electronics as a natural part of their sound]\n\n&bull; <strong>Sub</strong>, &quot;<a href=\"http://www.plainaudio.com/dnb/releases/pp030md.html\">Id</a>&quot; EP [nothing new, but basically the best Photek tracks I've heard in ten years.]\n\nPS: there might be some last minute additions to this list if Kate Simko's &quot;Sounds Of The Atom Smashers&quot; and Concern's &quot;Truth And Distance&quot; live up to their potential.\nPPS: ZOMG I forgot Sunn O)))'s stark and forbidding &quot;Monoliths And Dimensions&quot;, whose final track &quot;Alice&quot; is deserving of a space up there.\nPPPS: Yes, a mix of this stuff is forthcoming...\n\n<span style=\"font-size: smaller; \">* It's not like I've been having trouble finding great new music, or that I resent other people for all picking different music than me; but it's a little sad to not be part of the zeitgeist. Long ago it was really important to me whether punk and new wave would break dinosaur rock's lock on the mainstream, or whether little-known underground bands like the Cure or the Pixies would get the recognition they deserved. I think the peak of my with-it-ness was circa 1990-91 when I could rattle off the name of every shoegazer band that mattered and I treated every issue of Melody Maker as a shopping list to take with me to the import bin at Tower to find the next Cranes or Chapterhouse.</span>"
  post_title: "The Music I Liked Of 2009"
  post_excerpt: "Every year the Albums Of The Year lists seem more and more removed from my experience. (Most of the time I haven't heard a single album on the list.) Worse, we're now getting into the Of The Decade lists, making me realize how long this has been going on*. If you ask me the top albums of the '80s or '90s, I don't have too much trouble rattling off a bunch of names. But this decade? I get confused and have to start thinking hard and looking through the back covers of my mix CDs. Why is that? <i>[Ed.: it's because you're getting old. Duh.]</i>\n\nLet me start with this year, 2009. What was good? Hm; my prosthetic brain units at iTunes and last.fm tell me that it's..."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "the-music-i-liked-of-2009"
  to_ping: ""
  pinged: ""
  post_modified: "2009-12-13 10:32:51"
  post_modified_gmt: "2009-12-13 18:32:51"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=388"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 389
  post_author: 2
  post_date: "2009-12-13 10:31:35"
  post_date_gmt: "2009-12-13 18:31:35"
  post_content: "Every year the Albums Of The Year lists seem more and more removed from my experience. (Most of the time I haven't heard a single album on the list.) Worse, we're now getting into the Of The Decade lists, making me realize how long this has been going on*. If you ask me the top albums of the '80s or '90s, I don't have too much trouble rattling off a bunch of names. But this decade? I get confused and have to start thinking hard and looking through the back covers of my mix CDs. Why is that? <i>[Ed.: it's because you're getting old. Duh.]</i>\n\nLet me start with this year, 2009. What was good? Hm; my prosthetic brain units at iTunes and last.fm tell me that it's:\n\n&bull; <strong>Dysrhythmia</strong>, &quot;<a href=\"http://www.myspace.com/dysrhythmiaband\">Psychic Maps</a>&quot; [jaw-dropping instrumental math-metal, will have you banging your head in 7/13 time.]\n\n&bull; <strong>Isis</strong>, &quot;<a href=\"http://pitchfork.com/reviews/albums/13009-wavering-radiant/\">Wavering Radiant</a>&quot; [post-metal? huge lowercase-'p' progressive epics. so good I'm willing to overlook the cookie-monster vocals.]\n\n&bull; <strong>Pelican</strong>, &quot;<a href=\"http://www.emusic.com/album/Pelican-Ephemeral-MP3-Download/11487598.html\">Ephemeral</a>&quot; EP [is it post-rock with big riffs? or restrained brainy instrumental metal?]\n\n&bull; <strong>Apricot Rail</strong>, &quot;<a href=\"http://music.hiddenshoal.com/artists/apricot-rail/\">Apricot Rail</a>&quot; [ok, this is instrumental-post-rock for sure, but atypically cheerful, kind of like Do Make Say Think. they've even got oboes omg!]\n\n&bull; <strong>The Happy Hollows</strong>, &quot;<a href=\"http://www.myspace.com/thehappyhollows\">Spells</a>&quot; [this is the token recognizably-indie-rock album on the list. are they secretly Deerhoof covering the Pixies? Or Lush covering Interpol? also, they are <a href=\"http://www.rockscope.com/article/259/Happy-Hollows---Spaceland\">hella cute</a> and I can't wait to see them live]\n\n&bull; <strong>Dirty Projectors</strong>, &quot;<a href=\"http://westernvinyl.com/artists/dirty_projectors.html\">Bitte Orca</a>&quot; [I still can't figure this out, with its Afrobeat guitar lines, intricate interlocking vocals, weird rhythms and weirder lyrics. ok, that description makes it sound like &quot;Remain In Light&quot;, which it isn't at all like, but maybe is somehow.]\n\n&bull; <strong>Elisa Luu</strong>, &quot;<a href=\"http://agora.hiddenshoal.com/index.php?main_page=product_info&amp;cPath=42&amp;products_id=117\">Chromatic Sigh</a>&quot; [can I say &quot;eclectic&quot; with a straight face? really interesting electronic music, clearly song-like, ranging between poles of rock and ambient.]\n\n&bull; <strong>Anduin + Jasper TX</strong>, &quot;<a href=\"http://www.boomkat.com/item.cfm?id=177591\">The Bending Of Light</a>&quot; [guitar-based drone. majestic.]\n\n&bull; <strong>Brock van Wey</strong>, &quot;<a href=\"http://www.popmatters.com/pm/review/116078-brock-van-wey-white-clouds-drift-on-and-on/\">White Clouds Drift On And On</a>&quot; [exactly what it sounds like. it comes with or without beats, your choice.]\n\n&bull; <strong>Eluder</strong>, &quot;<a href=\"http://www.archaichorizon.com/releases/ah030/ah030.html\">Drift</a>&quot; [exactly what it sounds like, too. careful with this one, some people have had trouble returning to earth afterwards.]\n\n&bull; <strong>J&oacute;nsi &amp; Alex</strong>, &quot;<a href=\"http://jonsiandalex.com/\">Riceboy Sleeps</a>&quot; [Sigur R&oacute;s guitarist and his boyfriend do Stars Of The Lid. delicious in small doses.]\n&bull; <strong>Victoire</strong>, &quot;<a href=\"http://www.emusic.com/features/spotlight/2009_200903-qa-selects-victoire.html\">A Door Into The Dark</a>&quot; EP [a string ensemble that embraces electronics as a natural part of their sound]\n\n&bull; <strong>Sub</strong>, &quot;<a href=\"http://www.plainaudio.com/dnb/releases/pp030md.html\">Id</a>&quot; EP [nothing new, but basically the best Photek tracks I've heard in ten years.]\n\nPS: there might be some last minute additions to this list if Kate Simko's &quot;Sounds Of The Atom Smashers&quot; and Concern's &quot;Truth And Distance&quot; live up to their potential.\nPPS: ZOMG I forgot Sunn O)))'s stark and forbidding &quot;Monoliths And Dimensions&quot;, whose final track &quot;Alice&quot; is deserving of a space up there.\nPPPS: Yes, a mix of this stuff is forthcoming...\n\n<span style=\"font-size: smaller; \">* It's not like I've been having trouble finding great new music, or that I resent other people for all picking different music than me; but it's a little sad to not be part of the zeitgeist. Long ago it was really important to me whether punk and new wave would break dinosaur rock's lock on the mainstream, or whether little-known underground bands like the Cure or the Pixies would get the recognition they deserved. I think the peak of my with-it-ness was circa 1990-91 when I could rattle off the name of every shoegazer band that mattered and I treated every issue of Melody Maker as a shopping list to take with me to the import bin at Tower to find the next Cranes or Chapterhouse.</span>"
  post_title: "The Music I Liked Of 2009"
  post_excerpt: "Every year the Albums Of The Year lists seem more and more removed from my experience. (Most of the time I haven't heard a single album on the list.) Worse, we're now getting into the Of The Decade lists, making me realize how long this has been going on*. If you ask me the top albums of the '80s or '90s, I don't have too much trouble rattling off a bunch of names. But this decade? I get confused and have to start thinking hard and looking through the back covers of my mix CDs. Why is that? <i>[Ed.: it's because you're getting old. Duh.]</i>\n\nLet me start with this year, 2009. What was good? Hm; my prosthetic brain units at iTunes and last.fm tell me that it's..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "388-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2009-12-13 10:31:35"
  post_modified_gmt: "2009-12-13 18:31:35"
  post_content_filtered: ""
  post_parent: 388
  guid: "http://jens.mooseyard.com/2009/12/388-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 390
  post_author: 2
  post_date: "2009-12-13 10:31:38"
  post_date_gmt: "2009-12-13 18:31:38"
  post_content: "Every year the Albums Of The Year lists seem more and more removed from my experience. (Most of the time I haven't heard a single album on the list.) Worse, we're now getting into the Of The Decade lists, making me realize how long this has been going on*. If you ask me the top albums of the '80s or '90s, I don't have too much trouble rattling off a bunch of names. But this decade? I get confused and have to start thinking hard and looking through the back covers of my mix CDs. Why is that? <i>[Ed.: it's because you're getting old. Duh.]</i>\n\nLet me start with this year, 2009. What was good? Hm; my prosthetic brain units at iTunes and last.fm tell me that it's:\n\n&bull; <strong>Dysrhythmia</strong>, &quot;<a href=\"http://www.myspace.com/dysrhythmiaband\">Psychic Maps</a>&quot; [jaw-dropping instrumental math-metal, will have you banging your head in 7/13 time.]\n\n&bull; <strong>Isis</strong>, &quot;<a href=\"http://pitchfork.com/reviews/albums/13009-wavering-radiant/\">Wavering Radiant</a>&quot; [post-metal? huge lowercase-'p' progressive epics. so good I'm willing to overlook the cookie-monster vocals.]\n\n&bull; <strong>Pelican</strong>, &quot;<a href=\"http://www.emusic.com/album/Pelican-Ephemeral-MP3-Download/11487598.html\">Ephemeral</a>&quot; EP [is it post-rock with big riffs? or restrained brainy instrumental metal?]\n\n&bull; <strong>Apricot Rail</strong>, &quot;<a href=\"http://music.hiddenshoal.com/artists/apricot-rail/\">Apricot Rail</a>&quot; [ok, this is instrumental-post-rock for sure, but atypically cheerful, kind of like Do Make Say Think. they've even got oboes omg!]\n\n&bull; <strong>The Happy Hollows</strong>, &quot;<a href=\"http://www.myspace.com/thehappyhollows\">Spells</a>&quot; [this is the token recognizably-indie-rock album on the list. are they secretly Deerhoof covering the Pixies? Or Lush covering Interpol? also, they are <a href=\"http://www.rockscope.com/article/259/Happy-Hollows---Spaceland\">hella cute</a> and I can't wait to see them live]\n\n&bull; <strong>Dirty Projectors</strong>, &quot;<a href=\"http://westernvinyl.com/artists/dirty_projectors.html\">Bitte Orca</a>&quot; [I still can't figure this out, with its Afrobeat guitar lines, intricate interlocking vocals, weird rhythms and weirder lyrics. ok, that description makes it sound like &quot;Remain In Light&quot;, which it isn't at all like, but maybe is somehow.]\n\n&bull; <strong>Elisa Luu</strong>, &quot;<a href=\"http://agora.hiddenshoal.com/index.php?main_page=product_info&amp;cPath=42&amp;products_id=117\">Chromatic Sigh</a>&quot; [can I say &quot;eclectic&quot; with a straight face? really interesting electronic music, clearly song-like, ranging between poles of rock and ambient.]\n\n&bull; <strong>Anduin + Jasper TX</strong>, &quot;<a href=\"http://www.boomkat.com/item.cfm?id=177591\">The Bending Of Light</a>&quot; [guitar-based drone. majestic.]\n\n&bull; <strong>Brock van Wey</strong>, &quot;<a href=\"http://www.popmatters.com/pm/review/116078-brock-van-wey-white-clouds-drift-on-and-on/\">White Clouds Drift On And On</a>&quot; [exactly what it sounds like. it comes with or without beats, your choice.]\n\n&bull; <strong>Eluder</strong>, &quot;<a href=\"http://www.archaichorizon.com/releases/ah030/ah030.html\">Drift</a>&quot; [exactly what it sounds like, too. careful with this one, some people have had trouble returning to earth afterwards.]\n\n&bull; <strong>J&oacute;nsi &amp; Alex</strong>, &quot;<a href=\"http://jonsiandalex.com/\">Riceboy Sleeps</a>&quot; [Sigur R&oacute;s guitarist and his boyfriend do Stars Of The Lid. delicious in small doses.]\n&bull; <strong>Victoire</strong>, &quot;<a href=\"http://www.emusic.com/features/spotlight/2009_200903-qa-selects-victoire.html\">A Door Into The Dark</a>&quot; EP [a string ensemble that embraces electronics as a natural part of their sound]\n\n&bull; <strong>Sub</strong>, &quot;<a href=\"http://www.plainaudio.com/dnb/releases/pp030md.html\">Id</a>&quot; EP [nothing new, but basically the best Photek tracks I've heard in ten years.]\n\nPS: there might be some last minute additions to this list if Kate Simko's &quot;Sounds Of The Atom Smashers&quot; and Concern's &quot;Truth And Distance&quot; live up to their potential.\nPPS: ZOMG I forgot Sunn O)))'s stark and forbidding &quot;Monoliths And Dimensions&quot;, whose final track &quot;Alice&quot; is deserving of a space up there.\nPPPS: Yes, a mix of this stuff is forthcoming...\n\n<span style=\"font-size: smaller; \">* It's not like I've been having trouble finding great new music, or that I resent other people for all picking different music than me; but it's a little sad to not be part of the zeitgeist. Long ago it was really important to me whether punk and new wave would break dinosaur rock's lock on the mainstream, or whether little-known underground bands like the Cure or the Pixies would get the recognition they deserved. I think the peak of my with-it-ness was circa 1990-91 when I could rattle off the name of every shoegazer band that mattered and I treated every issue of Melody Maker as a shopping list to take with me to the import bin at Tower to find the next Cranes or Chapterhouse.</span>"
  post_title: "The Music I Liked Of 2009"
  post_excerpt: "Every year the Albums Of The Year lists seem more and more removed from my experience. (Most of the time I haven't heard a single album on the list.) Worse, we're now getting into the Of The Decade lists, making me realize how long this has been going on*. If you ask me the top albums of the '80s or '90s, I don't have too much trouble rattling off a bunch of names. But this decade? I get confused and have to start thinking hard and looking through the back covers of my mix CDs. Why is that? <i>[Ed.: it's because you're getting old. Duh.]</i>\n\nLet me start with this year, 2009. What was good? Hm; my prosthetic brain units at iTunes and last.fm tell me that it's..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "388-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2009-12-13 10:31:38"
  post_modified_gmt: "2009-12-13 18:31:38"
  post_content_filtered: ""
  post_parent: 388
  guid: "http://jens.mooseyard.com/2009/12/388-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 391
  post_author: 2
  post_date: "2009-12-13 10:32:45"
  post_date_gmt: "2009-12-13 18:32:45"
  post_content: "Every year the Albums Of The Year lists seem more and more removed from my experience. (Most of the time I haven't heard a single album on the list.) Worse, we're now getting into the Of The Decade lists, making me realize how long this has been going on*. If you ask me the top albums of the '80s or '90s, I don't have too much trouble rattling off a bunch of names. But this decade? I get confused and have to start thinking hard and looking through the back covers of my mix CDs. Why is that? <i>[Ed.: it's because you're getting old. Duh.]</i>\n\nLet me start with this year, 2009. What was good? Hm; my prosthetic brain units at iTunes and last.fm tell me that it's:\n\n&bull; <strong>Dysrhythmia</strong>, &quot;<a href=\"http://www.myspace.com/dysrhythmiaband\">Psychic Maps</a>&quot; [jaw-dropping instrumental math-metal, will have you banging your head in 7/13 time.]\n\n&bull; <strong>Isis</strong>, &quot;<a href=\"http://pitchfork.com/reviews/albums/13009-wavering-radiant/\">Wavering Radiant</a>&quot; [post-metal? huge lowercase-'p' progressive epics. so good I'm willing to overlook the cookie-monster vocals.]\n\n&bull; <strong>Pelican</strong>, &quot;<a href=\"http://www.emusic.com/album/Pelican-Ephemeral-MP3-Download/11487598.html\">Ephemeral</a>&quot; EP [is it post-rock with big riffs? or restrained brainy instrumental metal?]\n\n&bull; <strong>Apricot Rail</strong>, &quot;<a href=\"http://music.hiddenshoal.com/artists/apricot-rail/\">Apricot Rail</a>&quot; [ok, this is instrumental-post-rock for sure, but atypically cheerful, kind of like Do Make Say Think. they've even got oboes omg!]\n\n&bull; <strong>The Happy Hollows</strong>, &quot;<a href=\"http://www.myspace.com/thehappyhollows\">Spells</a>&quot; [this is the token recognizably-indie-rock album on the list. are they secretly Deerhoof covering the Pixies? Or Lush covering Interpol? also, they are <a href=\"http://www.rockscope.com/article/259/Happy-Hollows---Spaceland\">hella cute</a> and I can't wait to see them live]\n\n&bull; <strong>Dirty Projectors</strong>, &quot;<a href=\"http://westernvinyl.com/artists/dirty_projectors.html\">Bitte Orca</a>&quot; [I still can't figure this out, with its Afrobeat guitar lines, intricate interlocking vocals, weird rhythms and weirder lyrics. ok, that description makes it sound like &quot;Remain In Light&quot;, which it isn't at all like, but maybe is somehow.]\n\n&bull; <strong>Elisa Luu</strong>, &quot;<a href=\"http://agora.hiddenshoal.com/index.php?main_page=product_info&amp;cPath=42&amp;products_id=117\">Chromatic Sigh</a>&quot; [can I say &quot;eclectic&quot; with a straight face? really interesting electronic music, clearly song-like, ranging between poles of rock and ambient.]\n\n&bull; <strong>Anduin + Jasper TX</strong>, &quot;<a href=\"http://www.boomkat.com/item.cfm?id=177591\">The Bending Of Light</a>&quot; [guitar-based drone. majestic.]\n\n&bull; <strong>Brock van Wey</strong>, &quot;<a href=\"http://www.popmatters.com/pm/review/116078-brock-van-wey-white-clouds-drift-on-and-on/\">White Clouds Drift On And On</a>&quot; [exactly what it sounds like. it comes with or without beats, your choice.]\n\n&bull; <strong>Eluder</strong>, &quot;<a href=\"http://www.archaichorizon.com/releases/ah030/ah030.html\">Drift</a>&quot; [exactly what it sounds like, too. careful with this one, some people have had trouble returning to earth afterwards.]\n\n&bull; <strong>J&oacute;nsi &amp; Alex</strong>, &quot;<a href=\"http://jonsiandalex.com/\">Riceboy Sleeps</a>&quot; [Sigur R&oacute;s guitarist and his boyfriend do Stars Of The Lid. delicious in small doses.]\n\n&bull; <strong>Victoire</strong>, &quot;<a href=\"http://www.emusic.com/features/spotlight/2009_200903-qa-selects-victoire.html\">A Door Into The Dark</a>&quot; EP [a string ensemble that embraces electronics as a natural part of their sound]\n\n&bull; <strong>Sub</strong>, &quot;<a href=\"http://www.plainaudio.com/dnb/releases/pp030md.html\">Id</a>&quot; EP [nothing new, but basically the best Photek tracks I've heard in ten years.]\n\nPS: there might be some last minute additions to this list if Kate Simko's &quot;Sounds Of The Atom Smashers&quot; and Concern's &quot;Truth And Distance&quot; live up to their potential.\nPPS: ZOMG I forgot Sunn O)))'s stark and forbidding &quot;Monoliths And Dimensions&quot;, whose final track &quot;Alice&quot; is deserving of a space up there.\nPPPS: Yes, a mix of this stuff is forthcoming...\n\n<span style=\"font-size: smaller; \">* It's not like I've been having trouble finding great new music, or that I resent other people for all picking different music than me; but it's a little sad to not be part of the zeitgeist. Long ago it was really important to me whether punk and new wave would break dinosaur rock's lock on the mainstream, or whether little-known underground bands like the Cure or the Pixies would get the recognition they deserved. I think the peak of my with-it-ness was circa 1990-91 when I could rattle off the name of every shoegazer band that mattered and I treated every issue of Melody Maker as a shopping list to take with me to the import bin at Tower to find the next Cranes or Chapterhouse.</span>"
  post_title: "The Music I Liked Of 2009"
  post_excerpt: "Every year the Albums Of The Year lists seem more and more removed from my experience. (Most of the time I haven't heard a single album on the list.) Worse, we're now getting into the Of The Decade lists, making me realize how long this has been going on*. If you ask me the top albums of the '80s or '90s, I don't have too much trouble rattling off a bunch of names. But this decade? I get confused and have to start thinking hard and looking through the back covers of my mix CDs. Why is that? <i>[Ed.: it's because you're getting old. Duh.]</i>\n\nLet me start with this year, 2009. What was good? Hm; my prosthetic brain units at iTunes and last.fm tell me that it's..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "388-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2009-12-13 10:32:45"
  post_modified_gmt: "2009-12-13 18:32:45"
  post_content_filtered: ""
  post_parent: 388
  guid: "http://jens.mooseyard.com/2009/12/388-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 392
  post_author: 2
  post_date: "2010-02-09 09:57:10"
  post_date_gmt: "2010-02-09 17:57:10"
  post_content: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader as an intermediary, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)\n\nh2. CouchDB\n\n\"CouchDB\":http://couchdb.apache.org is an awesome web-centric database engine. It doesn't use SQL; instead, it's a glorified key-value store whose values are arbitrary JSON objects, and which uses map-reduce for efficient querying. The basic API is pure REST, though glue libraries for many languages exist.\n\nCouchDB natively supports syncing data through distributed groups of servers. It's sort of like the way distributed version-control systems like Git or Mercurial work: multiple CouchDB instances each store a replica of the same data set, but can \"pull\" changes from each other over HTTP to stay in sync.\n\nCouchDB is pretty lightweight and is already being used on the desktop by client apps: GNOME has been \"integrating it into the Linux desktop\":https://launchpad.net/desktopcouch to use as a shared store for user data like contacts and bookmarks. It plays a similar role to SyncServices on Mac OS, but it's all open source and any two instances can sync with each other instead of requiring a proprietary server. I hear this is already shipping in the latest Ubuntu releases.\n\nIt doesn't look as though anyone's designed a schema for storing RSS subscriptions this way, but it would be pretty easy to define one. You then need a local agent running CouchDB (it can be stripped down to be pretty small), a client library for Cocoa apps, and an upstream CouchDB server to sync to.\n\nh2. REST-Logging\n\nThis protocol is similar to what I came up with for PubSub. It's a simple extension of \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer, but I haven't heard of it being used elsewhere. The idea is that you model an append-only log file as an HTTP resource. The items that are logged are 'events' describing changes in the data model, in this case the subscriptions and articles.\n\nThe sync algorithm looks like this:\n\n# Download all the data that's been added to the remote log file since your last sync. Remember the file's ETag.\n# Parse that data into a sequence of log entries, and process them in order. Each entry names a model object (feed or article) and an action (subscribe, unsubscribe, mark read, mark unread). Apply those changes to the local data store.\n# Query your local data store to find all the changes that have been made since your last sync. _Ignore_ the remote changes you just applied in the previous step, and also any earlier local changes that duplicate a remote change (like marking the same article as read.)\n# Generate a series of log entries for those changes and concatenate them into a data blob.\n# Upload that blob, appending it to the remote log file. Remember the resulting ETag. In case of a conflict (someone else has changed the remote file since step 1), toss out the blob and return to step 1.\n\nYou can think of the log file as a queue or message stream that's being collaboratively read and written by all of the clients. This sounds like something you'd need a fancy web-app to manage, but it turns out that all it takes is a typical HTTP 1.1 server and a trivial server-side script.\n\nThe download is a conditional GET, as used for fetching feeds themselves. The difference is that you use a \"Range:\" header to request _only the bytes past the last known EOF_. For example, if the last time you read the log it was 123456 bytes long, you add the header \"Range: 123456-\" to the request. This ensures that you only get back the new bytes that were added to the end. (And since this is a conditional GET, if the file hasn't changed at all you just get back an empty 304 response.)\n\nThat's all you need to do to track changes. Since the file is append-only, the only bytes you need to read are the ones added to the end. This request efficiently sends you just those bytes.\n\nWhat's cool is that this require _no server-side software_. If the log is a static file, any regular HTTP server like Apache will automatically handle GET requests for it, even byte-range ones. (Ranges are already used by browsers to resume interrupted downloads.) And it sends the response at high speed, since the server's just streaming from a file, without multiple back-and-forth requests and without expensive database queries.\n\nHow about writing? Ideally you'd use the same approach, with a byte-range PUT that specifies that the request body should go at the end of the file. Unfortunately most servers don't support this for static files, even though it's basically just HTTP 1.1. But it's really easy to implement. Any PHP crufter should be able to whip up a one-page script that simply responds to a POST by reading the request body and appending it to a local file (while doing the necessary ETag and range verification.) The great thing is that this script doesn't have to know anything at all about RSS or subscriptions or unread counts; it's completely generic. You can upgrade the data model without having to touch the script, and you could use the same script to sync anything, not just RSS.\n\n(Yes, there is a semi-obvious drawback to this protocol: the file grows without limit. Surprisingly, this is not a problem most of the time, since clients only upload or download new data; the only real limit is the maximum file size or disk quota allowed by the server. But it does present a problem for a new client, whose first-time sync would download the entire file. This can be worked around by having new clients ignore very old data (only download the latest 10MB, say) or by periodically writing a compact subscription list to a separate URL.)"
  post_title: "Re: Idea for alternative RSS syncing system"
  post_excerpt: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)"
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "re-idea-for-alternative-rss-syncing-system"
  to_ping: ""
  pinged: ""
  post_modified: "2010-02-09 09:58:43"
  post_modified_gmt: "2010-02-09 17:58:43"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=392"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 393
  post_author: 2
  post_date: "2010-02-09 09:57:10"
  post_date_gmt: "2010-02-09 17:57:10"
  post_content: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader as an intermediary, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)\n\nh2. CouchDB\n\n\"CouchDB\":http://couchdb.apache.org is an awesome web-centric database engine. It doesn't use SQL; instead, it's a glorified key-value store whose values are arbitrary JSON objects, and which uses map-reduce for efficient querying. The basic API is pure REST, though glue libraries for many languages exist.\n\nCouchDB natively supports syncing data through distributed groups of servers. It's sort of like the way distributed version-control systems like Git or Mercurial work: multiple CouchDB instances each store a replica of the same data set, but can \"pull\" changes from each other over HTTP to stay in sync.\n\nCouchDB is pretty lightweight and is already being used on the desktop by client apps: GNOME has been \"integrating it into the Linux desktop\":https://launchpad.net/desktopcouch to use as a shared store for user data like contacts and bookmarks. It plays a similar role to SyncServices on Mac OS, but it's all open source and any two instances can sync with each other instead of requiring a proprietary server. I hear this is already shipping in the latest Ubuntu releases.\n\nIt doesn't look as though anyone's designed a schema for storing RSS subscriptions this way, but it would be pretty easy to define one. You then need a local agent running CouchDB (it can be stripped down to be pretty small), a client library for Cocoa apps, and an upstream CouchDB server to sync to.\n\nh2. REST-Logging\n\nThis protocol is similar to what I came up with for PubSub. It's a simple extension of \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer, but I haven't heard of it being used elsewhere. The idea is that you model an append-only log file as an HTTP resource. The items that are logged are 'events' describing changes in the data model, in this case the subscriptions and articles.\n\nThe sync algorithm looks like this:\n\n# Download all the data that's been added to the remote log file since your last sync. Remember the file's ETag.\n# Parse that data into a sequence of log entries, and process them in order. Each entry names a model object (feed or article) and an action (subscribe, unsubscribe, mark read, mark unread). Apply those changes to the local data store.\n# Query your local data store to find all the changes that have been made since your last sync. _Ignore_ the remote changes you just applied in the previous step, and also any earlier local changes that duplicate a remote change (like marking the same article as read.)\n# Generate a series of log entries for those changes and concatenate them into a data blob.\n# Upload that blob, appending it to the remote log file. Remember the resulting ETag. In case of a conflict (someone else has changed the remote file since step 1), toss out the blob and return to step 1.\n\nYou can think of the log file as a queue or message stream that's being collaboratively read and written by all of the clients. This sounds like something you'd need a fancy web-app to manage, but it turns out that all it takes is a typical HTTP 1.1 server and a trivial server-side script.\n\nThe download is a conditional GET, as used for fetching feeds themselves. The difference is that you use a \"Range:\" header to request _only the bytes past the last known EOF_. For example, if the last time you read the log it was 123456 bytes long, you add the header \"Range: 123456-\" to the request. This ensures that you only get back the new bytes that were added to the end. (And since this is a conditional GET, if the file hasn't changed at all you just get back an empty 304 response.)\n\nThat's all you need to do to track changes. Since the file is append-only, the only bytes you need to read are the ones added to the end. This request efficiently sends you just those bytes.\n\nWhat's cool is that this require _no server-side software_. If the log is a static file, any regular HTTP server like Apache will automatically handle GET requests for it, even byte-range ones. (Ranges are already used by browsers to resume interrupted downloads.) And it sends the response at high speed, since the server's just streaming from a file, without multiple back-and-forth requests and without expensive database queries.\n\nHow about writing? Ideally you'd use the same approach, with a byte-range PUT that specifies that the request body should go at the end of the file. Unfortunately most servers don't support this for static files, even though it's basically just HTTP 1.1. But it's really easy to implement. Any PHP crufter should be able to whip up a one-page script that simply responds to a POST by reading the request body and appending it to a local file (while doing the necessary ETag and range verification.) The great thing is that this script doesn't have to know anything at all about RSS or subscriptions or unread counts; it's completely generic. You can upgrade the data model without having to touch the script, and you could use the same script to sync anything, not just RSS.\n\n(Yes, there is a semi-obvious drawback to this protocol: the file grows without limit. Surprisingly, this is not a problem most of the time, since clients only upload or download new data; the only real limit is the maximum file size or disk quota allowed by the server. But it does present a problem for a new client, whose first-time sync would download the entire file. This can be worked around by having new clients ignore very old data (only download the latest 10MB, say) or by periodically writing a compact subscription list to a separate URL.)"
  post_title: "Re: Idea for alternative RSS syncing system"
  post_excerpt: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "392-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2010-02-09 09:57:10"
  post_modified_gmt: "2010-02-09 17:57:10"
  post_content_filtered: ""
  post_parent: 392
  guid: "http://jens.mooseyard.com/2010/02/392-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 394
  post_author: 2
  post_date: "2010-02-09 09:57:16"
  post_date_gmt: "2010-02-09 17:57:16"
  post_content: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader as an intermediary, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)\n\nh2. CouchDB\n\n\"CouchDB\":http://couchdb.apache.org is an awesome web-centric database engine. It doesn't use SQL; instead, it's a glorified key-value store whose values are arbitrary JSON objects, and which uses map-reduce for efficient querying. The basic API is pure REST, though glue libraries for many languages exist.\n\nCouchDB natively supports syncing data through distributed groups of servers. It's sort of like the way distributed version-control systems like Git or Mercurial work: multiple CouchDB instances each store a replica of the same data set, but can \"pull\" changes from each other over HTTP to stay in sync.\n\nCouchDB is pretty lightweight and is already being used on the desktop by client apps: GNOME has been \"integrating it into the Linux desktop\":https://launchpad.net/desktopcouch to use as a shared store for user data like contacts and bookmarks. It plays a similar role to SyncServices on Mac OS, but it's all open source and any two instances can sync with each other instead of requiring a proprietary server. I hear this is already shipping in the latest Ubuntu releases.\n\nIt doesn't look as though anyone's designed a schema for storing RSS subscriptions this way, but it would be pretty easy to define one. You then need a local agent running CouchDB (it can be stripped down to be pretty small), a client library for Cocoa apps, and an upstream CouchDB server to sync to.\n\nh2. REST-Logging\n\nThis protocol is similar to what I came up with for PubSub. It's a simple extension of \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer, but I haven't heard of it being used elsewhere. The idea is that you model an append-only log file as an HTTP resource. The items that are logged are 'events' describing changes in the data model, in this case the subscriptions and articles.\n\nThe sync algorithm looks like this:\n\n# Download all the data that's been added to the remote log file since your last sync. Remember the file's ETag.\n# Parse that data into a sequence of log entries, and process them in order. Each entry names a model object (feed or article) and an action (subscribe, unsubscribe, mark read, mark unread). Apply those changes to the local data store.\n# Query your local data store to find all the changes that have been made since your last sync. _Ignore_ the remote changes you just applied in the previous step, and also any earlier local changes that duplicate a remote change (like marking the same article as read.)\n# Generate a series of log entries for those changes and concatenate them into a data blob.\n# Upload that blob, appending it to the remote log file. Remember the resulting ETag. In case of a conflict (someone else has changed the remote file since step 1), toss out the blob and return to step 1.\n\nYou can think of the log file as a queue or message stream that's being collaboratively read and written by all of the clients. This sounds like something you'd need a fancy web-app to manage, but it turns out that all it takes is a typical HTTP 1.1 server and a trivial server-side script.\n\nThe download is a conditional GET, as used for fetching feeds themselves. The difference is that you use a \"Range:\" header to request _only the bytes past the last known EOF_. For example, if the last time you read the log it was 123456 bytes long, you add the header \"Range: 123456-\" to the request. This ensures that you only get back the new bytes that were added to the end. (And since this is a conditional GET, if the file hasn't changed at all you just get back an empty 304 response.)\n\nThat's all you need to do to track changes. Since the file is append-only, the only bytes you need to read are the ones added to the end. This request efficiently sends you just those bytes.\n\nWhat's cool is that this require _no server-side software_. If the log is a static file, any regular HTTP server like Apache will automatically handle GET requests for it, even byte-range ones. (Ranges are already used by browsers to resume interrupted downloads.) And it sends the response at high speed, since the server's just streaming from a file, without multiple back-and-forth requests and without expensive database queries.\n\nHow about writing? Ideally you'd use the same approach, with a byte-range PUT that specifies that the request body should go at the end of the file. Unfortunately most servers don't support this for static files, even though it's basically just HTTP 1.1. But it's really easy to implement. Any PHP crufter should be able to whip up a one-page script that simply responds to a POST by reading the request body and appending it to a local file (while doing the necessary ETag and range verification.) The great thing is that this script doesn't have to know anything at all about RSS or subscriptions or unread counts; it's completely generic. You can upgrade the data model without having to touch the script, and you could use the same script to sync anything, not just RSS.\n\n(Yes, there is a semi-obvious drawback to this protocol: the file grows without limit. Surprisingly, this is not a problem most of the time, since clients only upload or download new data; the only real limit is the maximum file size or disk quota allowed by the server. But it does present a problem for a new client, whose first-time sync would download the entire file. This can be worked around by having new clients ignore very old data (only download the latest 10MB, say) or by periodically writing a compact subscription list to a separate URL.)"
  post_title: "Re: Idea for alternative RSS syncing system"
  post_excerpt: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "392-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2010-02-09 09:57:16"
  post_modified_gmt: "2010-02-09 17:57:16"
  post_content_filtered: ""
  post_parent: 392
  guid: "http://jens.mooseyard.com/2010/02/392-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 395
  post_author: 2
  post_date: "2010-02-09 09:58:04"
  post_date_gmt: "2010-02-09 17:58:04"
  post_content: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system , that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader as an intermediary, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)\n\nh2. CouchDB\n\n\"CouchDB\":http://couchdb.apache.org is an awesome web-centric database engine. It doesn't use SQL; instead, it's a glorified key-value store whose values are arbitrary JSON objects, and which uses map-reduce for efficient querying. The basic API is pure REST, though glue libraries for many languages exist.\n\nCouchDB natively supports syncing data through distributed groups of servers. It's sort of like the way distributed version-control systems like Git or Mercurial work: multiple CouchDB instances each store a replica of the same data set, but can \"pull\" changes from each other over HTTP to stay in sync.\n\nCouchDB is pretty lightweight and is already being used on the desktop by client apps: GNOME has been \"integrating it into the Linux desktop\":https://launchpad.net/desktopcouch to use as a shared store for user data like contacts and bookmarks. It plays a similar role to SyncServices on Mac OS, but it's all open source and any two instances can sync with each other instead of requiring a proprietary server. I hear this is already shipping in the latest Ubuntu releases.\n\nIt doesn't look as though anyone's designed a schema for storing RSS subscriptions this way, but it would be pretty easy to define one. You then need a local agent running CouchDB (it can be stripped down to be pretty small), a client library for Cocoa apps, and an upstream CouchDB server to sync to.\n\nh2. REST-Logging\n\nThis protocol is similar to what I came up with for PubSub. It's a simple extension of \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer, but I haven't heard of it being used elsewhere. The idea is that you model an append-only log file as an HTTP resource. The items that are logged are 'events' describing changes in the data model, in this case the subscriptions and articles.\n\nThe sync algorithm looks like this:\n\n# Download all the data that's been added to the remote log file since your last sync. Remember the file's ETag.\n# Parse that data into a sequence of log entries, and process them in order. Each entry names a model object (feed or article) and an action (subscribe, unsubscribe, mark read, mark unread). Apply those changes to the local data store.\n# Query your local data store to find all the changes that have been made since your last sync. _Ignore_ the remote changes you just applied in the previous step, and also any earlier local changes that duplicate a remote change (like marking the same article as read.)\n# Generate a series of log entries for those changes and concatenate them into a data blob.\n# Upload that blob, appending it to the remote log file. Remember the resulting ETag. In case of a conflict (someone else has changed the remote file since step 1), toss out the blob and return to step 1.\n\nYou can think of the log file as a queue or message stream that's being collaboratively read and written by all of the clients. This sounds like something you'd need a fancy web-app to manage, but it turns out that all it takes is a typical HTTP 1.1 server and a trivial server-side script.\n\nThe download is a conditional GET, as used for fetching feeds themselves. The difference is that you use a \"Range:\" header to request _only the bytes past the last known EOF_. For example, if the last time you read the log it was 123456 bytes long, you add the header \"Range: 123456-\" to the request. This ensures that you only get back the new bytes that were added to the end. (And since this is a conditional GET, if the file hasn't changed at all you just get back an empty 304 response.)\n\nThat's all you need to do to track changes. Since the file is append-only, the only bytes you need to read are the ones added to the end. This request efficiently sends you just those bytes.\n\nWhat's cool is that this require _no server-side software_. If the log is a static file, any regular HTTP server like Apache will automatically handle GET requests for it, even byte-range ones. (Ranges are already used by browsers to resume interrupted downloads.) And it sends the response at high speed, since the server's just streaming from a file, without multiple back-and-forth requests and without expensive database queries.\n\nHow about writing? Ideally you'd use the same approach, with a byte-range PUT that specifies that the request body should go at the end of the file. Unfortunately most servers don't support this for static files, even though it's basically just HTTP 1.1. But it's really easy to implement. Any PHP crufter should be able to whip up a one-page script that simply responds to a POST by reading the request body and appending it to a local file (while doing the necessary ETag and range verification.) The great thing is that this script doesn't have to know anything at all about RSS or subscriptions or unread counts; it's completely generic. You can upgrade the data model without having to touch the script, and you could use the same script to sync anything, not just RSS.\n\n(Yes, there is a semi-obvious drawback to this protocol: the file grows without limit. Surprisingly, this is not a problem most of the time, since clients only upload or download new data; the only real limit is the maximum file size or disk quota allowed by the server. But it does present a problem for a new client, whose first-time sync would download the entire file. This can be worked around by having new clients ignore very old data (only download the latest 10MB, say) or by periodically writing a compact subscription list to a separate URL.)"
  post_title: "Re: Idea for alternative RSS syncing system"
  post_excerpt: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "392-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2010-02-09 09:58:04"
  post_modified_gmt: "2010-02-09 17:58:04"
  post_content_filtered: ""
  post_parent: 392
  guid: "http://jens.mooseyard.com/2010/02/392-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 396
  post_author: 2
  post_date: "2010-02-09 09:58:10"
  post_date_gmt: "2010-02-09 17:58:10"
  post_content: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system , that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader as an intermediary, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)\n\nh2. CouchDB\n\n\"CouchDB\":http://couchdb.apache.org is an awesome web-centric database engine. It doesn't use SQL; instead, it's a glorified key-value store whose values are arbitrary JSON objects, and which uses map-reduce for efficient querying. The basic API is pure REST, though glue libraries for many languages exist.\n\nCouchDB natively supports syncing data through distributed groups of servers. It's sort of like the way distributed version-control systems like Git or Mercurial work: multiple CouchDB instances each store a replica of the same data set, but can \"pull\" changes from each other over HTTP to stay in sync.\n\nCouchDB is pretty lightweight and is already being used on the desktop by client apps: GNOME has been \"integrating it into the Linux desktop\":https://launchpad.net/desktopcouch to use as a shared store for user data like contacts and bookmarks. It plays a similar role to SyncServices on Mac OS, but it's all open source and any two instances can sync with each other instead of requiring a proprietary server. I hear this is already shipping in the latest Ubuntu releases.\n\nIt doesn't look as though anyone's designed a schema for storing RSS subscriptions this way, but it would be pretty easy to define one. You then need a local agent running CouchDB (it can be stripped down to be pretty small), a client library for Cocoa apps, and an upstream CouchDB server to sync to.\n\nh2. REST-Logging\n\nThis protocol is similar to what I came up with for PubSub. It's a simple extension of \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer, but I haven't heard of it being used elsewhere. The idea is that you model an append-only log file as an HTTP resource. The items that are logged are 'events' describing changes in the data model, in this case the subscriptions and articles.\n\nThe sync algorithm looks like this:\n\n# Download all the data that's been added to the remote log file since your last sync. Remember the file's ETag.\n# Parse that data into a sequence of log entries, and process them in order. Each entry names a model object (feed or article) and an action (subscribe, unsubscribe, mark read, mark unread). Apply those changes to the local data store.\n# Query your local data store to find all the changes that have been made since your last sync. _Ignore_ the remote changes you just applied in the previous step, and also any earlier local changes that duplicate a remote change (like marking the same article as read.)\n# Generate a series of log entries for those changes and concatenate them into a data blob.\n# Upload that blob, appending it to the remote log file. Remember the resulting ETag. In case of a conflict (someone else has changed the remote file since step 1), toss out the blob and return to step 1.\n\nYou can think of the log file as a queue or message stream that's being collaboratively read and written by all of the clients. This sounds like something you'd need a fancy web-app to manage, but it turns out that all it takes is a typical HTTP 1.1 server and a trivial server-side script.\n\nThe download is a conditional GET, as used for fetching feeds themselves. The difference is that you use a \"Range:\" header to request _only the bytes past the last known EOF_. For example, if the last time you read the log it was 123456 bytes long, you add the header \"Range: 123456-\" to the request. This ensures that you only get back the new bytes that were added to the end. (And since this is a conditional GET, if the file hasn't changed at all you just get back an empty 304 response.)\n\nThat's all you need to do to track changes. Since the file is append-only, the only bytes you need to read are the ones added to the end. This request efficiently sends you just those bytes.\n\nWhat's cool is that this require _no server-side software_. If the log is a static file, any regular HTTP server like Apache will automatically handle GET requests for it, even byte-range ones. (Ranges are already used by browsers to resume interrupted downloads.) And it sends the response at high speed, since the server's just streaming from a file, without multiple back-and-forth requests and without expensive database queries.\n\nHow about writing? Ideally you'd use the same approach, with a byte-range PUT that specifies that the request body should go at the end of the file. Unfortunately most servers don't support this for static files, even though it's basically just HTTP 1.1. But it's really easy to implement. Any PHP crufter should be able to whip up a one-page script that simply responds to a POST by reading the request body and appending it to a local file (while doing the necessary ETag and range verification.) The great thing is that this script doesn't have to know anything at all about RSS or subscriptions or unread counts; it's completely generic. You can upgrade the data model without having to touch the script, and you could use the same script to sync anything, not just RSS.\n\n(Yes, there is a semi-obvious drawback to this protocol: the file grows without limit. Surprisingly, this is not a problem most of the time, since clients only upload or download new data; the only real limit is the maximum file size or disk quota allowed by the server. But it does present a problem for a new client, whose first-time sync would download the entire file. This can be worked around by having new clients ignore very old data (only download the latest 10MB, say) or by periodically writing a compact subscription list to a separate URL.)"
  post_title: "Re: Idea for alternative RSS syncing system"
  post_excerpt: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "392-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2010-02-09 09:58:10"
  post_modified_gmt: "2010-02-09 17:58:10"
  post_content_filtered: ""
  post_parent: 392
  guid: "http://jens.mooseyard.com/2010/02/392-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 397
  post_author: 2
  post_date: "2010-02-09 09:58:40"
  post_date_gmt: "2010-02-09 17:58:40"
  post_content: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader as an intermediary, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)\n\nh2. CouchDB\n\n\"CouchDB\":http://couchdb.apache.org is an awesome web-centric database engine. It doesn't use SQL; instead, it's a glorified key-value store whose values are arbitrary JSON objects, and which uses map-reduce for efficient querying. The basic API is pure REST, though glue libraries for many languages exist.\n\nCouchDB natively supports syncing data through distributed groups of servers. It's sort of like the way distributed version-control systems like Git or Mercurial work: multiple CouchDB instances each store a replica of the same data set, but can \"pull\" changes from each other over HTTP to stay in sync.\n\nCouchDB is pretty lightweight and is already being used on the desktop by client apps: GNOME has been \"integrating it into the Linux desktop\":https://launchpad.net/desktopcouch to use as a shared store for user data like contacts and bookmarks. It plays a similar role to SyncServices on Mac OS, but it's all open source and any two instances can sync with each other instead of requiring a proprietary server. I hear this is already shipping in the latest Ubuntu releases.\n\nIt doesn't look as though anyone's designed a schema for storing RSS subscriptions this way, but it would be pretty easy to define one. You then need a local agent running CouchDB (it can be stripped down to be pretty small), a client library for Cocoa apps, and an upstream CouchDB server to sync to.\n\nh2. REST-Logging\n\nThis protocol is similar to what I came up with for PubSub. It's a simple extension of \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer, but I haven't heard of it being used elsewhere. The idea is that you model an append-only log file as an HTTP resource. The items that are logged are 'events' describing changes in the data model, in this case the subscriptions and articles.\n\nThe sync algorithm looks like this:\n\n# Download all the data that's been added to the remote log file since your last sync. Remember the file's ETag.\n# Parse that data into a sequence of log entries, and process them in order. Each entry names a model object (feed or article) and an action (subscribe, unsubscribe, mark read, mark unread). Apply those changes to the local data store.\n# Query your local data store to find all the changes that have been made since your last sync. _Ignore_ the remote changes you just applied in the previous step, and also any earlier local changes that duplicate a remote change (like marking the same article as read.)\n# Generate a series of log entries for those changes and concatenate them into a data blob.\n# Upload that blob, appending it to the remote log file. Remember the resulting ETag. In case of a conflict (someone else has changed the remote file since step 1), toss out the blob and return to step 1.\n\nYou can think of the log file as a queue or message stream that's being collaboratively read and written by all of the clients. This sounds like something you'd need a fancy web-app to manage, but it turns out that all it takes is a typical HTTP 1.1 server and a trivial server-side script.\n\nThe download is a conditional GET, as used for fetching feeds themselves. The difference is that you use a \"Range:\" header to request _only the bytes past the last known EOF_. For example, if the last time you read the log it was 123456 bytes long, you add the header \"Range: 123456-\" to the request. This ensures that you only get back the new bytes that were added to the end. (And since this is a conditional GET, if the file hasn't changed at all you just get back an empty 304 response.)\n\nThat's all you need to do to track changes. Since the file is append-only, the only bytes you need to read are the ones added to the end. This request efficiently sends you just those bytes.\n\nWhat's cool is that this require _no server-side software_. If the log is a static file, any regular HTTP server like Apache will automatically handle GET requests for it, even byte-range ones. (Ranges are already used by browsers to resume interrupted downloads.) And it sends the response at high speed, since the server's just streaming from a file, without multiple back-and-forth requests and without expensive database queries.\n\nHow about writing? Ideally you'd use the same approach, with a byte-range PUT that specifies that the request body should go at the end of the file. Unfortunately most servers don't support this for static files, even though it's basically just HTTP 1.1. But it's really easy to implement. Any PHP crufter should be able to whip up a one-page script that simply responds to a POST by reading the request body and appending it to a local file (while doing the necessary ETag and range verification.) The great thing is that this script doesn't have to know anything at all about RSS or subscriptions or unread counts; it's completely generic. You can upgrade the data model without having to touch the script, and you could use the same script to sync anything, not just RSS.\n\n(Yes, there is a semi-obvious drawback to this protocol: the file grows without limit. Surprisingly, this is not a problem most of the time, since clients only upload or download new data; the only real limit is the maximum file size or disk quota allowed by the server. But it does present a problem for a new client, whose first-time sync would download the entire file. This can be worked around by having new clients ignore very old data (only download the latest 10MB, say) or by periodically writing a compact subscription list to a separate URL.)"
  post_title: "Re: Idea for alternative RSS syncing system"
  post_excerpt: "Brent \"NetNewsWire\" Simmons raises the idea of \"an open protocol (and open source server) for syncing RSS/Atom subscriptions\":http://inessential.com/2010/02/08/idea_for_alternative_rss_syncing_system, that is, a way of keeping multiple local newsreader apps (like on a Mac and an iPhone) in sync with each other, so that they share the same set of subscribed feeds, and remember which articles have already been read. You can think of it as \"IMAP for RSS\".\n\nNetNewsWire already does this using Google Reader, and Apple's PubSub framework (which is what Safari and Mail use) shares the read/unread state using MobileMe. But it would be nice to have an open protocol.\n\nI have some experience with this, having implemented the sync system used by PubSub. It's an interesting problem -- you might think I would have just used Apple's SyncServices, and it's true that it would have worked great for the subscription list, but it doesn't scale well to huge numbers of rapidly-changing \"read/unread\" flags.\n\nI have two suggestions (which I would have made on Brent's blog, except he doesn't allow comments anymore.)"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "392-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2010-02-09 09:58:40"
  post_modified_gmt: "2010-02-09 17:58:40"
  post_content_filtered: ""
  post_parent: 392
  guid: "http://jens.mooseyard.com/2010/02/392-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 398
  post_author: 2
  post_date: "2010-05-01 21:26:12"
  post_date_gmt: "2010-05-02 04:26:12"
  post_content: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one, then change my mind and decide I'd rather use the other. Unfortunately, changing over is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it.\n\nSo here it is: \"*py2.rb*\":http://bitbucket.org/snej/py2rb/src/tip/py2.rb. Use it wisely. In particular, pay attention to the caveat found in the file's header comments:\n\nbq. This script just does the obvious, easy transformations, giving you more time to work on the harder ones :) It is NOT a real parser, just a bunch of kludgy regex operations, so it can't do anything fancy. It may get some things wrong, and won't even attempt some other things that it's very likely to get wrong. The output will definitely have to be hand edited by someone familiar with both languages, before it can be expected to compile as Ruby, much less run correctly. The goal is simply to require _less_ hand editing, and less mechanical replacing, than you would have had to do without this script.\n\nIt's in the public domain. \"Do what thou wilt\" shall be the whole of the law.\n\n*Note:* Please don't comment with Python advocacy or, worse, anti-Ruby flames. That's not the point. I like Python fine; I just prefer to remain promiscuous. And I think it's ultimately in everyone's interest for ideas to be able to flow from one form of expression to another."
  post_title: "py2rb: A Python-to-Ruby Porting Assistant"
  post_excerpt: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one and decide I'd rather use the other. Unfortunately, converting code is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "py2rb-a-python-to-ruby-porting-assistant"
  to_ping: ""
  pinged: ""
  post_modified: "2010-05-01 21:30:16"
  post_modified_gmt: "2010-05-02 04:30:16"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=398"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 399
  post_author: 2
  post_date: "2010-05-01 21:26:12"
  post_date_gmt: "2010-05-02 04:26:12"
  post_content: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one and decide I'd rather use the other. Unfortunately, converting code is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it.\n\nSo here it is: \"*py2.rb*\":http://bitbucket.org/snej/py2rb/src/tip/py2.rb. Use it wisely. In particular, pay attention to the caveat found in the file's header comments:\n\nbq. This script just does the obvious, easy transformations, giving you more time to work on the harder ones :) It is NOT a real parser, just a bunch of kludgy regex operations, so it can't do anything fancy. It may get some things wrong, and won't even attempt some other things that it's very likely to get wrong. The output will definitely have to be hand edited by someone familiar with both languages, before it can be expected to compile as Ruby, much less run correctly. The goal is simply to require _less_ hand editing, and less mechanical replacing, than you would have had to do without this script.\n\nIt's in the public domain. \"Do what thou wilt\" shall be the whole of the law."
  post_title: "py2rb: A Python-to-Ruby Porting Assistant"
  post_excerpt: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one and decide I'd rather use the other. Unfortunately, converting code is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "398-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2010-05-01 21:26:12"
  post_modified_gmt: "2010-05-02 04:26:12"
  post_content_filtered: ""
  post_parent: 398
  guid: "http://jens.mooseyard.com/2010/05/398-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 400
  post_author: 2
  post_date: "2010-05-01 21:26:13"
  post_date_gmt: "2010-05-02 04:26:13"
  post_content: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one and decide I'd rather use the other. Unfortunately, converting code is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it.\n\nSo here it is: \"*py2.rb*\":http://bitbucket.org/snej/py2rb/src/tip/py2.rb. Use it wisely. In particular, pay attention to the caveat found in the file's header comments:\n\nbq. This script just does the obvious, easy transformations, giving you more time to work on the harder ones :) It is NOT a real parser, just a bunch of kludgy regex operations, so it can't do anything fancy. It may get some things wrong, and won't even attempt some other things that it's very likely to get wrong. The output will definitely have to be hand edited by someone familiar with both languages, before it can be expected to compile as Ruby, much less run correctly. The goal is simply to require _less_ hand editing, and less mechanical replacing, than you would have had to do without this script.\n\nIt's in the public domain. \"Do what thou wilt\" shall be the whole of the law."
  post_title: "py2rb: A Python-to-Ruby Porting Assistant"
  post_excerpt: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one and decide I'd rather use the other. Unfortunately, converting code is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "398-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2010-05-01 21:26:13"
  post_modified_gmt: "2010-05-02 04:26:13"
  post_content_filtered: ""
  post_parent: 398
  guid: "http://jens.mooseyard.com/2010/05/398-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 401
  post_author: 2
  post_date: "2010-05-01 21:27:38"
  post_date_gmt: "2010-05-02 04:27:38"
  post_content: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one, then change my mind and decide I'd rather use the other. Unfortunately, changing over is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it.\n\nSo here it is: \"*py2.rb*\":http://bitbucket.org/snej/py2rb/src/tip/py2.rb. Use it wisely. In particular, pay attention to the caveat found in the file's header comments:\n\nbq. This script just does the obvious, easy transformations, giving you more time to work on the harder ones :) It is NOT a real parser, just a bunch of kludgy regex operations, so it can't do anything fancy. It may get some things wrong, and won't even attempt some other things that it's very likely to get wrong. The output will definitely have to be hand edited by someone familiar with both languages, before it can be expected to compile as Ruby, much less run correctly. The goal is simply to require _less_ hand editing, and less mechanical replacing, than you would have had to do without this script.\n\nIt's in the public domain. \"Do what thou wilt\" shall be the whole of the law."
  post_title: "py2rb: A Python-to-Ruby Porting Assistant"
  post_excerpt: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one and decide I'd rather use the other. Unfortunately, converting code is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "398-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2010-05-01 21:27:38"
  post_modified_gmt: "2010-05-02 04:27:38"
  post_content_filtered: ""
  post_parent: 398
  guid: "http://jens.mooseyard.com/2010/05/398-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 402
  post_author: 2
  post_date: "2010-05-01 21:27:40"
  post_date_gmt: "2010-05-02 04:27:40"
  post_content: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one, then change my mind and decide I'd rather use the other. Unfortunately, changing over is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it.\n\nSo here it is: \"*py2.rb*\":http://bitbucket.org/snej/py2rb/src/tip/py2.rb. Use it wisely. In particular, pay attention to the caveat found in the file's header comments:\n\nbq. This script just does the obvious, easy transformations, giving you more time to work on the harder ones :) It is NOT a real parser, just a bunch of kludgy regex operations, so it can't do anything fancy. It may get some things wrong, and won't even attempt some other things that it's very likely to get wrong. The output will definitely have to be hand edited by someone familiar with both languages, before it can be expected to compile as Ruby, much less run correctly. The goal is simply to require _less_ hand editing, and less mechanical replacing, than you would have had to do without this script.\n\nIt's in the public domain. \"Do what thou wilt\" shall be the whole of the law."
  post_title: "py2rb: A Python-to-Ruby Porting Assistant"
  post_excerpt: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one and decide I'd rather use the other. Unfortunately, converting code is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "398-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2010-05-01 21:27:40"
  post_modified_gmt: "2010-05-02 04:27:40"
  post_content_filtered: ""
  post_parent: 398
  guid: "http://jens.mooseyard.com/2010/05/398-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 403
  post_author: 2
  post_date: "2010-05-01 21:30:14"
  post_date_gmt: "2010-05-02 04:30:14"
  post_content: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one, then change my mind and decide I'd rather use the other. Unfortunately, changing over is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it.\n\nSo here it is: \"*py2.rb*\":http://bitbucket.org/snej/py2rb/src/tip/py2.rb. Use it wisely. In particular, pay attention to the caveat found in the file's header comments:\n\nbq. This script just does the obvious, easy transformations, giving you more time to work on the harder ones :) It is NOT a real parser, just a bunch of kludgy regex operations, so it can't do anything fancy. It may get some things wrong, and won't even attempt some other things that it's very likely to get wrong. The output will definitely have to be hand edited by someone familiar with both languages, before it can be expected to compile as Ruby, much less run correctly. The goal is simply to require _less_ hand editing, and less mechanical replacing, than you would have had to do without this script.\n\nIt's in the public domain. \"Do what thou wilt\" shall be the whole of the law.\n\n*Note:* Please don't comment with Python advocacy or, worse, anti-Ruby flames. That's not the point. I like Python fine; I just prefer to remain promiscuous. And I think it's ultimately in everyone's interest for ideas to be able to flow from one form of expression to another."
  post_title: "py2rb: A Python-to-Ruby Porting Assistant"
  post_excerpt: "I've never figured out whether I prefer Python or Ruby, so I've written things in both languages. Sometimes I start in one and decide I'd rather use the other. Unfortunately, converting code is painful, even though both have fairly similar syntax. For instance, converting to Ruby means inserting zillions of \"end\" statements!\n\nHaving a need to do this recently, I lazily looked around for a script that would do the grunt-work of Python-to-Ruby translation. I couldn't find one, so I ended up writing one myself. And I've uploaded it for the benefit of others who might have the same need, and who might even improve it."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "398-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2010-05-01 21:30:14"
  post_modified_gmt: "2010-05-02 04:30:14"
  post_content_filtered: ""
  post_parent: 398
  guid: "http://jens.mooseyard.com/2010/05/398-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 404
  post_author: 2
  post_date: "2008-04-26 15:04:54"
  post_date_gmt: "2008-04-26 22:04:54"
  post_content: "<i>Continuing from \"the previous Cloudy post\":http://mooseyard.com/Jens/2008/04/cloudy-networking/ ... </i>\n\n!http://mooseyard.com/Jed/Cloudy/Mars%204.jpg!\n\nThe _first_ time you connect to someone, how do you establish that digital identifier you're communicating with is the human being you think it is? This is surprisingly difficult to do, because it's prone to what cryptographers call the \"man-in-the-middle attack\".\n\n(Those of you already wearing tinfoil hats can skip past the general explanation, down to \"What Cloudy Does\".)\n\nh2. 1. A Quick Overview Of Verification Attacks.\n\nFirst, consider the most obvious attack: simple spoofing.\n\nh3. Spoofing.\n\nLet's suppose there's an instant-messaging UI, and while working at home you receive a message from someone with an unknown key, whose nickname is \"AliceLiddell\", which happens to be the name of a co-worker.\n\nbq. \"AliceLiddell\": yo, this is alice\nYou: hi alice, what's up?\n_You add this identity to your friends-list._\nAlice: i need the admin password to the web server to fix a template\nYou: oh ok, it's wend4743kt\nAlice: kthxbye\n\n\nFifteen minutes later your company's website is pwned by the hacker who posed as Alice. All he had to do was create a new identity with her name as the nickname, and pretend to be her.\n\nHow do we get around this? You might think that asking questions before accepting someone's claimed identity would help, and it does help with spoofing, but there are nastier attacks.\n\nh3. Man-In-The-Middle\n\nbq. \"AliceLiddell\": yo, this is alice\nYou: You haven't contacted me before ... how do I know you?\n\"AliceLiddell\": i'm down the hall next door to brad. i need to ask you a question but you're not in the office today.\nYou: yeah, i'm working from home. sorry to be paranoid, but what's the poster on your wall say?\n\"AliceLiddell\": it used to say \"hang in there baby\" but i took it down when lolcats started getting too popular =)\n_You add this identity to your friends-list._\nYou: cool ... hi alice, what's up?\n...\n\nHaving established that this is really Alice, you go on to give her the password ... and fifteen minutes later your company's website gets pwned anyway. What went wrong? Well, it really _was_ Alice you were talking with; but the hacker was able to listen in and read the password. Wasn't the industrial-strength 2048-bit RSA encryption supposed to prevent this?\n\nThe problem is that you and Alice were _talking_ with each other; but you weren't directly _connected_ to each other. Instead each of you was connected to the hacker, who was relaying your messages back and forth. In this scenario what probably happened was that Alice tried to look you up by your name, found the hacker's fake account instead, and the hacker's computer then quickly created an identity with the same nickname as Alice, connected to the real you using that identity, and started forwarding your messages to each other while recording them itself.\n\nWhat's even worse: That identity you added to your friend-list as Alice? It's really the hacker's identity. From now on the hacker can talk directly to you and you'll probably assume it's Alice.\n\nh3. How Do We Solve This?\n\nThe man-in-the-middle attack is resistant to nearly any kind of _in-band_ verification. You can ask Alice any personal questions you want, but it won't reveal that you're not connected directly to Alice. You can ask Alice to type in her public key, but the hacker can edit her reply and substitute the key he's connected to you by.\n\nAbout the only practical way to solve this, unfortunately, is to use an _out-of-band_ channel. You need to talk with the real Alice and compare notes, before you can trust that her digital identity belongs to her. All you have to do, really, is get her _real_ public key and compare it to the key you're communicating with. (And she has to do likewise, of course.)\n\nThe canonical way to do this is to meet Alice in person and swap public keys. (PGP users call this a \"key-signing ceremony\".) Or you and Alice can read your keys to each other over the phone (or Skype, or an iChat video conference.) Sending the keys over IM is somewhat less reliable, but enough so for many purposes, since forging centralized IMs is a fairly involved task.\n\nOf course, we don't want to read 512 hexadecimal digits to each other! One optimization is to compare secure hashes of the keys (as PGP does), but that's still 40 digits. And those \"B\"s and \"D\"s are so easy to mix up over the phone.\n\nh2. 2. What Cloudy Does.\n\n<div style=\"text-align:center;\"><img src=\"http://mooseyard.com/Jens/wp-content/uploads/2008/04//CloudyAlert.png\" alt=\"CloudyAlert.png\" border=\"0\" width=\"500\" height=\"306\" /></div>\n\nCloudy's verification scheme is blatantly stolen from the one used in Bryan Ford _et al_'s \"Unmanaged Internet Architecture\":http://pdos.csail.mit.edu/papers/uia:osdi06/#SECTION00021000000000000000. Instead of making you read a number as a string of digits, Cloudy converts it into a three-word phrase by mapping consecutive chunks of bits into words in an English dictionary, moreover a dictionary that's been \"specially constructed\":http://tothink.com/mnemonic/wordlist.html of words that are easy to recognize and hard to mix up.\n\nAnd instead of making you listen to the words and type them in, Cloudy (like UIA) presents a short list of phrases with radio buttons, for you to pick from. One of them is the one that will be correct if the connection is genuine, the others are chosen at random, and there's a catch-all \"None of the above\" at the end. If the user didn't select the expected phrase, something's wrong.\n\n<div style=\"text-align:center;\"><img src=\"http://mooseyard.com/Jens/wp-content/uploads/2008/04//CloudyVerification.png\" alt=\"CloudyVerification.png\" border=\"0\" width=\"495\" height=\"364\" /></div>\n\n(An aside: the phrase only encodes 32 bits, which is far less than even the SHA-1 hash. Just hashing the key down to 32 bits would not be secure enough; instead Cloudy creates a one-time 32-bit key by combining the public key with a randomly-chosen integer that's sent to the other peer at the time of verification.)\n\nFord points out another benefit of this interface: \"its multiple-choice design prevents users from just clicking 'OK' without actually comparing the keys\", which defeats the user's damnable tendency to just \"dismiss all security-related alerts\":http://www.macworld.com/article/132910/2008/04/pubsubagent.html.\n\nOnce this is done, and the user chose the right verification phrase, Cloudy adds the other person's public key/identity to your \"contact list\" in its persistent storage. You can then decide to associate that key with an entry in your Address Book. Cloudy also mints a \"relationship\" certificate attesting that you have verified the other person's identity; you can choose to annotate the relationship with \"XFN\":http://gmpg.org/xfn/11 tags like \"friend\" or \"co-worker\". These certs can be passed to other friends to transitively extend trust.\n\nHow well does this user interface work? Cloudy hasn't seen much real-world use yet, but I've gone through the initial setup with a half-dozen people, and the verification (once I debugged it!) is quite easy to follow and takes only ten seconds or so.\n\nh2. 3. Is This Too Paranoid?\n\nOne of the unpleasant side effects of learning too much about computer security is that you start to become paranoid. You \"swallow the red pill\":http://www.arrod.co.uk/essays/matrix.php of the Internet and discover how much we take for granted, how much trust we implicitly place in things that are not trustworthy: domain names, centralized databases, passwords, emails. In severe cases, you start to self-identify as a cypherpunk and refuse to connect to any server through fewer than three anonymizing proxies. It's a bit like \"Medical Student Syndrome\":http://en.wikipedia.org/wiki/Medical_students_disease.\n\nOn the other hand, I think a lot of this paranoia is justified. I remember the old days, when \"spam\" was just a Monty Python sketch and you could trust the \"From:\" line of an email. Nowadays most of the emails we get have forged senders, and even a message that _sounds_ like it came from a friend might have been sent by \"some shady social-networking site he foolishly uploaded his address book to\":http://www.djchuang.com/2008/blubet-sent-you-a-special-gift-too/. Not too many people worry about domain names yet, but DNS is \"not hard to mess with\":http://en.wikipedia.org/wiki/DNS_cache_poisoning, either by \"hackers\":http://www.pcworld.com/article/id,140465-pg,1/article.html or by \"profit-motivated ISPs\":http://blog.wired.com/27bstroke6/2008/04/isps-error-page.html.\n\nEventually, anything that can be subverted, will. And since peer-to-peer software can't use the standard brute-force obstacles (centralized authority, locked-down servers) to delay attacks, it has to rely on _actually being secure_. And that means public keys, encryption, webs of trust. As many have pointed out, if you make security an optional add-on to a product, hardly anyone will use it. (How many people you know sign or encrypt their email?) It needs to be built in by default. And the more our privacy is invaded by advertisers, ISPs, search engines, phishers, monopolistic content owners and the like, the more that \"drives the adoption of actually-secure software\":http://www.shirky.com/writings/riaa_encryption.html by end-users.\n\nHaving to go out-of-band and swap three-word verification codes with your buddies is an inconvenience. But you only have to do it once with any particular person; after that, Cloudy remembers their key. And I will probably, in the future, put in some form of transitive trust: if I haven't verified you, but I verified Jean-Claude and he's verified you [and signed a cert to that effect] then I'll decide to trust you too.\n\n*Next: Cloudy Gossip.*"
  post_title: "Cloudy Verification"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "267-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-26 15:04:54"
  post_modified_gmt: "2008-04-26 22:04:54"
  post_content_filtered: ""
  post_parent: 267
  guid: "http://jens.mooseyard.com/2008/04/267-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 405
  post_author: 2
  post_date: "2010-05-29 12:24:31"
  post_date_gmt: "2010-05-29 19:24:31"
  post_content: "<i>Continuing from \"the previous Cloudy post\":http://mooseyard.com/Jens/2008/04/cloudy-networking/ ... </i>\n\n!http://mooseyard.com/Jed/Cloudy/Mars%204.jpg!\n\nThe _first_ time you connect to someone, how do you establish that digital identifier you're communicating with is the human being you think it is? This is surprisingly difficult to do, because it's prone to what cryptographers call the \"man-in-the-middle attack\".\n\n(Those of you already wearing tinfoil hats can skip past the general explanation, down to \"What Cloudy Does\".)\n\nh2. 1. A Quick Overview Of Verification Attacks.\n\nFirst, consider the most obvious attack: simple spoofing.\n\nh3. Spoofing.\n\nLet's suppose there's an instant-messaging UI, and while working at home you receive a message from someone with an unknown key, whose nickname is \"AliceLiddell\", which happens to be the name of a co-worker.\n\nbq. \"AliceLiddell\": yo, this is alice\nYou: hi alice, what's up?\n_You add this identity to your friends-list._\nAlice: i need the admin password to the web server to fix a template\nYou: oh ok, it's wend4743kt\nAlice: kthxbye\n\n\nFifteen minutes later your company's website is pwned by the hacker who posed as Alice. All he had to do was create a new identity with her name as the nickname, and pretend to be her.\n\nHow do we get around this? You might think that asking questions before accepting someone's claimed identity would help, and it does help with spoofing, but there are nastier attacks.\n\nh3. Man-In-The-Middle\n\nbq. \"AliceLiddell\": yo, this is alice\nYou: You haven't contacted me before ... how do I know you?\n\"AliceLiddell\": i'm down the hall next door to brad. i need to ask you a question but you're not in the office today.\nYou: yeah, i'm working from home. sorry to be paranoid, but what's the poster on your wall say?\n\"AliceLiddell\": it used to say \"hang in there baby\" but i took it down when lolcats started getting too popular =)\n_You add this identity to your friends-list._\nYou: cool ... hi alice, what's up?\n...\n\nHaving established that this is really Alice, you go on to give her the password ... and fifteen minutes later your company's website gets pwned anyway. What went wrong? Well, it really _was_ Alice you were talking with; but the hacker was able to listen in and read the password. Wasn't the industrial-strength 2048-bit RSA encryption supposed to prevent this?\n\nThe problem is that you and Alice were _talking_ with each other; but you weren't directly _connected_ to each other. Instead each of you was connected to the hacker, who was relaying your messages back and forth. In this scenario what probably happened was that Alice tried to look you up by your name, found the hacker's fake account instead, and the hacker's computer then quickly created an identity with the same nickname as Alice, connected to the real you using that identity, and started forwarding your messages to each other while recording them itself.\n\nWhat's even worse: That identity you added to your friend-list as Alice? It's really the hacker's identity. From now on the hacker can talk directly to you and you'll probably assume it's Alice.\n\nh3. How Do We Solve This?\n\nThe man-in-the-middle attack is resistant to nearly any kind of _in-band_ verification. You can ask Alice any personal questions you want, but it won't reveal that you're not connected directly to Alice. You can ask Alice to type in her public key, but the hacker can edit her reply and substitute the key he's connected to you by.\n\nAbout the only practical way to solve this, unfortunately, is to use an _out-of-band_ channel. You need to talk with the real Alice and compare notes, before you can trust that her digital identity belongs to her. All you have to do, really, is get her _real_ public key and compare it to the key you're communicating with. (And she has to do likewise, of course.)\n\nThe canonical way to do this is to meet Alice in person and swap public keys. (PGP users call this a \"key-signing ceremony\".) Or you and Alice can read your keys to each other over the phone (or Skype, or an iChat video conference.) Sending the keys over IM is somewhat less reliable, but enough so for many purposes, since forging centralized IMs is a fairly involved task.\n\nOf course, we don't want to read 512 hexadecimal digits to each other! One optimization is to compare secure hashes of the keys (as PGP does), but that's still 40 digits. And those \"B\"s and \"D\"s are so easy to mix up over the phone.\n\nh2. 2. What Cloudy Does.\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2008/04//CloudyAlert.png\" alt=\"CloudyAlert.png\" border=\"0\" width=\"500\" height=\"306\" /></div>\n\nCloudy's verification scheme is blatantly stolen from the one used in Bryan Ford _et al_'s \"Unmanaged Internet Architecture\":http://pdos.csail.mit.edu/papers/uia:osdi06/#SECTION00021000000000000000. Instead of making you read a number as a string of digits, Cloudy converts it into a three-word phrase by mapping consecutive chunks of bits into words in an English dictionary, moreover a dictionary that's been \"specially constructed\":http://tothink.com/mnemonic/wordlist.html of words that are easy to recognize and hard to mix up.\n\nAnd instead of making you listen to the words and type them in, Cloudy (like UIA) presents a short list of phrases with radio buttons, for you to pick from. One of them is the one that will be correct if the connection is genuine, the others are chosen at random, and there's a catch-all \"None of the above\" at the end. If the user didn't select the expected phrase, something's wrong.\n\n<div style=\"text-align:center;\"><img src=\"http://jens.mooseyard.com/wp-content/uploads/2008/04//CloudyVerification.png\" alt=\"CloudyVerification.png\" border=\"0\" width=\"495\" height=\"364\" /></div>\n\n(An aside: the phrase only encodes 32 bits, which is far less than even the SHA-1 hash. Just hashing the key down to 32 bits would not be secure enough; instead Cloudy creates a one-time 32-bit key by combining the public key with a randomly-chosen integer that's sent to the other peer at the time of verification.)\n\nFord points out another benefit of this interface: \"its multiple-choice design prevents users from just clicking 'OK' without actually comparing the keys\", which defeats the user's damnable tendency to just \"dismiss all security-related alerts\":http://www.macworld.com/article/132910/2008/04/pubsubagent.html.\n\nOnce this is done, and the user chose the right verification phrase, Cloudy adds the other person's public key/identity to your \"contact list\" in its persistent storage. You can then decide to associate that key with an entry in your Address Book. Cloudy also mints a \"relationship\" certificate attesting that you have verified the other person's identity; you can choose to annotate the relationship with \"XFN\":http://gmpg.org/xfn/11 tags like \"friend\" or \"co-worker\". These certs can be passed to other friends to transitively extend trust.\n\nHow well does this user interface work? Cloudy hasn't seen much real-world use yet, but I've gone through the initial setup with a half-dozen people, and the verification (once I debugged it!) is quite easy to follow and takes only ten seconds or so.\n\nh2. 3. Is This Too Paranoid?\n\nOne of the unpleasant side effects of learning too much about computer security is that you start to become paranoid. You \"swallow the red pill\":http://www.arrod.co.uk/essays/matrix.php of the Internet and discover how much we take for granted, how much trust we implicitly place in things that are not trustworthy: domain names, centralized databases, passwords, emails. In severe cases, you start to self-identify as a cypherpunk and refuse to connect to any server through fewer than three anonymizing proxies. It's a bit like \"Medical Student Syndrome\":http://en.wikipedia.org/wiki/Medical_students_disease.\n\nOn the other hand, I think a lot of this paranoia is justified. I remember the old days, when \"spam\" was just a Monty Python sketch and you could trust the \"From:\" line of an email. Nowadays most of the emails we get have forged senders, and even a message that _sounds_ like it came from a friend might have been sent by \"some shady social-networking site he foolishly uploaded his address book to\":http://www.djchuang.com/2008/blubet-sent-you-a-special-gift-too/. Not too many people worry about domain names yet, but DNS is \"not hard to mess with\":http://en.wikipedia.org/wiki/DNS_cache_poisoning, either by \"hackers\":http://www.pcworld.com/article/id,140465-pg,1/article.html or by \"profit-motivated ISPs\":http://blog.wired.com/27bstroke6/2008/04/isps-error-page.html.\n\nEventually, anything that can be subverted, will. And since peer-to-peer software can't use the standard brute-force obstacles (centralized authority, locked-down servers) to delay attacks, it has to rely on _actually being secure_. And that means public keys, encryption, webs of trust. As many have pointed out, if you make security an optional add-on to a product, hardly anyone will use it. (How many people you know sign or encrypt their email?) It needs to be built in by default. And the more our privacy is invaded by advertisers, ISPs, search engines, phishers, monopolistic content owners and the like, the more that \"drives the adoption of actually-secure software\":http://www.shirky.com/writings/riaa_encryption.html by end-users.\n\nHaving to go out-of-band and swap three-word verification codes with your buddies is an inconvenience. But you only have to do it once with any particular person; after that, Cloudy remembers their key. And I will probably, in the future, put in some form of transitive trust: if I haven't verified you, but I verified Jean-Claude and he's verified you [and signed a cert to that effect] then I'll decide to trust you too.\n\n*Next: Cloudy Gossip.*"
  post_title: "Cloudy Verification"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "267-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2010-05-29 12:24:31"
  post_modified_gmt: "2010-05-29 19:24:31"
  post_content_filtered: ""
  post_parent: 267
  guid: "http://jens.mooseyard.com/2010/05/267-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 406
  post_author: 2
  post_date: "2010-07-07 22:46:32"
  post_date_gmt: "2010-07-08 05:46:32"
  post_content: "*Twitter:* Charming in brief doses, he tells you little one-liner jokes, then wanders off after two sentences to go talk at somebody else. He absolutely will not shut up for an instant, and namedrops shamelessly about his famous friends. When he's outworn his welcome he passes out drunk on the floor and has to be dragged home.\n\n*MySpace:* Who? Oh, right, this anorexic high-school girl who threw herself at you at a party once in 2005. She kept bragging about all the bands she knew (and which you could overhear on the tinny earbuds she wore.) After one too many JÃ¤germeister Jell-O shots she barfed Day-Glo all over your shoes. Last you've heard, she's found some 80-year-old media mogul to be her sugar daddy.\n\n*Facebook:* You vaguely remember him from high school. He was a nonentity then and he's equally uninteresting now, but he's somehow infiltrated your circle of friends and shows up at every social event you go to, telling boring anecdotes about last night's game and what he bought at Wal*Mart. Worse, it seems he's joined some cult and wants you to join too so he can go up a level.\n\n*Tumblr:* She's got impeccable taste, a lovely apartment and fascinating stories, but after a while you realize she only talks about what _other_ people have done; she doesn't have an original thought in her head. She won't carry on a conversation, either, so the only way to get her to pay attention to you is to repeat back something she's already told you.\n\n*Soup.io:* Similar to Tumblr, but with a cute Austrian accent. She's more conversational, but on the downside she sometimes insists on talking to you in German.\n\n*LiveJournal:* A mysterious Goth chick you were introduced to at a club. After you strike up a friendship with her, she starts telling you all her innermost secrets whenever you see her. This is terribly alluring at first, enough so that you can overlook her appallingly bad fanfic, but after a while you begin to realize how seriously disturbed she is. Around then she abruptly stops showing up, and you're never sure whether she killed herself or just moved to a more elite social circle. You never learn her real name.\n\n_[Update: I've changed two of them to male. I wanted to be consistent in the personification, but in retrospect that leaves me open to charges of sexism, which absolutely wasn't intended. They all have male counterparts, of course, whom I'd love to hear about if you want to write about them.]_\n"
  post_title: "Social Networks Personified"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "social-networks-personified"
  to_ping: ""
  pinged: ""
  post_modified: "2010-07-07 23:30:02"
  post_modified_gmt: "2010-07-08 06:30:02"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=406"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 407
  post_author: 2
  post_date: "2010-07-07 22:46:32"
  post_date_gmt: "2010-07-08 05:46:32"
  post_content: "*Twitter:* Charming in brief doses, she tells you little one-liner jokes, then wanders off after two sentences to go talk to somebody else. She absolutely will not shut up for an instant, and namedrops shamelessly about her famous friends. When she's outworn her welcome she passes out drunk on the floor and has to be dragged home.\n\n*Facebook:* You vaguely remember her from high school. She was a nonentity then and she's equally uninteresting now, but she's somehow infiltrated your circle of friends and shows up at every social event you go to, telling boring anecdotes about getting her nails done and what she bought at Wal*Mart. Worse, it seems she's joined some cult and wants you to join too so she can go up a level.\n\n*MySpace:* Who? Oh, right, this anorexic high-school girl who threw herself at you at a party once in 2005. She kept bragging about all the bands she knew (and which you could overhear on the tinny earbuds she wore.) After one too many JÃ¤germeister Jell-O shots she barfed Day-Glo all over your shoes. Last you've heard, she's found some 80-year-old media mogul to be her sugar daddy.\n\n*Tumblr:* She's got impeccable taste, a lovely apartment and fascinating stories, but after a while you realize she only talks about what _other_ people have done; she doesn't have an original thought in her head. She won't carry on a conversation, either, so the only way to get her to pay attention to you is to repeat back something she's already told you.\n\n*Soup.io:* Similar to Tumblr, but with a cute Austrian accent. She's more conversational, but on the downside she sometimes insists on talking to you in German.\n\n*LiveJournal:* A mysterious Goth chick you were introduced to at a club. After you strike up a friendship with her, she starts telling you all her innermost secrets whenever you see her. This is terribly alluring at first, enough so that you can overlook her appallingly bad fanfic, but after a while you begin to realize how seriously disturbed she is. Around then she abruptly stops showing up, and you're never sure whether she killed herself or just moved to a more elite social circle. You never learn her real name.\n\n_[I've personified them as women, simply because that's the way I swing; no sexism intended. They all have male counterparts, of course, whom I'd love to hear about if you want to write about them.]_\n"
  post_title: "Social Networks Personified"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "406-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2010-07-07 22:46:32"
  post_modified_gmt: "2010-07-08 05:46:32"
  post_content_filtered: ""
  post_parent: 406
  guid: "http://jens.mooseyard.com/2010/07/406-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 408
  post_author: 2
  post_date: "2010-07-07 22:46:33"
  post_date_gmt: "2010-07-08 05:46:33"
  post_content: "*Twitter:* Charming in brief doses, she tells you little one-liner jokes, then wanders off after two sentences to go talk to somebody else. She absolutely will not shut up for an instant, and namedrops shamelessly about her famous friends. When she's outworn her welcome she passes out drunk on the floor and has to be dragged home.\n\n*Facebook:* You vaguely remember her from high school. She was a nonentity then and she's equally uninteresting now, but she's somehow infiltrated your circle of friends and shows up at every social event you go to, telling boring anecdotes about getting her nails done and what she bought at Wal*Mart. Worse, it seems she's joined some cult and wants you to join too so she can go up a level.\n\n*MySpace:* Who? Oh, right, this anorexic high-school girl who threw herself at you at a party once in 2005. She kept bragging about all the bands she knew (and which you could overhear on the tinny earbuds she wore.) After one too many JÃ¤germeister Jell-O shots she barfed Day-Glo all over your shoes. Last you've heard, she's found some 80-year-old media mogul to be her sugar daddy.\n\n*Tumblr:* She's got impeccable taste, a lovely apartment and fascinating stories, but after a while you realize she only talks about what _other_ people have done; she doesn't have an original thought in her head. She won't carry on a conversation, either, so the only way to get her to pay attention to you is to repeat back something she's already told you.\n\n*Soup.io:* Similar to Tumblr, but with a cute Austrian accent. She's more conversational, but on the downside she sometimes insists on talking to you in German.\n\n*LiveJournal:* A mysterious Goth chick you were introduced to at a club. After you strike up a friendship with her, she starts telling you all her innermost secrets whenever you see her. This is terribly alluring at first, enough so that you can overlook her appallingly bad fanfic, but after a while you begin to realize how seriously disturbed she is. Around then she abruptly stops showing up, and you're never sure whether she killed herself or just moved to a more elite social circle. You never learn her real name.\n\n_[I've personified them as women, simply because that's the way I swing; no sexism intended. They all have male counterparts, of course, whom I'd love to hear about if you want to write about them.]_\n"
  post_title: "Social Networks Personified"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "406-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2010-07-07 22:46:33"
  post_modified_gmt: "2010-07-08 05:46:33"
  post_content_filtered: ""
  post_parent: 406
  guid: "http://jens.mooseyard.com/2010/07/406-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 409
  post_author: 2
  post_date: "2010-07-07 23:30:01"
  post_date_gmt: "2010-07-08 06:30:01"
  post_content: "*Twitter:* Charming in brief doses, he tells you little one-liner jokes, then wanders off after two sentences to go talk at somebody else. He absolutely will not shut up for an instant, and namedrops shamelessly about his famous friends. When he's outworn his welcome he passes out drunk on the floor and has to be dragged home.\n\n*MySpace:* Who? Oh, right, this anorexic high-school girl who threw herself at you at a party once in 2005. She kept bragging about all the bands she knew (and which you could overhear on the tinny earbuds she wore.) After one too many JÃ¤germeister Jell-O shots she barfed Day-Glo all over your shoes. Last you've heard, she's found some 80-year-old media mogul to be her sugar daddy.\n\n*Facebook:* You vaguely remember him from high school. He was a nonentity then and he's equally uninteresting now, but he's somehow infiltrated your circle of friends and shows up at every social event you go to, telling boring anecdotes about last night's game and what he bought at Wal*Mart. Worse, it seems he's joined some cult and wants you to join too so he can go up a level.\n\n*Tumblr:* She's got impeccable taste, a lovely apartment and fascinating stories, but after a while you realize she only talks about what _other_ people have done; she doesn't have an original thought in her head. She won't carry on a conversation, either, so the only way to get her to pay attention to you is to repeat back something she's already told you.\n\n*Soup.io:* Similar to Tumblr, but with a cute Austrian accent. She's more conversational, but on the downside she sometimes insists on talking to you in German.\n\n*LiveJournal:* A mysterious Goth chick you were introduced to at a club. After you strike up a friendship with her, she starts telling you all her innermost secrets whenever you see her. This is terribly alluring at first, enough so that you can overlook her appallingly bad fanfic, but after a while you begin to realize how seriously disturbed she is. Around then she abruptly stops showing up, and you're never sure whether she killed herself or just moved to a more elite social circle. You never learn her real name.\n\n_[Update: I've changed two of them to male. I wanted to be consistent in the personification, but in retrospect that leaves me open to charges of sexism, which absolutely wasn't intended. They all have male counterparts, of course, whom I'd love to hear about if you want to write about them.]_\n"
  post_title: "Social Networks Personified"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "406-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2010-07-07 23:30:01"
  post_modified_gmt: "2010-07-08 06:30:01"
  post_content_filtered: ""
  post_parent: 406
  guid: "http://jens.mooseyard.com/2010/07/406-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 416
  post_author: 2
  post_date: "2008-04-17 17:37:15"
  post_date_gmt: "2008-04-18 00:37:15"
  post_content: "Next I need to talk about networking; having an identity and minting certificates isn't very interesting until you can connect to someone else.\n\n<img src=\"http://mooseyard.com/Jed/Cloudy/Too%20Much%20Electricity.jpg\" width=600/>\n\nh2. Point-to-Point Communications.\n\nWhen one Cloudy peer wants to communicate with another one, it opens a TCP socket to its IP address â€”\n\n[Hang on, there are two issues I suddenly glossed over in that last phrase. First, how did this peer find out the others' IP address? These are just random computers, not servers, so they don't have their own domain names or even stable addresses. This is indeed a problem with any unstructured peer-to-peer network, but the solution involves things I won't get to until the next installment, in an unfortunately but necessary violation of layering.]\n\n[Oh, and issue #2 is that most home computers are now behind \"Network Address Translators\":http://en.wikipedia.org/wiki/Network_address_translation (usually some kind of WiFi base station or broadband router), which means they don't have their own real IP addresses and can't receive incoming connections. Fortunately, most NATs now \"support\":http://en.wikipedia.org/wiki/UPNP \"protocols\":http://en.wikipedia.org/wiki/NAT_Port_Mapping_Protocol that allow clients to open listening ports to the outside world, and doubly fortunately, Mac OS X 10.5 includes \"an API for making such connections\":http://developer.apple.com/documentation/Networking/Reference/DNSServiceDiscovery_CRef/dns_sd/CompositePage.html#//apple_ref/c/func/DNSServiceNATPortMappingCreate. Cloudy opens such a port whenever it finds itself behind a NAT.]\n\nâ€” and runs a protocol called BEEP over the socket.\n\nh3. BEEP.\n\n\"BEEP\":http://beepcore.org is a sort of generic application protocol that multiplexes a TCP socket into multiple virtual channels, each of which can send and receive binary messages. It's very handy for designing your own protocols, since it lets you focus on the high-level tasks of defining how your messages are encoded and when to send them and what to send in response.\n\nI'm using an open-source (LGPL) implementation of BEEP called \"Vortex\":http://vortex.aspl.es/. Its API is in C, but I've written a Foundation-level Objective-C wrapper around it. (I'll probably open-source that code sometime.)\n\nOne nice feature of BEEP and Vortex is that they handle SSL for you. The BEEP protocol lets the two peers negotiate what type of SSL they support, before switching over to it, almost transparently to the application code. Since the first thing that happens in SSL setup is exchanging certificates, each instance of Cloudy immediately learns the identity of the peer it's connecting to. (In normal HTTP-over-SSL, only the server has a certificate and the browser remains anonymous; but SSL supports bidirectional authentication and Cloudy uses it.) Unlike most client-server protocols, Cloudy has no need for a login: each peer has seen the others' public key, and the ability to use that public key proves that the other peer owns the private key, and hence that identity.\n\nSo now the two peers are connected, they've identified and authenticated each other, and their communication channel is encrypted. They can now open BEEP channels and send each other messages across them. The primary types of messages Cloudy sends are signed objects (certificates); I'll get into those later.\n\nh2. Local Area Discovery (Bonjour).\n\nAs you'd expect, Cloudy also uses \"Bonjour\":http://en.wikipedia.org/wiki/Bonjour_%28software%29. This is somewhat orthogonal to BEEP -- Bonjour's a _discovery_ protocol, so its main purpose is to let peers on the same LAN find out each others' names and addresses. But Bonjour does support a thing called a \"TXT Record\":http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt, which is a small chunk of arbitrary metadata that a service can associate with itself. For example, iChat stores your availability and status message in its Bonjour TXT record, which is how its Bonjour buddy list can show that information for everyone on your network.\n\nRemember the \"CallingCard\" I used as an example of a signed object in the last post? Well, that's what Cloudy puts in its TXT record. The CallingCard contains your availability and status, but what's really important is that it contains your public key, which is your identity.\n\nSo Bonjour solves, at least on a LAN, the discoverability problem I pointed out at the start of this post. At this point, if the peer you want to send messages to is on the same network, Cloudy can easily find it via Bonjour, open a BEEP socket, and authenticate over SSL.\n\nWhat's more, Cloudy's view of who's on the network is actually _trustworthy_. The CallingCard is _signed_ with your public key, proving that you created it. iChat's Bonjour IM has always been insecure in that there's no way to tell whether anyone else is who they say they are: all you know about someone is their name, which they can easily change to anything they want by editing their address book. In Cloudy, on the other hand, once you've communicated with someone once, your app remembers their public key, and it can identify in the future whether a peer appearing on the network is that person or not. (To make this clear in the UI, the name of anyone you haven't previously vouched for is shown â€œin quotesâ€.)\n\nâ€” Oops, I just skipped over a tricky problem again. The _first_ time you connect to someone, how do you establish that the digital identifier you're communicating with corresponds to the human being you think it is? This is surprisingly difficult to do, because it's vulnerable to what cryptographers call the \"man-in-the-middle attack\":http://en.wikipedia.org/wiki/Man_in_the_middle_attack. It's worth a post by itself...\n\n<b>Next: \"Verifying Identities\":http://mooseyard.com/Jens/2008/04/cloudy-verification. </b>"
  post_title: "Cloudy Networking"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "264-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2008-04-17 17:37:15"
  post_modified_gmt: "2008-04-18 00:37:15"
  post_content_filtered: ""
  post_parent: 264
  guid: "http://jens.mooseyard.com/2008/04/264-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 410
  post_author: 2
  post_date: "2011-01-09 13:01:42"
  post_date_gmt: "2011-01-09 21:01:42"
  post_content: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into. There were only eight buildings with working doors in the whole game, with all kinds of things to explore and enemies to stalk in each one; so if you could somehow get into the other hundred or so buildings, what would be inside them? Could you play them too?\n\nI know, I was pretty dumb back then. I didnâ€™t understand the way the world works.\n\nFinally someone told me about a hack to get into any building. It exploited a bug in the hit detection: you had to run at a corner and jump right at it. If you got the position and angle just right, youâ€™d slip through the join between the two walls and be inside. People were using this as a cheat to get into the higher levels early, but all I could think about was the â€œsecretâ€ buildings. By then I had already covered my bedroom walls with hand-drawn maps of what I thought their insides might be like. I booted up the game and ran straight for the Library â€” I knew it was full of maze-like miles of dimly-lit dusty stacks and cavernous reading rooms, through which I could pursue my quarry of mutant beasts.\n\nInstead I hit the corner and bounced off, of course. The instructions said to be patient, so I backed up and tried again. All the good skills took practice. I got into my best gamer trance state of endless repetition and fine-tuning of reflexes. Finally after an hour I made it: instead of the bounce I got a split second of mangled polygons warping across the screen, and then â€¦Â nothing. The inside of the building didnâ€™t exist, and neither did the insides of its walls, so it was as though there were nothing there. I could see the streets and buildings on the other side. But the buildingâ€™s floor didnâ€™t exist either, and there was no ground under it, just a yawning abyss of pure electric video blue that I fell into like a rock. I had about ten seconds to turn and look up: the universe was a void with nothing in it but a few square blocks of street-plan dotted with empty building-shaped holes. It receded into the distance, and then I reached the outer boundary of the world and snapped into the death screen.\n\nYes, I do have a point. The real world is like this too. The things we think are solid are fakes; thereâ€™s nothing inside them. The things we canâ€™t open up are hollow, infinitely-thin shells around nauseating blue.\n\nI know what youâ€™re about to do. Everyone does this when I explain things. â€œI refute it thus!â€ as you hit a wall with a rock. Youâ€™ve got a hammer in that backpack? Even better.\n\nYeah, that support pillar looks pretty solid right there were you decided to hit it. With realistic bits of fractured concrete inside it, right there. Or over there, yes. Donâ€™t you get it? You were _meant to_ break through there. Just like I was meant to go into those dozen buildings but _no others_. Youâ€™re playing the game the way you were meant to, and itâ€™s a very good game so the limitations are fewer, the glitches are harder to exploit.\n\nBut with the right skills, the right mind-set, I can find the places that werenâ€™t meant to open up and make them open up anyway. And now that Iâ€™ve learned, I canâ€™t un-learn it. Everything I do is wrong.\n\nI canâ€™t find my way back to the right doors. I donâ€™t want to live out here in the cold underneath a _fucking highway overpass_ with brain-damaged junkies. Present company excepted. I had a job and a place to live and friends. But I canâ€™t get back to them: theyâ€™re part of the painted-on scenery now. Theyâ€™re not real objects, theyâ€™re texture-maps. The street level doors open onto blue abysses. So do the windows. Iâ€™ve tried them all; then I gave up. I almost fell into them, any number of times, had to grab hold of texture that looked just like brick or paint or wood on one side and didnâ€™t exist on the other. Vertigo made me sick and I threw up into that upside-down sky and watched it fall out of sight and vanish.\n\nThe former friends just repeat the same list of canned lines in random order, like any good NPC. Mostly â€œYou look pretty bad, manâ€ and â€œYou really need to get some helpâ€. Itâ€™s pathetic.\n\nThe last time I tried to get inside, I ran into a corner. Yeah, youâ€™d think I would have tried that trick earlier, but _you_ try ramming into the corner of a building in â€œreal lifeâ€. Explain to your hindbrain about cheat codes when it sees a wedge of brick looming up. Even after psyching myself up Iâ€™d always swerve aside at the last second.\n\nBut I finally managed it. What do you think happened? I fucking knocked myself out on the bricks, thatâ€™s what. I came to a while later â€” this was in a back alley so no one had seen me. My face was covered in drying blood from this big gouge on my scalp, and Iâ€™d knocked this tooth out, but no serious head injury.\n\nSo I lay there a minute, feeling like shit, gathering up strength to move. Then I looked at how I was lying, and saw that my right arm went right into the wall and disappeared at the elbow. A clipping error. I could still feel my hand, but it wasnâ€™t touching anything. I sat up slowly, the arm came loose with no resistance, but it just â€¦ ended there, in a smooth flat cut at the elbow. And I pulled it toward me and looked at it and _there wasnâ€™t anything inside me!_ Just an oval hole into a blue void.\n\nI was too afraid to touch it with my fingers. Still am. I found a curl of rusty wire, unrolled it and stuck the end of it in. It just went straight into my arm without resistance, no matter how I wiggled it around inside. On the other side of that hole I didnâ€™t exist. I got all four feet of wire into there, then lost my grip on the other end and it fell all the way in and disappeared â€¦ I didnâ€™t feel it hit anything on the way down.\n\nOf course you donâ€™t believe me. Ha! No, whatever Iâ€™m full of, it isnâ€™t shit. Alright, Iâ€™ll take the bandage off the stump and show you. Itâ€™s not paint. Sure, try sticking your fingers in and wiggling them. Fun, huh? Not so fun, huh?\n\nYou know about phantom limbs? I can still feel my forearm and hand. They say itâ€™s because the brain centers that controlled them are still there, and want something to do, so they make up sensations. But like I said, I couldnâ€™t feel them touching anything, just touch the fingers together and to the palm, make a fist and feel that. â€¦Â Only now, just this morning, I can feel something else.\n\nIt feels like hard plastic. In my mindâ€™s eye itâ€™s shiny black. Its contours fit my grip perfectly. Itâ€™s got buttons on it, and a joystick. Iâ€™m going to try moving it now.\n\n<center>â€”</center>\n\nbq.  <i>This is a sequel to my story \"Ozone\":http://jens.mooseyard.com/2006/10/ozone/. I'd wanted to write one for years, but didn't have any inspiration about what happened next. Then last week the ideas in here came to me, and I realized that they fit neatly into that story-world. But the ending only came to me today, after I'd started writing the story down.\n\nbq. I got these ideas while watching my son explore \"glitches in the notoriously buggy game PokÃ©mon Blue\":http://www.youtube.com/watch?v=79rxaswPSSw. I would love to have him read this story, but I know it would give him nightmares for weeksâ€¦</i>\n"
  post_title: "Glitch City"
  post_excerpt: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "clipping"
  to_ping: ""
  pinged: ""
  post_modified: "2011-01-09 13:10:56"
  post_modified_gmt: "2011-01-09 21:10:56"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=410"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 411
  post_author: 2
  post_date: "2011-01-09 13:01:42"
  post_date_gmt: "2011-01-09 21:01:42"
  post_content: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into. There were only eight buildings with working doors in the whole game, with all kinds of things to explore and enemies to stalk in each one; so if you could somehow get into the other hundred or so buildings, what would be inside them? Could you play them too?\n\nI know, I was pretty dumb back then. I didnâ€™t understand the way the world works.\n\nFinally someone told me about a hack to get into any building. It exploited a bug in the hit detection: you had to run at a corner and jump right at it. If you got the position and angle just right, youâ€™d slip through the join between the two walls and be inside. People were using this as a cheat to get into the higher levels early, but all I could think about was the â€œsecretâ€ buildings. By then I had already covered my bedroom walls with hand-drawn maps of what I thought their insides might be like. I booted up the game and ran straight for the Library â€” I knew it was full of maze-like miles of dimly-lit dusty stacks and cavernous reading rooms, through which I could pursue my quarry of mutant beasts.\n\nInstead I hit the corner and bounced off, of course. The instructions said to be patient, so I backed up and tried again. All the good skills took practice. I got into my best gamer trance state of endless repetition and fine-tuning of reflexes. Finally after an hour I made it: instead of the bounce I got a split second of mangled polygons warping across the screen, and then â€¦Â nothing. The inside of the building didnâ€™t exist, and neither did the insides of its walls, so it was as though there were nothing there. I could see the streets and buildings on the other side. But the buildingâ€™s floor didnâ€™t exist either, and there was no ground under it, just a yawning abyss of pure electric video blue that I fell into like a rock. I had about ten seconds to turn and look up: the universe was a void with nothing in it but a few square blocks of street-plan dotted with empty building-shaped holes. It receded into the distance, and then I reached the outer boundary of the world and snapped into the death screen.\n\nYes, I do have a point. The real world is like this too. The things we think are solid are fakes; thereâ€™s nothing inside them. The things we canâ€™t open up are hollow, infinitely-thin shells around nauseating blue.\n\nI know what youâ€™re about to do. Everyone does this when I explain things. â€œI refute it thus!â€ as you hit a wall with a rock. Youâ€™ve got a hammer in that backpack? Even better.\n\nYeah, that support pillar looks pretty solid right there were you decided to hit it. With realistic bits of fractured concrete inside it, right there. Or over there, yes. Donâ€™t you get it? You were _meant to_ break through there. Just like I was meant to go into those dozen buildings but _no others_. Youâ€™re playing the game the way you were meant to, and itâ€™s a very good game so the limitations are fewer, the glitches are harder to exploit.\n\nBut with the right skills, the right mind-set, I can find the places that werenâ€™t meant to open up and make them open up anyway. And now that Iâ€™ve learned, I canâ€™t un-learn it. Everything I do is wrong.\n\nI canâ€™t find my way back to the right doors. I donâ€™t want to live out here in the cold underneath a _fucking highway overpass_ with brain-damaged junkies. Present company excepted. I had a job and a place to live and friends. But I canâ€™t get back to them: theyâ€™re part of the painted-on scenery now. Theyâ€™re not real objects, theyâ€™re texture-maps. The street level doors open onto blue abysses. So do the windows. Iâ€™ve tried them all; then I gave up. I almost fell into them, any number of times, had to grab hold of texture that looked just like brick or paint or wood on one side and didnâ€™t exist on the other. Vertigo made me sick and I threw up into that upside-down sky and watched it fall out of sight and vanish.\n\nThe former friends just repeat the same list of canned lines in random order, like any good NPC. Mostly â€œYou look pretty bad, manâ€ and â€œYou really need to get some helpâ€. Itâ€™s pathetic.\n\nThe last time I tried to get inside, I ran into a corner. Yeah, youâ€™d think I would have tried that trick earlier, but _you_ try ramming into the corner of a building in â€œreal lifeâ€. Explain to your hindbrain about cheat codes when it sees a wedge of brick looming up. Even after psyching myself up Iâ€™d always swerve aside at the last second.\n\nBut I finally managed it. What do you think happened? I fucking knocked myself out on the bricks, thatâ€™s what. I came to a while later â€” this was in a back alley so no one had seen me. My face was covered in drying blood from this big gouge on my scalp, and Iâ€™d knocked this tooth out, but no serious head injury.\n\nSo I lay there a minute, feeling like shit, gathering up strength to move. Then I looked at how I was lying, and saw that my right arm went right into the wall and disappeared at the elbow. A clipping error. I could still feel my hand, but it wasnâ€™t touching anything. I sat up slowly, the arm came loose with no resistance, but it just â€¦ ended there, in a smooth flat cut at the elbow. And I pulled it toward me and looked at it and _there wasnâ€™t anything inside me!_ Just an oval hole into a blue void.\n\nI was too afraid to touch it with my fingers. Still am. I found a curl of rusty wire, unrolled it and stuck the end of it in. It just went straight into my arm without resistance, no matter how I wiggled it around inside. On the other side of that hole I didnâ€™t exist. I got all four feet of wire into there, then lost my grip on the other end and it fell all the way in and disappeared â€¦ I didnâ€™t feel it hit anything on the way down.\n\nOf course you donâ€™t believe me. Ha! No, whatever Iâ€™m full of, it isnâ€™t shit. Alright, Iâ€™ll take the bandage off the stump and show you. Itâ€™s not paint. Sure, try sticking your fingers in and wiggling them. Fun, huh? Not so fun, huh?\n\nYou know about phantom limbs? I can still feel my forearm and hand. They say itâ€™s because the brain centers that controlled them are still there, and want something to do, so they make up sensations. But like I said, I couldnâ€™t feel them touching anything, just touch the fingers together and to the palm, make a fist and feel that. â€¦Â Only now, just this morning, I can feel something else.\n\nIt feels like hard plastic. In my mindâ€™s eye itâ€™s shiny black. Its contours fit my grip perfectly. Itâ€™s got buttons on it, and a joystick. Iâ€™m going to try moving it now.\n\nbq.  <i>This is a sequel to my story \"Ozone\":http://jens.mooseyard.com/2006/10/ozone/. I'd wanted to write one for years, but didn't have any inspiration about what happened next. Then last week the ideas in here came to me (while watching my son explore glitches in video games), and I realized that they fit neatly into that story-world. But the ending only came to me today, after I'd started writing the story down.</i>\n"
  post_title: "Clipping"
  post_excerpt: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "410-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-01-09 13:01:42"
  post_modified_gmt: "2011-01-09 21:01:42"
  post_content_filtered: ""
  post_parent: 410
  guid: "http://jens.mooseyard.com/2011/01/410-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 412
  post_author: 2
  post_date: "2011-01-09 13:01:44"
  post_date_gmt: "2011-01-09 21:01:44"
  post_content: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into. There were only eight buildings with working doors in the whole game, with all kinds of things to explore and enemies to stalk in each one; so if you could somehow get into the other hundred or so buildings, what would be inside them? Could you play them too?\n\nI know, I was pretty dumb back then. I didnâ€™t understand the way the world works.\n\nFinally someone told me about a hack to get into any building. It exploited a bug in the hit detection: you had to run at a corner and jump right at it. If you got the position and angle just right, youâ€™d slip through the join between the two walls and be inside. People were using this as a cheat to get into the higher levels early, but all I could think about was the â€œsecretâ€ buildings. By then I had already covered my bedroom walls with hand-drawn maps of what I thought their insides might be like. I booted up the game and ran straight for the Library â€” I knew it was full of maze-like miles of dimly-lit dusty stacks and cavernous reading rooms, through which I could pursue my quarry of mutant beasts.\n\nInstead I hit the corner and bounced off, of course. The instructions said to be patient, so I backed up and tried again. All the good skills took practice. I got into my best gamer trance state of endless repetition and fine-tuning of reflexes. Finally after an hour I made it: instead of the bounce I got a split second of mangled polygons warping across the screen, and then â€¦Â nothing. The inside of the building didnâ€™t exist, and neither did the insides of its walls, so it was as though there were nothing there. I could see the streets and buildings on the other side. But the buildingâ€™s floor didnâ€™t exist either, and there was no ground under it, just a yawning abyss of pure electric video blue that I fell into like a rock. I had about ten seconds to turn and look up: the universe was a void with nothing in it but a few square blocks of street-plan dotted with empty building-shaped holes. It receded into the distance, and then I reached the outer boundary of the world and snapped into the death screen.\n\nYes, I do have a point. The real world is like this too. The things we think are solid are fakes; thereâ€™s nothing inside them. The things we canâ€™t open up are hollow, infinitely-thin shells around nauseating blue.\n\nI know what youâ€™re about to do. Everyone does this when I explain things. â€œI refute it thus!â€ as you hit a wall with a rock. Youâ€™ve got a hammer in that backpack? Even better.\n\nYeah, that support pillar looks pretty solid right there were you decided to hit it. With realistic bits of fractured concrete inside it, right there. Or over there, yes. Donâ€™t you get it? You were _meant to_ break through there. Just like I was meant to go into those dozen buildings but _no others_. Youâ€™re playing the game the way you were meant to, and itâ€™s a very good game so the limitations are fewer, the glitches are harder to exploit.\n\nBut with the right skills, the right mind-set, I can find the places that werenâ€™t meant to open up and make them open up anyway. And now that Iâ€™ve learned, I canâ€™t un-learn it. Everything I do is wrong.\n\nI canâ€™t find my way back to the right doors. I donâ€™t want to live out here in the cold underneath a _fucking highway overpass_ with brain-damaged junkies. Present company excepted. I had a job and a place to live and friends. But I canâ€™t get back to them: theyâ€™re part of the painted-on scenery now. Theyâ€™re not real objects, theyâ€™re texture-maps. The street level doors open onto blue abysses. So do the windows. Iâ€™ve tried them all; then I gave up. I almost fell into them, any number of times, had to grab hold of texture that looked just like brick or paint or wood on one side and didnâ€™t exist on the other. Vertigo made me sick and I threw up into that upside-down sky and watched it fall out of sight and vanish.\n\nThe former friends just repeat the same list of canned lines in random order, like any good NPC. Mostly â€œYou look pretty bad, manâ€ and â€œYou really need to get some helpâ€. Itâ€™s pathetic.\n\nThe last time I tried to get inside, I ran into a corner. Yeah, youâ€™d think I would have tried that trick earlier, but _you_ try ramming into the corner of a building in â€œreal lifeâ€. Explain to your hindbrain about cheat codes when it sees a wedge of brick looming up. Even after psyching myself up Iâ€™d always swerve aside at the last second.\n\nBut I finally managed it. What do you think happened? I fucking knocked myself out on the bricks, thatâ€™s what. I came to a while later â€” this was in a back alley so no one had seen me. My face was covered in drying blood from this big gouge on my scalp, and Iâ€™d knocked this tooth out, but no serious head injury.\n\nSo I lay there a minute, feeling like shit, gathering up strength to move. Then I looked at how I was lying, and saw that my right arm went right into the wall and disappeared at the elbow. A clipping error. I could still feel my hand, but it wasnâ€™t touching anything. I sat up slowly, the arm came loose with no resistance, but it just â€¦ ended there, in a smooth flat cut at the elbow. And I pulled it toward me and looked at it and _there wasnâ€™t anything inside me!_ Just an oval hole into a blue void.\n\nI was too afraid to touch it with my fingers. Still am. I found a curl of rusty wire, unrolled it and stuck the end of it in. It just went straight into my arm without resistance, no matter how I wiggled it around inside. On the other side of that hole I didnâ€™t exist. I got all four feet of wire into there, then lost my grip on the other end and it fell all the way in and disappeared â€¦ I didnâ€™t feel it hit anything on the way down.\n\nOf course you donâ€™t believe me. Ha! No, whatever Iâ€™m full of, it isnâ€™t shit. Alright, Iâ€™ll take the bandage off the stump and show you. Itâ€™s not paint. Sure, try sticking your fingers in and wiggling them. Fun, huh? Not so fun, huh?\n\nYou know about phantom limbs? I can still feel my forearm and hand. They say itâ€™s because the brain centers that controlled them are still there, and want something to do, so they make up sensations. But like I said, I couldnâ€™t feel them touching anything, just touch the fingers together and to the palm, make a fist and feel that. â€¦Â Only now, just this morning, I can feel something else.\n\nIt feels like hard plastic. In my mindâ€™s eye itâ€™s shiny black. Its contours fit my grip perfectly. Itâ€™s got buttons on it, and a joystick. Iâ€™m going to try moving it now.\n\nbq.  <i>This is a sequel to my story \"Ozone\":http://jens.mooseyard.com/2006/10/ozone/. I'd wanted to write one for years, but didn't have any inspiration about what happened next. Then last week the ideas in here came to me (while watching my son explore glitches in video games), and I realized that they fit neatly into that story-world. But the ending only came to me today, after I'd started writing the story down.</i>\n"
  post_title: "Clipping"
  post_excerpt: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "410-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-01-09 13:01:44"
  post_modified_gmt: "2011-01-09 21:01:44"
  post_content_filtered: ""
  post_parent: 410
  guid: "http://jens.mooseyard.com/2011/01/410-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 413
  post_author: 2
  post_date: "2011-01-09 13:09:58"
  post_date_gmt: "2011-01-09 21:09:58"
  post_content: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into. There were only eight buildings with working doors in the whole game, with all kinds of things to explore and enemies to stalk in each one; so if you could somehow get into the other hundred or so buildings, what would be inside them? Could you play them too?\n\nI know, I was pretty dumb back then. I didnâ€™t understand the way the world works.\n\nFinally someone told me about a hack to get into any building. It exploited a bug in the hit detection: you had to run at a corner and jump right at it. If you got the position and angle just right, youâ€™d slip through the join between the two walls and be inside. People were using this as a cheat to get into the higher levels early, but all I could think about was the â€œsecretâ€ buildings. By then I had already covered my bedroom walls with hand-drawn maps of what I thought their insides might be like. I booted up the game and ran straight for the Library â€” I knew it was full of maze-like miles of dimly-lit dusty stacks and cavernous reading rooms, through which I could pursue my quarry of mutant beasts.\n\nInstead I hit the corner and bounced off, of course. The instructions said to be patient, so I backed up and tried again. All the good skills took practice. I got into my best gamer trance state of endless repetition and fine-tuning of reflexes. Finally after an hour I made it: instead of the bounce I got a split second of mangled polygons warping across the screen, and then â€¦Â nothing. The inside of the building didnâ€™t exist, and neither did the insides of its walls, so it was as though there were nothing there. I could see the streets and buildings on the other side. But the buildingâ€™s floor didnâ€™t exist either, and there was no ground under it, just a yawning abyss of pure electric video blue that I fell into like a rock. I had about ten seconds to turn and look up: the universe was a void with nothing in it but a few square blocks of street-plan dotted with empty building-shaped holes. It receded into the distance, and then I reached the outer boundary of the world and snapped into the death screen.\n\nYes, I do have a point. The real world is like this too. The things we think are solid are fakes; thereâ€™s nothing inside them. The things we canâ€™t open up are hollow, infinitely-thin shells around nauseating blue.\n\nI know what youâ€™re about to do. Everyone does this when I explain things. â€œI refute it thus!â€ as you hit a wall with a rock. Youâ€™ve got a hammer in that backpack? Even better.\n\nYeah, that support pillar looks pretty solid right there were you decided to hit it. With realistic bits of fractured concrete inside it, right there. Or over there, yes. Donâ€™t you get it? You were _meant to_ break through there. Just like I was meant to go into those dozen buildings but _no others_. Youâ€™re playing the game the way you were meant to, and itâ€™s a very good game so the limitations are fewer, the glitches are harder to exploit.\n\nBut with the right skills, the right mind-set, I can find the places that werenâ€™t meant to open up and make them open up anyway. And now that Iâ€™ve learned, I canâ€™t un-learn it. Everything I do is wrong.\n\nI canâ€™t find my way back to the right doors. I donâ€™t want to live out here in the cold underneath a _fucking highway overpass_ with brain-damaged junkies. Present company excepted. I had a job and a place to live and friends. But I canâ€™t get back to them: theyâ€™re part of the painted-on scenery now. Theyâ€™re not real objects, theyâ€™re texture-maps. The street level doors open onto blue abysses. So do the windows. Iâ€™ve tried them all; then I gave up. I almost fell into them, any number of times, had to grab hold of texture that looked just like brick or paint or wood on one side and didnâ€™t exist on the other. Vertigo made me sick and I threw up into that upside-down sky and watched it fall out of sight and vanish.\n\nThe former friends just repeat the same list of canned lines in random order, like any good NPC. Mostly â€œYou look pretty bad, manâ€ and â€œYou really need to get some helpâ€. Itâ€™s pathetic.\n\nThe last time I tried to get inside, I ran into a corner. Yeah, youâ€™d think I would have tried that trick earlier, but _you_ try ramming into the corner of a building in â€œreal lifeâ€. Explain to your hindbrain about cheat codes when it sees a wedge of brick looming up. Even after psyching myself up Iâ€™d always swerve aside at the last second.\n\nBut I finally managed it. What do you think happened? I fucking knocked myself out on the bricks, thatâ€™s what. I came to a while later â€” this was in a back alley so no one had seen me. My face was covered in drying blood from this big gouge on my scalp, and Iâ€™d knocked this tooth out, but no serious head injury.\n\nSo I lay there a minute, feeling like shit, gathering up strength to move. Then I looked at how I was lying, and saw that my right arm went right into the wall and disappeared at the elbow. A clipping error. I could still feel my hand, but it wasnâ€™t touching anything. I sat up slowly, the arm came loose with no resistance, but it just â€¦ ended there, in a smooth flat cut at the elbow. And I pulled it toward me and looked at it and _there wasnâ€™t anything inside me!_ Just an oval hole into a blue void.\n\nI was too afraid to touch it with my fingers. Still am. I found a curl of rusty wire, unrolled it and stuck the end of it in. It just went straight into my arm without resistance, no matter how I wiggled it around inside. On the other side of that hole I didnâ€™t exist. I got all four feet of wire into there, then lost my grip on the other end and it fell all the way in and disappeared â€¦ I didnâ€™t feel it hit anything on the way down.\n\nOf course you donâ€™t believe me. Ha! No, whatever Iâ€™m full of, it isnâ€™t shit. Alright, Iâ€™ll take the bandage off the stump and show you. Itâ€™s not paint. Sure, try sticking your fingers in and wiggling them. Fun, huh? Not so fun, huh?\n\nYou know about phantom limbs? I can still feel my forearm and hand. They say itâ€™s because the brain centers that controlled them are still there, and want something to do, so they make up sensations. But like I said, I couldnâ€™t feel them touching anything, just touch the fingers together and to the palm, make a fist and feel that. â€¦Â Only now, just this morning, I can feel something else.\n\nIt feels like hard plastic. In my mindâ€™s eye itâ€™s shiny black. Its contours fit my grip perfectly. Itâ€™s got buttons on it, and a joystick. Iâ€™m going to try moving it now.\n\nbq.  <i>This is a sequel to my story \"Ozone\":http://jens.mooseyard.com/2006/10/ozone/. I'd wanted to write one for years, but didn't have any inspiration about what happened next. Then last week the ideas in here came to me, and I realized that they fit neatly into that story-world. But the ending only came to me today, after I'd started writing the story down.\n\nbq. I got these ideas while watching my son explore \"glitches in the notoriously buggy game PokÃ©mon Blue\":http://www.youtube.com/watch?v=79rxaswPSSw. I would love to have him read this story, but I know it would give him nightmares for weeksâ€¦</i>\n"
  post_title: "Glitch City"
  post_excerpt: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "410-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-01-09 13:09:58"
  post_modified_gmt: "2011-01-09 21:09:58"
  post_content_filtered: ""
  post_parent: 410
  guid: "http://jens.mooseyard.com/2011/01/410-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 414
  post_author: 2
  post_date: "2011-01-09 13:10:00"
  post_date_gmt: "2011-01-09 21:10:00"
  post_content: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into. There were only eight buildings with working doors in the whole game, with all kinds of things to explore and enemies to stalk in each one; so if you could somehow get into the other hundred or so buildings, what would be inside them? Could you play them too?\n\nI know, I was pretty dumb back then. I didnâ€™t understand the way the world works.\n\nFinally someone told me about a hack to get into any building. It exploited a bug in the hit detection: you had to run at a corner and jump right at it. If you got the position and angle just right, youâ€™d slip through the join between the two walls and be inside. People were using this as a cheat to get into the higher levels early, but all I could think about was the â€œsecretâ€ buildings. By then I had already covered my bedroom walls with hand-drawn maps of what I thought their insides might be like. I booted up the game and ran straight for the Library â€” I knew it was full of maze-like miles of dimly-lit dusty stacks and cavernous reading rooms, through which I could pursue my quarry of mutant beasts.\n\nInstead I hit the corner and bounced off, of course. The instructions said to be patient, so I backed up and tried again. All the good skills took practice. I got into my best gamer trance state of endless repetition and fine-tuning of reflexes. Finally after an hour I made it: instead of the bounce I got a split second of mangled polygons warping across the screen, and then â€¦Â nothing. The inside of the building didnâ€™t exist, and neither did the insides of its walls, so it was as though there were nothing there. I could see the streets and buildings on the other side. But the buildingâ€™s floor didnâ€™t exist either, and there was no ground under it, just a yawning abyss of pure electric video blue that I fell into like a rock. I had about ten seconds to turn and look up: the universe was a void with nothing in it but a few square blocks of street-plan dotted with empty building-shaped holes. It receded into the distance, and then I reached the outer boundary of the world and snapped into the death screen.\n\nYes, I do have a point. The real world is like this too. The things we think are solid are fakes; thereâ€™s nothing inside them. The things we canâ€™t open up are hollow, infinitely-thin shells around nauseating blue.\n\nI know what youâ€™re about to do. Everyone does this when I explain things. â€œI refute it thus!â€ as you hit a wall with a rock. Youâ€™ve got a hammer in that backpack? Even better.\n\nYeah, that support pillar looks pretty solid right there were you decided to hit it. With realistic bits of fractured concrete inside it, right there. Or over there, yes. Donâ€™t you get it? You were _meant to_ break through there. Just like I was meant to go into those dozen buildings but _no others_. Youâ€™re playing the game the way you were meant to, and itâ€™s a very good game so the limitations are fewer, the glitches are harder to exploit.\n\nBut with the right skills, the right mind-set, I can find the places that werenâ€™t meant to open up and make them open up anyway. And now that Iâ€™ve learned, I canâ€™t un-learn it. Everything I do is wrong.\n\nI canâ€™t find my way back to the right doors. I donâ€™t want to live out here in the cold underneath a _fucking highway overpass_ with brain-damaged junkies. Present company excepted. I had a job and a place to live and friends. But I canâ€™t get back to them: theyâ€™re part of the painted-on scenery now. Theyâ€™re not real objects, theyâ€™re texture-maps. The street level doors open onto blue abysses. So do the windows. Iâ€™ve tried them all; then I gave up. I almost fell into them, any number of times, had to grab hold of texture that looked just like brick or paint or wood on one side and didnâ€™t exist on the other. Vertigo made me sick and I threw up into that upside-down sky and watched it fall out of sight and vanish.\n\nThe former friends just repeat the same list of canned lines in random order, like any good NPC. Mostly â€œYou look pretty bad, manâ€ and â€œYou really need to get some helpâ€. Itâ€™s pathetic.\n\nThe last time I tried to get inside, I ran into a corner. Yeah, youâ€™d think I would have tried that trick earlier, but _you_ try ramming into the corner of a building in â€œreal lifeâ€. Explain to your hindbrain about cheat codes when it sees a wedge of brick looming up. Even after psyching myself up Iâ€™d always swerve aside at the last second.\n\nBut I finally managed it. What do you think happened? I fucking knocked myself out on the bricks, thatâ€™s what. I came to a while later â€” this was in a back alley so no one had seen me. My face was covered in drying blood from this big gouge on my scalp, and Iâ€™d knocked this tooth out, but no serious head injury.\n\nSo I lay there a minute, feeling like shit, gathering up strength to move. Then I looked at how I was lying, and saw that my right arm went right into the wall and disappeared at the elbow. A clipping error. I could still feel my hand, but it wasnâ€™t touching anything. I sat up slowly, the arm came loose with no resistance, but it just â€¦ ended there, in a smooth flat cut at the elbow. And I pulled it toward me and looked at it and _there wasnâ€™t anything inside me!_ Just an oval hole into a blue void.\n\nI was too afraid to touch it with my fingers. Still am. I found a curl of rusty wire, unrolled it and stuck the end of it in. It just went straight into my arm without resistance, no matter how I wiggled it around inside. On the other side of that hole I didnâ€™t exist. I got all four feet of wire into there, then lost my grip on the other end and it fell all the way in and disappeared â€¦ I didnâ€™t feel it hit anything on the way down.\n\nOf course you donâ€™t believe me. Ha! No, whatever Iâ€™m full of, it isnâ€™t shit. Alright, Iâ€™ll take the bandage off the stump and show you. Itâ€™s not paint. Sure, try sticking your fingers in and wiggling them. Fun, huh? Not so fun, huh?\n\nYou know about phantom limbs? I can still feel my forearm and hand. They say itâ€™s because the brain centers that controlled them are still there, and want something to do, so they make up sensations. But like I said, I couldnâ€™t feel them touching anything, just touch the fingers together and to the palm, make a fist and feel that. â€¦Â Only now, just this morning, I can feel something else.\n\nIt feels like hard plastic. In my mindâ€™s eye itâ€™s shiny black. Its contours fit my grip perfectly. Itâ€™s got buttons on it, and a joystick. Iâ€™m going to try moving it now.\n\nbq.  <i>This is a sequel to my story \"Ozone\":http://jens.mooseyard.com/2006/10/ozone/. I'd wanted to write one for years, but didn't have any inspiration about what happened next. Then last week the ideas in here came to me, and I realized that they fit neatly into that story-world. But the ending only came to me today, after I'd started writing the story down.\n\nbq. I got these ideas while watching my son explore \"glitches in the notoriously buggy game PokÃ©mon Blue\":http://www.youtube.com/watch?v=79rxaswPSSw. I would love to have him read this story, but I know it would give him nightmares for weeksâ€¦</i>\n"
  post_title: "Glitch City"
  post_excerpt: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "410-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2011-01-09 13:10:00"
  post_modified_gmt: "2011-01-09 21:10:00"
  post_content_filtered: ""
  post_parent: 410
  guid: "http://jens.mooseyard.com/2011/01/410-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 415
  post_author: 2
  post_date: "2011-01-09 13:10:53"
  post_date_gmt: "2011-01-09 21:10:53"
  post_content: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into. There were only eight buildings with working doors in the whole game, with all kinds of things to explore and enemies to stalk in each one; so if you could somehow get into the other hundred or so buildings, what would be inside them? Could you play them too?\n\nI know, I was pretty dumb back then. I didnâ€™t understand the way the world works.\n\nFinally someone told me about a hack to get into any building. It exploited a bug in the hit detection: you had to run at a corner and jump right at it. If you got the position and angle just right, youâ€™d slip through the join between the two walls and be inside. People were using this as a cheat to get into the higher levels early, but all I could think about was the â€œsecretâ€ buildings. By then I had already covered my bedroom walls with hand-drawn maps of what I thought their insides might be like. I booted up the game and ran straight for the Library â€” I knew it was full of maze-like miles of dimly-lit dusty stacks and cavernous reading rooms, through which I could pursue my quarry of mutant beasts.\n\nInstead I hit the corner and bounced off, of course. The instructions said to be patient, so I backed up and tried again. All the good skills took practice. I got into my best gamer trance state of endless repetition and fine-tuning of reflexes. Finally after an hour I made it: instead of the bounce I got a split second of mangled polygons warping across the screen, and then â€¦Â nothing. The inside of the building didnâ€™t exist, and neither did the insides of its walls, so it was as though there were nothing there. I could see the streets and buildings on the other side. But the buildingâ€™s floor didnâ€™t exist either, and there was no ground under it, just a yawning abyss of pure electric video blue that I fell into like a rock. I had about ten seconds to turn and look up: the universe was a void with nothing in it but a few square blocks of street-plan dotted with empty building-shaped holes. It receded into the distance, and then I reached the outer boundary of the world and snapped into the death screen.\n\nYes, I do have a point. The real world is like this too. The things we think are solid are fakes; thereâ€™s nothing inside them. The things we canâ€™t open up are hollow, infinitely-thin shells around nauseating blue.\n\nI know what youâ€™re about to do. Everyone does this when I explain things. â€œI refute it thus!â€ as you hit a wall with a rock. Youâ€™ve got a hammer in that backpack? Even better.\n\nYeah, that support pillar looks pretty solid right there were you decided to hit it. With realistic bits of fractured concrete inside it, right there. Or over there, yes. Donâ€™t you get it? You were _meant to_ break through there. Just like I was meant to go into those dozen buildings but _no others_. Youâ€™re playing the game the way you were meant to, and itâ€™s a very good game so the limitations are fewer, the glitches are harder to exploit.\n\nBut with the right skills, the right mind-set, I can find the places that werenâ€™t meant to open up and make them open up anyway. And now that Iâ€™ve learned, I canâ€™t un-learn it. Everything I do is wrong.\n\nI canâ€™t find my way back to the right doors. I donâ€™t want to live out here in the cold underneath a _fucking highway overpass_ with brain-damaged junkies. Present company excepted. I had a job and a place to live and friends. But I canâ€™t get back to them: theyâ€™re part of the painted-on scenery now. Theyâ€™re not real objects, theyâ€™re texture-maps. The street level doors open onto blue abysses. So do the windows. Iâ€™ve tried them all; then I gave up. I almost fell into them, any number of times, had to grab hold of texture that looked just like brick or paint or wood on one side and didnâ€™t exist on the other. Vertigo made me sick and I threw up into that upside-down sky and watched it fall out of sight and vanish.\n\nThe former friends just repeat the same list of canned lines in random order, like any good NPC. Mostly â€œYou look pretty bad, manâ€ and â€œYou really need to get some helpâ€. Itâ€™s pathetic.\n\nThe last time I tried to get inside, I ran into a corner. Yeah, youâ€™d think I would have tried that trick earlier, but _you_ try ramming into the corner of a building in â€œreal lifeâ€. Explain to your hindbrain about cheat codes when it sees a wedge of brick looming up. Even after psyching myself up Iâ€™d always swerve aside at the last second.\n\nBut I finally managed it. What do you think happened? I fucking knocked myself out on the bricks, thatâ€™s what. I came to a while later â€” this was in a back alley so no one had seen me. My face was covered in drying blood from this big gouge on my scalp, and Iâ€™d knocked this tooth out, but no serious head injury.\n\nSo I lay there a minute, feeling like shit, gathering up strength to move. Then I looked at how I was lying, and saw that my right arm went right into the wall and disappeared at the elbow. A clipping error. I could still feel my hand, but it wasnâ€™t touching anything. I sat up slowly, the arm came loose with no resistance, but it just â€¦ ended there, in a smooth flat cut at the elbow. And I pulled it toward me and looked at it and _there wasnâ€™t anything inside me!_ Just an oval hole into a blue void.\n\nI was too afraid to touch it with my fingers. Still am. I found a curl of rusty wire, unrolled it and stuck the end of it in. It just went straight into my arm without resistance, no matter how I wiggled it around inside. On the other side of that hole I didnâ€™t exist. I got all four feet of wire into there, then lost my grip on the other end and it fell all the way in and disappeared â€¦ I didnâ€™t feel it hit anything on the way down.\n\nOf course you donâ€™t believe me. Ha! No, whatever Iâ€™m full of, it isnâ€™t shit. Alright, Iâ€™ll take the bandage off the stump and show you. Itâ€™s not paint. Sure, try sticking your fingers in and wiggling them. Fun, huh? Not so fun, huh?\n\nYou know about phantom limbs? I can still feel my forearm and hand. They say itâ€™s because the brain centers that controlled them are still there, and want something to do, so they make up sensations. But like I said, I couldnâ€™t feel them touching anything, just touch the fingers together and to the palm, make a fist and feel that. â€¦Â Only now, just this morning, I can feel something else.\n\nIt feels like hard plastic. In my mindâ€™s eye itâ€™s shiny black. Its contours fit my grip perfectly. Itâ€™s got buttons on it, and a joystick. Iâ€™m going to try moving it now.\n\n<center>â€”</center>\n\nbq.  <i>This is a sequel to my story \"Ozone\":http://jens.mooseyard.com/2006/10/ozone/. I'd wanted to write one for years, but didn't have any inspiration about what happened next. Then last week the ideas in here came to me, and I realized that they fit neatly into that story-world. But the ending only came to me today, after I'd started writing the story down.\n\nbq. I got these ideas while watching my son explore \"glitches in the notoriously buggy game PokÃ©mon Blue\":http://www.youtube.com/watch?v=79rxaswPSSw. I would love to have him read this story, but I know it would give him nightmares for weeksâ€¦</i>\n"
  post_title: "Glitch City"
  post_excerpt: "No _again_, I will not show you whatâ€™s under the bandage on my arm. I wonâ€™t even look myself, anymore; itâ€™s gotten too disturbing. I mean, the wound hasnâ€™t changed, but every time I look at it it bothers me more, takes me longer to stop shivering. I keep wanting to touch it.\n\nListen: Did you ever play _Shock City_? Iâ€™m not trying to change the subject; hear me out. I played the hell out of that game when I was twelve, and I always wondered what was inside all those buildings you couldnâ€™t get into."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "410-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2011-01-09 13:10:53"
  post_modified_gmt: "2011-01-09 21:10:53"
  post_content_filtered: ""
  post_parent: 410
  guid: "http://jens.mooseyard.com/2011/01/410-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 417
  post_author: 2
  post_date: "2011-03-12 12:52:05"
  post_date_gmt: "2011-03-12 20:52:05"
  post_content: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users.\n\nI could rant at length about the arrogance, stupidity and just plain creepiness of that message and the policies behind it, but I don't know that it's even worth it. \"Others have already done a pretty good job\":http://www.readwriteweb.com/archives/twitter_tells_developers_to_stop_building_twitter.php of deconstructing its marketroid Newspeak. I just can't resist pointing out that two of the major components of Twitter's content model -- the @-mention and the #hashtag -- were invented by early users and app developers, not by Twitter itself, then later integrated directly into the system to make them more useful. That's a great example of collaborative development. Now, perversely, Twitter sees fit to \"tell app developers\":http://dev.twitter.com/pages/display_guidelines exactly how they can and can't represent those same features in their UIs. \n\nAnd yes, this is enforceable, because thanks to OAuth they can and will revoke an app's access to Twitter at the flick of a switch. They brag about how they \"revoke literally hundreds of API tokens / apps a week\" _[ibid]_. I just now realized the implications of this, actually. OAuth may be more secure than traditional HTTP auth in that it doesn't give apps access to your account password, but the centralization of control that it gives to service providers is really disturbing.\n\n\"But Jens\", you say, \"you still have accounts on other centralized social networking sites such as Facebook, Tumblr, LiveJournal and flickr, many of which have also shown a similar disregard for users and developers. Why aren't you deleting those accounts?\"\n\nGood question, anonymous readership. It comes down to three factors:\n\n# These other services feel more like real apps, with idiosyncratic features. Twitter has always seemed more like (and promoted itself as, at least to developers) a general purpose platform. It's a series of tubes for publishing and subscribing to 140-character blobs. I could ignore its stupid star-shaped topology, centralized control, and frustrating payload limitations ... as long as it stuck to being a generic service. Now they're taking that back. It's as though the phone company is telling me what color of telephone I'm allowed to plug into their lines and what size the touch-tone buttons have to be. (Think that's a silly example? The old monopoly AT&T \"actually did enforce\":http://en.wikipedia.org/wiki/Hush-A-Phone_v._United_States that \"ludicrous degree of control\":http://en.wikipedia.org/wiki/Carterfone until court rulings in 1956 and 1968.)\n# Some of these services are, frankly, a lot more important to me than Twitter. I am basically on Twitter mostly to keep up with some friends/acquaintances who post about their daily lives there. (It makes me very sad that some of those friends once used to post far more meaningful content on a regular basis on LiveJournal. I miss those days.) But even though I keep my list of follows really small, my stream still has so many retweets and links to random URLs and unreadably-shorthanded opinions, that it's often more frustrating than useful.\n# Finally some of those services just haven't done anything particularly evil yet. Turns out I can put up with innocent everyday \"failure\":http://www.tumblr.com/503.html pretty well when I'm not paying anything for it.\n\nThe big question in my mind is what to replace Twitter with. Ironically (and perhaps pathetically) I think I will end up reading Facebook more, because some of my Twitter friends are also there. At least until the next time Facebook does something egregiously evil.\n\nIn a larger sense, it should not be rocket science to build some plumbing that does what Twitter does -- publish and subscribe small blobs -- with an actually-decentralized architecture. There are a lot of smart developers out there, but to some extent we've been seduced into suckling at the proprietary API teats of big providers, at the expense of developing the next generation of open protocols.\n\nYeah, in my current day job I'm as guilty of this as anyone else. But at home I've got a garage full of various pieces of half-built tech that attempt to solve that problem in one form or another, if I could ever finish any of them. A lot of the trouble is motivation. Anyone want to help out?"
  post_title: "I'm a qwitter"
  post_excerpt: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "im-a-qwitter"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-12 13:01:31"
  post_modified_gmt: "2011-03-12 21:01:31"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=417"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 4
-
  ID: 418
  post_author: 2
  post_date: "2011-03-12 12:52:05"
  post_date_gmt: "2011-03-12 20:52:05"
  post_content: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users.\n\nI could rant at length about the arrogance, stupidity and just plain creepiness of that message and the policies behind it, but I don't know that it's even worth it. \"Others have already done a pretty good job\":http://www.readwriteweb.com/archives/twitter_tells_developers_to_stop_building_twitter.php of deconstructing its marketroid Newspeak. I just can't resist pointing out that two of the major components of Twitter's content model -- the @-mention and the #hashtag -- were invented by early users and app developers, not by Twitter itself, then later integrated directly into the system to make them more useful. That's a great example of collaborative development. Now, perversely, Twitter sees fit to \"tell app developers\":http://dev.twitter.com/pages/display_guidelines exactly how they can and can't represent those same features in their UIs. \n\nAnd yes, this is enforceable, because thanks to OAuth they can and will revoke an app's access to Twitter at the flick of a switch. They brag about how they \"revoke literally hundreds of API tokens / apps a week\" _[ibid]_. I just now realized the implications of this, actually. OAuth may be more secure than traditional HTTP auth in that it doesn't give apps access to your account password, but the centralization of control that it gives to service providers is really disturbing.\n\n\"But Jens\", you say, \"you still have accounts on other centralized social networking sites such as Facebook, Tumblr, LiveJournal and flickr, many of which have also shown a similar disregard for users and developers. Why aren't you deleting those accounts?\"\n\nGood question, anonymous readership. It comes down to three factors:\n\n# These other services feel more like real apps, with idiosyncratic features. Twitter has always seemed more like (and promoted itself as, at least to developers) a general purpose platform. It's a series of tubes for publishing and subscribing to 140-character blobs. I could ignore its stupid star-shaped topology, centralized control, and frustrating payload limitations ... as long as it stuck to being a generic service. Now they're taking that back. It's as though the phone company is telling me what color of handset I'm allowed to plug into their lines and what size the touch-tone buttons have to be. (The old monopoly AT&T actually did claim that degree of control over its network until the 1960s.)\n# Some of these services are, frankly, a lot more important to me than Twitter. I am basically on Twitter mostly to keep up with some friends/acquaintances who post about their daily lives there. (It makes me very sad that some of those friends once used to post far more meaningful content on a regular basis on LiveJournal. I miss those days.) But even though I keep my list of follows really small, my stream still has so many retweets and links to random URLs and unreadably-shorthanded opinions, that it's often more frustrating than useful.\n# Finally some of those services just haven't done anything particularly evil yet. Turns out I can put up with innocent everyday \"failure\":http://www.tumblr.com/503.html pretty well when I'm not paying anything for it.\n\nThe big question in my mind is what to replace Twitter with. Ironically (and perhaps pathetically) I think I will end up reading Facebook more, because some of my Twitter friends are also there. At least until the next time Facebook does something egregiously evil.\n\nIn a larger sense, it should not be rocket science to build some plumbing that does what Twitter does -- publish and subscribe small blobs -- with an actually-decentralized architecture. There are a lot of smart developers out there, but to some extent we've been seduced into suckling at the proprietary API teats of big providers, at the expense of developing the next generation of open protocols.\n\nYeah, in my current day job I'm as guilty of this as anyone else. But at home I've got a garage full of various pieces of half-built tech that attempt to solve that problem in one form or another, if I could ever finish any of them. A lot of the trouble is motivation. Anyone want to help out?"
  post_title: "I'm a qwitter"
  post_excerpt: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "417-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-12 12:52:05"
  post_modified_gmt: "2011-03-12 20:52:05"
  post_content_filtered: ""
  post_parent: 417
  guid: "http://jens.mooseyard.com/2011/03/417-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 419
  post_author: 2
  post_date: "2011-03-12 12:52:06"
  post_date_gmt: "2011-03-12 20:52:06"
  post_content: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users.\n\nI could rant at length about the arrogance, stupidity and just plain creepiness of that message and the policies behind it, but I don't know that it's even worth it. \"Others have already done a pretty good job\":http://www.readwriteweb.com/archives/twitter_tells_developers_to_stop_building_twitter.php of deconstructing its marketroid Newspeak. I just can't resist pointing out that two of the major components of Twitter's content model -- the @-mention and the #hashtag -- were invented by early users and app developers, not by Twitter itself, then later integrated directly into the system to make them more useful. That's a great example of collaborative development. Now, perversely, Twitter sees fit to \"tell app developers\":http://dev.twitter.com/pages/display_guidelines exactly how they can and can't represent those same features in their UIs. \n\nAnd yes, this is enforceable, because thanks to OAuth they can and will revoke an app's access to Twitter at the flick of a switch. They brag about how they \"revoke literally hundreds of API tokens / apps a week\" _[ibid]_. I just now realized the implications of this, actually. OAuth may be more secure than traditional HTTP auth in that it doesn't give apps access to your account password, but the centralization of control that it gives to service providers is really disturbing.\n\n\"But Jens\", you say, \"you still have accounts on other centralized social networking sites such as Facebook, Tumblr, LiveJournal and flickr, many of which have also shown a similar disregard for users and developers. Why aren't you deleting those accounts?\"\n\nGood question, anonymous readership. It comes down to three factors:\n\n# These other services feel more like real apps, with idiosyncratic features. Twitter has always seemed more like (and promoted itself as, at least to developers) a general purpose platform. It's a series of tubes for publishing and subscribing to 140-character blobs. I could ignore its stupid star-shaped topology, centralized control, and frustrating payload limitations ... as long as it stuck to being a generic service. Now they're taking that back. It's as though the phone company is telling me what color of handset I'm allowed to plug into their lines and what size the touch-tone buttons have to be. (The old monopoly AT&T actually did claim that degree of control over its network until the 1960s.)\n# Some of these services are, frankly, a lot more important to me than Twitter. I am basically on Twitter mostly to keep up with some friends/acquaintances who post about their daily lives there. (It makes me very sad that some of those friends once used to post far more meaningful content on a regular basis on LiveJournal. I miss those days.) But even though I keep my list of follows really small, my stream still has so many retweets and links to random URLs and unreadably-shorthanded opinions, that it's often more frustrating than useful.\n# Finally some of those services just haven't done anything particularly evil yet. Turns out I can put up with innocent everyday \"failure\":http://www.tumblr.com/503.html pretty well when I'm not paying anything for it.\n\nThe big question in my mind is what to replace Twitter with. Ironically (and perhaps pathetically) I think I will end up reading Facebook more, because some of my Twitter friends are also there. At least until the next time Facebook does something egregiously evil.\n\nIn a larger sense, it should not be rocket science to build some plumbing that does what Twitter does -- publish and subscribe small blobs -- with an actually-decentralized architecture. There are a lot of smart developers out there, but to some extent we've been seduced into suckling at the proprietary API teats of big providers, at the expense of developing the next generation of open protocols.\n\nYeah, in my current day job I'm as guilty of this as anyone else. But at home I've got a garage full of various pieces of half-built tech that attempt to solve that problem in one form or another, if I could ever finish any of them. A lot of the trouble is motivation. Anyone want to help out?"
  post_title: "I'm a qwitter"
  post_excerpt: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "417-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-12 12:52:06"
  post_modified_gmt: "2011-03-12 20:52:06"
  post_content_filtered: ""
  post_parent: 417
  guid: "http://jens.mooseyard.com/2011/03/417-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 420
  post_author: 2
  post_date: "2011-03-12 12:58:18"
  post_date_gmt: "2011-03-12 20:58:18"
  post_content: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users.\n\nI could rant at length about the arrogance, stupidity and just plain creepiness of that message and the policies behind it, but I don't know that it's even worth it. \"Others have already done a pretty good job\":http://www.readwriteweb.com/archives/twitter_tells_developers_to_stop_building_twitter.php of deconstructing its marketroid Newspeak. I just can't resist pointing out that two of the major components of Twitter's content model -- the @-mention and the #hashtag -- were invented by early users and app developers, not by Twitter itself, then later integrated directly into the system to make them more useful. That's a great example of collaborative development. Now, perversely, Twitter sees fit to \"tell app developers\":http://dev.twitter.com/pages/display_guidelines exactly how they can and can't represent those same features in their UIs. \n\nAnd yes, this is enforceable, because thanks to OAuth they can and will revoke an app's access to Twitter at the flick of a switch. They brag about how they \"revoke literally hundreds of API tokens / apps a week\" _[ibid]_. I just now realized the implications of this, actually. OAuth may be more secure than traditional HTTP auth in that it doesn't give apps access to your account password, but the centralization of control that it gives to service providers is really disturbing.\n\n\"But Jens\", you say, \"you still have accounts on other centralized social networking sites such as Facebook, Tumblr, LiveJournal and flickr, many of which have also shown a similar disregard for users and developers. Why aren't you deleting those accounts?\"\n\nGood question, anonymous readership. It comes down to three factors:\n\n# These other services feel more like real apps, with idiosyncratic features. Twitter has always seemed more like (and promoted itself as, at least to developers) a general purpose platform. It's a series of tubes for publishing and subscribing to 140-character blobs. I could ignore its stupid star-shaped topology, centralized control, and frustrating payload limitations ... as long as it stuck to being a generic service. Now they're taking that back. It's as though the phone company is telling me what color of telephone I'm allowed to plug into their lines and what size the touch-tone buttons have to be. (Think that's a silly example? The old monopoly AT&T \"actually did enforce that ludicrous degree of control\":http://en.wikipedia.org/wiki/Hush-A-Phone_v._United_States until a 1956 court ruling.)\n# Some of these services are, frankly, a lot more important to me than Twitter. I am basically on Twitter mostly to keep up with some friends/acquaintances who post about their daily lives there. (It makes me very sad that some of those friends once used to post far more meaningful content on a regular basis on LiveJournal. I miss those days.) But even though I keep my list of follows really small, my stream still has so many retweets and links to random URLs and unreadably-shorthanded opinions, that it's often more frustrating than useful.\n# Finally some of those services just haven't done anything particularly evil yet. Turns out I can put up with innocent everyday \"failure\":http://www.tumblr.com/503.html pretty well when I'm not paying anything for it.\n\nThe big question in my mind is what to replace Twitter with. Ironically (and perhaps pathetically) I think I will end up reading Facebook more, because some of my Twitter friends are also there. At least until the next time Facebook does something egregiously evil.\n\nIn a larger sense, it should not be rocket science to build some plumbing that does what Twitter does -- publish and subscribe small blobs -- with an actually-decentralized architecture. There are a lot of smart developers out there, but to some extent we've been seduced into suckling at the proprietary API teats of big providers, at the expense of developing the next generation of open protocols.\n\nYeah, in my current day job I'm as guilty of this as anyone else. But at home I've got a garage full of various pieces of half-built tech that attempt to solve that problem in one form or another, if I could ever finish any of them. A lot of the trouble is motivation. Anyone want to help out?"
  post_title: "I'm a qwitter"
  post_excerpt: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "417-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-12 12:58:18"
  post_modified_gmt: "2011-03-12 20:58:18"
  post_content_filtered: ""
  post_parent: 417
  guid: "http://jens.mooseyard.com/2011/03/417-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 421
  post_author: 2
  post_date: "2011-03-12 12:58:21"
  post_date_gmt: "2011-03-12 20:58:21"
  post_content: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users.\n\nI could rant at length about the arrogance, stupidity and just plain creepiness of that message and the policies behind it, but I don't know that it's even worth it. \"Others have already done a pretty good job\":http://www.readwriteweb.com/archives/twitter_tells_developers_to_stop_building_twitter.php of deconstructing its marketroid Newspeak. I just can't resist pointing out that two of the major components of Twitter's content model -- the @-mention and the #hashtag -- were invented by early users and app developers, not by Twitter itself, then later integrated directly into the system to make them more useful. That's a great example of collaborative development. Now, perversely, Twitter sees fit to \"tell app developers\":http://dev.twitter.com/pages/display_guidelines exactly how they can and can't represent those same features in their UIs. \n\nAnd yes, this is enforceable, because thanks to OAuth they can and will revoke an app's access to Twitter at the flick of a switch. They brag about how they \"revoke literally hundreds of API tokens / apps a week\" _[ibid]_. I just now realized the implications of this, actually. OAuth may be more secure than traditional HTTP auth in that it doesn't give apps access to your account password, but the centralization of control that it gives to service providers is really disturbing.\n\n\"But Jens\", you say, \"you still have accounts on other centralized social networking sites such as Facebook, Tumblr, LiveJournal and flickr, many of which have also shown a similar disregard for users and developers. Why aren't you deleting those accounts?\"\n\nGood question, anonymous readership. It comes down to three factors:\n\n# These other services feel more like real apps, with idiosyncratic features. Twitter has always seemed more like (and promoted itself as, at least to developers) a general purpose platform. It's a series of tubes for publishing and subscribing to 140-character blobs. I could ignore its stupid star-shaped topology, centralized control, and frustrating payload limitations ... as long as it stuck to being a generic service. Now they're taking that back. It's as though the phone company is telling me what color of telephone I'm allowed to plug into their lines and what size the touch-tone buttons have to be. (Think that's a silly example? The old monopoly AT&T \"actually did enforce that ludicrous degree of control\":http://en.wikipedia.org/wiki/Hush-A-Phone_v._United_States until a 1956 court ruling.)\n# Some of these services are, frankly, a lot more important to me than Twitter. I am basically on Twitter mostly to keep up with some friends/acquaintances who post about their daily lives there. (It makes me very sad that some of those friends once used to post far more meaningful content on a regular basis on LiveJournal. I miss those days.) But even though I keep my list of follows really small, my stream still has so many retweets and links to random URLs and unreadably-shorthanded opinions, that it's often more frustrating than useful.\n# Finally some of those services just haven't done anything particularly evil yet. Turns out I can put up with innocent everyday \"failure\":http://www.tumblr.com/503.html pretty well when I'm not paying anything for it.\n\nThe big question in my mind is what to replace Twitter with. Ironically (and perhaps pathetically) I think I will end up reading Facebook more, because some of my Twitter friends are also there. At least until the next time Facebook does something egregiously evil.\n\nIn a larger sense, it should not be rocket science to build some plumbing that does what Twitter does -- publish and subscribe small blobs -- with an actually-decentralized architecture. There are a lot of smart developers out there, but to some extent we've been seduced into suckling at the proprietary API teats of big providers, at the expense of developing the next generation of open protocols.\n\nYeah, in my current day job I'm as guilty of this as anyone else. But at home I've got a garage full of various pieces of half-built tech that attempt to solve that problem in one form or another, if I could ever finish any of them. A lot of the trouble is motivation. Anyone want to help out?"
  post_title: "I'm a qwitter"
  post_excerpt: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "417-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-12 12:58:21"
  post_modified_gmt: "2011-03-12 20:58:21"
  post_content_filtered: ""
  post_parent: 417
  guid: "http://jens.mooseyard.com/2011/03/417-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 422
  post_author: 2
  post_date: "2011-03-12 13:01:29"
  post_date_gmt: "2011-03-12 21:01:29"
  post_content: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users.\n\nI could rant at length about the arrogance, stupidity and just plain creepiness of that message and the policies behind it, but I don't know that it's even worth it. \"Others have already done a pretty good job\":http://www.readwriteweb.com/archives/twitter_tells_developers_to_stop_building_twitter.php of deconstructing its marketroid Newspeak. I just can't resist pointing out that two of the major components of Twitter's content model -- the @-mention and the #hashtag -- were invented by early users and app developers, not by Twitter itself, then later integrated directly into the system to make them more useful. That's a great example of collaborative development. Now, perversely, Twitter sees fit to \"tell app developers\":http://dev.twitter.com/pages/display_guidelines exactly how they can and can't represent those same features in their UIs. \n\nAnd yes, this is enforceable, because thanks to OAuth they can and will revoke an app's access to Twitter at the flick of a switch. They brag about how they \"revoke literally hundreds of API tokens / apps a week\" _[ibid]_. I just now realized the implications of this, actually. OAuth may be more secure than traditional HTTP auth in that it doesn't give apps access to your account password, but the centralization of control that it gives to service providers is really disturbing.\n\n\"But Jens\", you say, \"you still have accounts on other centralized social networking sites such as Facebook, Tumblr, LiveJournal and flickr, many of which have also shown a similar disregard for users and developers. Why aren't you deleting those accounts?\"\n\nGood question, anonymous readership. It comes down to three factors:\n\n# These other services feel more like real apps, with idiosyncratic features. Twitter has always seemed more like (and promoted itself as, at least to developers) a general purpose platform. It's a series of tubes for publishing and subscribing to 140-character blobs. I could ignore its stupid star-shaped topology, centralized control, and frustrating payload limitations ... as long as it stuck to being a generic service. Now they're taking that back. It's as though the phone company is telling me what color of telephone I'm allowed to plug into their lines and what size the touch-tone buttons have to be. (Think that's a silly example? The old monopoly AT&T \"actually did enforce\":http://en.wikipedia.org/wiki/Hush-A-Phone_v._United_States that \"ludicrous degree of control\":http://en.wikipedia.org/wiki/Carterfone until court rulings in 1956 and 1968.)\n# Some of these services are, frankly, a lot more important to me than Twitter. I am basically on Twitter mostly to keep up with some friends/acquaintances who post about their daily lives there. (It makes me very sad that some of those friends once used to post far more meaningful content on a regular basis on LiveJournal. I miss those days.) But even though I keep my list of follows really small, my stream still has so many retweets and links to random URLs and unreadably-shorthanded opinions, that it's often more frustrating than useful.\n# Finally some of those services just haven't done anything particularly evil yet. Turns out I can put up with innocent everyday \"failure\":http://www.tumblr.com/503.html pretty well when I'm not paying anything for it.\n\nThe big question in my mind is what to replace Twitter with. Ironically (and perhaps pathetically) I think I will end up reading Facebook more, because some of my Twitter friends are also there. At least until the next time Facebook does something egregiously evil.\n\nIn a larger sense, it should not be rocket science to build some plumbing that does what Twitter does -- publish and subscribe small blobs -- with an actually-decentralized architecture. There are a lot of smart developers out there, but to some extent we've been seduced into suckling at the proprietary API teats of big providers, at the expense of developing the next generation of open protocols.\n\nYeah, in my current day job I'm as guilty of this as anyone else. But at home I've got a garage full of various pieces of half-built tech that attempt to solve that problem in one form or another, if I could ever finish any of them. A lot of the trouble is motivation. Anyone want to help out?"
  post_title: "I'm a qwitter"
  post_excerpt: "I have \"backed up all the tweets\":http://tweetake.com/ from my Twitter account (@snej) to a local file, and am now \"mass-deleting\":http://twitwipe.com/index.php all of them. This is a venerable form of protest that goes back to early BBSs like the WELL. Basically, I am no longer willing to donate my 'valuable' user-generated content to a centralized service that issues \"fuck-yous of this magnitude\":http://groups.google.com/group/twitter-api-announce/browse_thread/thread/c82cd59c7a87216a?hl=en_US to its developers and users."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "417-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-12 13:01:29"
  post_modified_gmt: "2011-03-12 21:01:29"
  post_content_filtered: ""
  post_parent: 417
  guid: "http://jens.mooseyard.com/2011/03/417-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 423
  post_author: 2
  post_date: "2011-03-14 17:56:24"
  post_date_gmt: "2011-03-15 00:56:24"
  post_content: "The \"documentation for Rdio's new API\":http://developer.rdio.com/docs/REST/ begins:\n\nbq. It's simple to make requests to *Rdio's REST API*. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. *All method calls are made as POST requests* to *http://api.rdio.com/1/*. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. *The name of the method is passed as the 'method' argument.* _[Emphasis mine.]_\n\nWhat's wrong with this? Well, the first bolded point is immediately contradicted by the ones that follow. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that\n\n# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.\n# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word \"method\" in the HTTP protocol in the first place.\n\nSo in a real REST API there would be a URL representing \"my friends\", and a client could GET that URL to retrieve a list of friends, POST to it to add a friend (resulting in a new URL/resource representing that friend), PUT to a friend's URL to update details, and DELETE to that URL to remove the friend relation. Instead, the actual Rdio API has \"a couple of dozen ad-hoc verbs\":http://developer.rdio.com/docs/read/rest/Methods including \"addFriend\" and \"removeFriend\". I didn't see one to get a list of friends or get info about a friend, but there is an Rdio-specific \"get\" verb that might work for those things. \"Get\" seems nicely general, but then for some reason there are also _sixteen_ other specific getters ranging from \"getActivityStream\" to \"getTracksInCollection\".\n\nSo it's clear that Rdio's \"REST\" API, like many other recent \"REST\" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.\n\nMaybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than \"HTTP API that's not as hard to use as SOAP\"?\n\n * The hacky DropBox API especially annoys me because there's already a \"perfectly good standardized and widely adopted REST API\":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does."
  post_title: "Dudes, this is so not REST"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "dudes-this-is-so-not-rest"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-14 18:17:13"
  post_modified_gmt: "2011-03-15 01:17:13"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=423"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 44
-
  ID: 424
  post_author: 2
  post_date: "2011-03-14 17:56:24"
  post_date_gmt: "2011-03-15 00:56:24"
  post_content: "The \"documentation for Rdio's new API\":http://developer.rdio.com/docs/REST/ begins:\n\nbq. It's simple to make requests to Rdio's REST API. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. All method calls are made as POST requests to http://api.rdio.com/1/. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. The name of the method is passed as the method argument.\n\nWhat's wrong with this? Well, the first sentence is immediately contradicted by what follows. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that\n\n# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.\n# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word \"method\" in the HTTP protocol in the first place.\n\nSo it's clear that Rdio's \"REST\" API, like many other recent \"REST\" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.\n\nMaybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than \"HTTP API that's not as hard to use as SOAP\"?\n\n * The hacky DropBox API especially annoys me because there's already a \"perfectly good standardized and widely adopted REST API\":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does."
  post_title: "Dudes, this is so not REST"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "423-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-14 17:56:24"
  post_modified_gmt: "2011-03-15 00:56:24"
  post_content_filtered: ""
  post_parent: 423
  guid: "http://jens.mooseyard.com/2011/03/423-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 425
  post_author: 2
  post_date: "2011-03-14 17:56:25"
  post_date_gmt: "2011-03-15 00:56:25"
  post_content: "The \"documentation for Rdio's new API\":http://developer.rdio.com/docs/REST/ begins:\n\nbq. It's simple to make requests to Rdio's REST API. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. All method calls are made as POST requests to http://api.rdio.com/1/. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. The name of the method is passed as the method argument.\n\nWhat's wrong with this? Well, the first sentence is immediately contradicted by what follows. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that\n\n# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.\n# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word \"method\" in the HTTP protocol in the first place.\n\nSo it's clear that Rdio's \"REST\" API, like many other recent \"REST\" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.\n\nMaybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than \"HTTP API that's not as hard to use as SOAP\"?\n\n * The hacky DropBox API especially annoys me because there's already a \"perfectly good standardized and widely adopted REST API\":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does."
  post_title: "Dudes, this is so not REST"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "423-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-14 17:56:25"
  post_modified_gmt: "2011-03-15 00:56:25"
  post_content_filtered: ""
  post_parent: 423
  guid: "http://jens.mooseyard.com/2011/03/423-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 426
  post_author: 2
  post_date: "2011-03-14 18:04:55"
  post_date_gmt: "2011-03-15 01:04:55"
  post_content: "The \"documentation for Rdio's new API\":http://developer.rdio.com/docs/REST/ begins:\n\nbq. It's simple to make requests to *Rdio's REST API*. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. *All method calls are made as POST requests* to *http://api.rdio.com/1/*. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. *The name of the method is passed as the 'method' argument.* _[Emphasis mine.]_\n\nWhat's wrong with this? Well, the first bolded point is immediately contradicted by the ones that follow. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that\n\n# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.\n# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word \"method\" in the HTTP protocol in the first place.\n\nSo it's clear that Rdio's \"REST\" API, like many other recent \"REST\" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.\n\nMaybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than \"HTTP API that's not as hard to use as SOAP\"?\n\n * The hacky DropBox API especially annoys me because there's already a \"perfectly good standardized and widely adopted REST API\":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does."
  post_title: "Dudes, this is so not REST"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "423-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-14 18:04:55"
  post_modified_gmt: "2011-03-15 01:04:55"
  post_content_filtered: ""
  post_parent: 423
  guid: "http://jens.mooseyard.com/2011/03/423-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 427
  post_author: 2
  post_date: "2011-03-14 18:04:56"
  post_date_gmt: "2011-03-15 01:04:56"
  post_content: "The \"documentation for Rdio's new API\":http://developer.rdio.com/docs/REST/ begins:\n\nbq. It's simple to make requests to *Rdio's REST API*. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. *All method calls are made as POST requests* to *http://api.rdio.com/1/*. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. *The name of the method is passed as the 'method' argument.* _[Emphasis mine.]_\n\nWhat's wrong with this? Well, the first bolded point is immediately contradicted by the ones that follow. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that\n\n# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.\n# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word \"method\" in the HTTP protocol in the first place.\n\nSo it's clear that Rdio's \"REST\" API, like many other recent \"REST\" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.\n\nMaybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than \"HTTP API that's not as hard to use as SOAP\"?\n\n * The hacky DropBox API especially annoys me because there's already a \"perfectly good standardized and widely adopted REST API\":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does."
  post_title: "Dudes, this is so not REST"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "423-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-14 18:04:56"
  post_modified_gmt: "2011-03-15 01:04:56"
  post_content_filtered: ""
  post_parent: 423
  guid: "http://jens.mooseyard.com/2011/03/423-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 428
  post_author: 2
  post_date: "2011-03-14 18:16:31"
  post_date_gmt: "2011-03-15 01:16:31"
  post_content: "The \"documentation for Rdio's new API\":http://developer.rdio.com/docs/REST/ begins:\n\nbq. It's simple to make requests to *Rdio's REST API*. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. *All method calls are made as POST requests* to *http://api.rdio.com/1/*. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. *The name of the method is passed as the 'method' argument.* _[Emphasis mine.]_\n\nWhat's wrong with this? Well, the first bolded point is immediately contradicted by the ones that follow. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that\n\n# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.\n# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word \"method\" in the HTTP protocol in the first place.\n\nSo in a real REST API there would be a URL representing \"my friends\", and a client could GET that URL to retrieve a list of friends, POST to it to add a friend (resulting in a new URL/resource representing that friend), PUT to a friend's URL to update details, and DELETE to that URL to remove the friend relation. Instead, the REST API has \"a couple of dozen ad-hoc verbs\":http://developer.rdio.com/docs/read/rest/Methods including \"addFriend\" and \"removeFriend\". I didn't see one to get a list of friends or get info about a friend, but there is an Rdio-specific \"get\" verb that might work for those things. \"Get\" seems nicely general, but then for some reason there are also _sixteen_ other specific getters ranging from \"getActivityStream\" to \"getTracksInCollection\".\n\nSo it's clear that Rdio's \"REST\" API, like many other recent \"REST\" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.\n\nMaybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than \"HTTP API that's not as hard to use as SOAP\"?\n\n * The hacky DropBox API especially annoys me because there's already a \"perfectly good standardized and widely adopted REST API\":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does."
  post_title: "Dudes, this is so not REST"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "423-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-14 18:16:31"
  post_modified_gmt: "2011-03-15 01:16:31"
  post_content_filtered: ""
  post_parent: 423
  guid: "http://jens.mooseyard.com/2011/03/423-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 429
  post_author: 2
  post_date: "2011-03-14 18:16:33"
  post_date_gmt: "2011-03-15 01:16:33"
  post_content: "The \"documentation for Rdio's new API\":http://developer.rdio.com/docs/REST/ begins:\n\nbq. It's simple to make requests to *Rdio's REST API*. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. *All method calls are made as POST requests* to *http://api.rdio.com/1/*. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. *The name of the method is passed as the 'method' argument.* _[Emphasis mine.]_\n\nWhat's wrong with this? Well, the first bolded point is immediately contradicted by the ones that follow. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that\n\n# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.\n# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word \"method\" in the HTTP protocol in the first place.\n\nSo in a real REST API there would be a URL representing \"my friends\", and a client could GET that URL to retrieve a list of friends, POST to it to add a friend (resulting in a new URL/resource representing that friend), PUT to a friend's URL to update details, and DELETE to that URL to remove the friend relation. Instead, the REST API has \"a couple of dozen ad-hoc verbs\":http://developer.rdio.com/docs/read/rest/Methods including \"addFriend\" and \"removeFriend\". I didn't see one to get a list of friends or get info about a friend, but there is an Rdio-specific \"get\" verb that might work for those things. \"Get\" seems nicely general, but then for some reason there are also _sixteen_ other specific getters ranging from \"getActivityStream\" to \"getTracksInCollection\".\n\nSo it's clear that Rdio's \"REST\" API, like many other recent \"REST\" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.\n\nMaybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than \"HTTP API that's not as hard to use as SOAP\"?\n\n * The hacky DropBox API especially annoys me because there's already a \"perfectly good standardized and widely adopted REST API\":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does."
  post_title: "Dudes, this is so not REST"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "423-revision-6"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-14 18:16:33"
  post_modified_gmt: "2011-03-15 01:16:33"
  post_content_filtered: ""
  post_parent: 423
  guid: "http://jens.mooseyard.com/2011/03/423-revision-6/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 430
  post_author: 2
  post_date: "2011-03-14 18:17:11"
  post_date_gmt: "2011-03-15 01:17:11"
  post_content: "The \"documentation for Rdio's new API\":http://developer.rdio.com/docs/REST/ begins:\n\nbq. It's simple to make requests to *Rdio's REST API*. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. *All method calls are made as POST requests* to *http://api.rdio.com/1/*. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. *The name of the method is passed as the 'method' argument.* _[Emphasis mine.]_\n\nWhat's wrong with this? Well, the first bolded point is immediately contradicted by the ones that follow. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based \"REST\":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that\n\n# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.\n# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word \"method\" in the HTTP protocol in the first place.\n\nSo in a real REST API there would be a URL representing \"my friends\", and a client could GET that URL to retrieve a list of friends, POST to it to add a friend (resulting in a new URL/resource representing that friend), PUT to a friend's URL to update details, and DELETE to that URL to remove the friend relation. Instead, the actual Rdio API has \"a couple of dozen ad-hoc verbs\":http://developer.rdio.com/docs/read/rest/Methods including \"addFriend\" and \"removeFriend\". I didn't see one to get a list of friends or get info about a friend, but there is an Rdio-specific \"get\" verb that might work for those things. \"Get\" seems nicely general, but then for some reason there are also _sixteen_ other specific getters ranging from \"getActivityStream\" to \"getTracksInCollection\".\n\nSo it's clear that Rdio's \"REST\" API, like many other recent \"REST\" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.\n\nMaybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than \"HTTP API that's not as hard to use as SOAP\"?\n\n * The hacky DropBox API especially annoys me because there's already a \"perfectly good standardized and widely adopted REST API\":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does."
  post_title: "Dudes, this is so not REST"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "423-revision-7"
  to_ping: ""
  pinged: ""
  post_modified: "2011-03-14 18:17:11"
  post_modified_gmt: "2011-03-15 01:17:11"
  post_content_filtered: ""
  post_parent: 423
  guid: "http://jens.mooseyard.com/2011/03/423-revision-7/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 431
  post_author: 2
  post_date: "2011-04-17 13:19:10"
  post_date_gmt: "2011-04-17 20:19:10"
  post_content: "I've been making little updates to the \"*MYCrypto*\":https://bitbucket.org/snej/mycrypto library for \"a few months\":https://bitbucket.org/snej/mycrypto/overview, and after the latest batch I did some housekeeping -- fixing iOS and 64-bit build errors, updating the docs -- and decided to dignify them with a new version number, 0.5.\n\nNotable improvements:\n\n* More certificate I/O functionality. You can now import and export PKCS12 (.p12) files, which are encrypted archives that contain a private key as well as its cert.\n* More certificate trust validation APIs, including read/write access to user trust settings.\n* Access to X.509 cert extensions like key-usage.\n* Can verify signatures that use algorithms other than SHA-1, and parse certs that use such algorithms.\n* MYMockKey, a testing fixture that lets you test code that uses digital signatures without having to generate or use real key-pairs.\n\nIf you infer from this list that I've been working on an app that manages X.509 certs, I won't deny it :) Maybe I'll have more to say about that soon."
  post_title: "MYCrypto update (0.5)"
  post_excerpt: "I've been making little updates to the \"MYCrypto\":https://bitbucket.org/snej/mycrypto library for \"a few months\":https://bitbucket.org/snej/mycrypto/overview, and after the latest batch I did some housekeeping -- fixing iOS and 64-bit build errors, updating the docs -- and decided to dignify them with a new version number, 0.5..."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "mycrypto-update-0-5"
  to_ping: ""
  pinged: ""
  post_modified: "2011-05-16 09:44:00"
  post_modified_gmt: "2011-05-16 16:44:00"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=431"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 432
  post_author: 2
  post_date: "2011-04-17 13:19:10"
  post_date_gmt: "2011-04-17 20:19:10"
  post_content: "I've been making little updates to the \"*MYCrypto*\":https://bitbucket.org/snej/mycrypto library for \"a few months\":https://bitbucket.org/snej/mycrypto/overview, and after the latest batch I did some housekeeping -- fixing iOS and 64-bit build errors, updating the docs -- and decided to dignify them with a new version number, 0.5.\n\nNotable improvements:\n\n* More certificate I/O functionality. You can now import and export PKCS12 (.p12) files, which are encrypted archives that contain a private key as well as its cert.\n* More certificate trust validation APIs, including read/write access to user trust settings.\n* Access to X.509 cert extensions like key-usage.\n* Can verify signatures that use algorithms other than SHA-1, and parse certs that use such algorithms.\n* MYMockKey, a testing fixture that lets you test code that uses digital signatures without having to generate or use real key-pairs.\n\nIf you infer from this list that I've been working on an app that manages X.509 certs, I won't deny it :) Maybe I'll have more to say about that soon."
  post_title: "MYCrypto update (0.5)"
  post_excerpt: "I've been making little updates to the \"MYCrypto\":https://bitbucket.org/snej/mycrypto library for \"a few months:https://bitbucket.org/snej/mycrypto/overview, and after the latest batch I did some housekeeping -- fixing iOS and 64-bit build errors, updating the docs -- and decided to dignify them with a new version number, 0.5..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "431-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-04-17 13:19:10"
  post_modified_gmt: "2011-04-17 20:19:10"
  post_content_filtered: ""
  post_parent: 431
  guid: "http://jens.mooseyard.com/2011/04/431-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 433
  post_author: 2
  post_date: "2011-05-16 09:39:51"
  post_date_gmt: "2011-05-16 16:39:51"
  post_content: "I've just released a new open-source project, a small one -- \"Fudge-Cpp\":https://bitbucket.org/snej/fudge-cpp, a fast C++ library for reading and writing \"Fudge\":http://fudgemsg.org/ messages.\n\nI hadn't heard of Fudge either, till a few weeks ago, but it's a type of thing that's always interested me: a generic structured binary data format. A quick elevator pitch would be \"it's sorta like JSON, except more compact and faster to parse\". (It's also sorta like Mac property-lists, YAML, etc.) So, it lets you turn collections of scalars, strings, arrays and dictionaries into a \"standardized blob of data\":http://fudgemsg.org/display/FDG/Encoding+Specification that can be sent over a network or stored on disk or whatever.\n\nFrom the Fudge website:\n\n_\"Fudge is primarily useful in situations where you have:_\n\n* _Data exchanging between nodes in a distributed system; where_\n* _You want to be able to do meaningful work with data without knowing at compile time the precise message format; and_\n* _Performance and message size are important; or_\n* _A requirement to encode data and translate between efficient binary encodings, and more accepted text encodings (XML, JSON) depending on the communications channel.\"_\n\nThe obvious advantage of a binary format for this is that it's faster to parse. Instead of having to tokenize the input and walk through it counting braces and commas, and converting sequences of digits into numbers, you just read big-endian numbers from the stream and interpret them as types and byte-counts. This can also make the data smaller, if the format is careful to use the smallest number of bytes to represent a number (which Fudge does). It's especially compact for messages containing payloads of binary data like images, audio, or digital signatures, since those blobs don't have to be converted to Base64 (which is 25% larger.)\n\nA more subtle advantage is that the library can use less memory. In fact, Fudge-Cpp basically _allocates no memory at all from the heap_. How does it manage this? When the library returns the caller an object representing a data value from the parsed message (a scalar, string, array, etc.) it doesn't allocate that object on the heap. Instead, it just returns a pointer to where that value is stored in the binary message itself. This really is a valid C++ object pointer; it's just that the object's members have the exact same layout as the corresponding Fudge data.\n\n(Now, there is a bit of impedance mismatch that adds overhead to accessing the data this way. For one thing, on a little-endian CPU every multi-byte numeric value will need to be byte-swapped when accessed. And random access to dictionaries and object arrays is O(N) since they are basically linked lists. But the overhead is low.)\n\nThis library isn't a world-changing project; it was more of a fun diversion for me over a few weekends. I've done this sort of thing before -- \"Ottoman\":http://bitbucket.org/snej/ottoman uses similar memory-saving pointer tricks, and AEGizmos was literally the first code I ever wrote at Apple back in 1991 -- and it's always fun to twiddle bits this way."
  post_title: "Fudge"
  post_excerpt: "I've just released a new open-source project, a small one -- \"Fudge-Cpp\":https://bitbucket.org/snej/fudge-cpp, a fast C++ library for reading and writing \"Fudge\":http://fudgemsg.org/ messages.\n\nI hadn't heard of Fudge either, till a few weeks ago, but it's a type of thing that's always interested me: a generic structured binary data format. A quick elevator pitch would be \"it's sorta like JSON, except more compact and faster to parse\". (It's also sorta like Mac property-lists, YAML, etc.) So, it lets you turn collections of scalars, strings, arrays and dictionaries into a \"standardized blob of data\":http://fudgemsg.org/display/FDG/Encoding+Specification that can be sent over a network or stored on disk or whatever..."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "fudge"
  to_ping: ""
  pinged: ""
  post_modified: "2011-05-16 09:43:06"
  post_modified_gmt: "2011-05-16 16:43:06"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=433"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 434
  post_author: 2
  post_date: "2011-05-16 09:39:51"
  post_date_gmt: "2011-05-16 16:39:51"
  post_content: "I've just released a new open-source project, a small one -- \"Fudge-Cpp\":https://bitbucket.org/snej/fudge-cpp, a fast C++ library for reading and writing \"Fudge\":http://fudgemsg.org/ messages.\n\nI hadn't heard of Fudge either, till a few weeks ago, but it's a type of thing that's always interested me: a generic structured binary data format. A quick elevator pitch would be \"it's sorta like JSON, except more compact and faster to parse\". (It's also sorta like Mac property-lists, YAML, etc.) So, it lets you turn collections of scalars, strings, arrays and dictionaries into a \"standardized blob of data\":http://fudgemsg.org/display/FDG/Encoding+Specification that can be sent over a network or stored on disk or whatever.\n\nFrom the Fudge website:\n\n_\"Fudge is primarily useful in situations where you have:_\n\n* _Data exchanging between nodes in a distributed system; where_\n* _You want to be able to do meaningful work with data without knowing at compile time the precise message format; and_\n* _Performance and message size are important; or_\n* _A requirement to encode data and translate between efficient binary encodings, and more accepted text encodings (XML, JSON) depending on the communications channel.\"_\n\nThe obvious advantage of a binary format for this is that it's faster to parse. Instead of having to tokenize the input and walk through it counting braces and commas, and converting sequences of digits into numbers, you just read big-endian numbers from the stream and interpret them as types and byte-counts. This can also make the data smaller, if the format is careful to use the smallest number of bytes to represent a number (which Fudge does). It's especially compact for messages containing payloads of binary data like images, audio, or digital signatures, since those blobs don't have to be converted to Base64 (which is 25% larger.)\n\nA more subtle advantage is that the library can use less memory. In fact, Fudge-Cpp basically _allocates no memory at all from the heap_. How does it manage this? When the library returns the caller an object representing a data value from the parsed message (a scalar, string, array, etc.) it doesn't allocate that object on the heap. Instead, it just returns a pointer to where that value is stored in the binary message itself. This really is a valid C++ object pointer; it's just that the object's members have the exact same layout as the corresponding Fudge data.\n\n(Now, there is a bit of impedance mismatch that adds overhead to accessing the data this way. For one thing, on a little-endian CPU every multi-byte numeric value will need to be byte-swapped when accessed. And random access to dictionaries and object arrays is O(N) since they are basically linked lists. But the overhead is low.)\n\nThis library isn't a world-changing project; it was more of a fun diversion for me over a few weekends. I've done this sort of thing before -- \"Ottoman\":http://bitbucket.org/snej/ottoman uses similar memory-saving pointer tricks, and AEGizmos was literally the first code I ever wrote at Apple back in 1991 -- and it's always fun to twiddle bits this way."
  post_title: "Fudge"
  post_excerpt: "I've just released a new open-source project, a small one -- \"Fudge-Cpp\":https://bitbucket.org/snej/fudge-cpp, a fast C++ library for reading and writing \"Fudge\":http://fudgemsg.org/ messages.\n\nI hadn't heard of Fudge either, till a few weeks ago, but it's a type of thing that's always interested me: a generic structured binary data format. A quick elevator pitch would be \"it's sorta like JSON, except more compact and faster to parse\". (It's also sorta like Mac property-lists, YAML, etc.) So, it lets you turn collections of scalars, strings, arrays and dictionaries into a \"standardized blob of data\":http://fudgemsg.org/display/FDG/Encoding+Specification that can be sent over a network or stored on disk or whatever."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "433-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-05-16 09:39:51"
  post_modified_gmt: "2011-05-16 16:39:51"
  post_content_filtered: ""
  post_parent: 433
  guid: "http://jens.mooseyard.com/2011/05/433-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 435
  post_author: 2
  post_date: "2011-05-16 09:39:53"
  post_date_gmt: "2011-05-16 16:39:53"
  post_content: "I've just released a new open-source project, a small one -- \"Fudge-Cpp\":https://bitbucket.org/snej/fudge-cpp, a fast C++ library for reading and writing \"Fudge\":http://fudgemsg.org/ messages.\n\nI hadn't heard of Fudge either, till a few weeks ago, but it's a type of thing that's always interested me: a generic structured binary data format. A quick elevator pitch would be \"it's sorta like JSON, except more compact and faster to parse\". (It's also sorta like Mac property-lists, YAML, etc.) So, it lets you turn collections of scalars, strings, arrays and dictionaries into a \"standardized blob of data\":http://fudgemsg.org/display/FDG/Encoding+Specification that can be sent over a network or stored on disk or whatever.\n\nFrom the Fudge website:\n\n_\"Fudge is primarily useful in situations where you have:_\n\n* _Data exchanging between nodes in a distributed system; where_\n* _You want to be able to do meaningful work with data without knowing at compile time the precise message format; and_\n* _Performance and message size are important; or_\n* _A requirement to encode data and translate between efficient binary encodings, and more accepted text encodings (XML, JSON) depending on the communications channel.\"_\n\nThe obvious advantage of a binary format for this is that it's faster to parse. Instead of having to tokenize the input and walk through it counting braces and commas, and converting sequences of digits into numbers, you just read big-endian numbers from the stream and interpret them as types and byte-counts. This can also make the data smaller, if the format is careful to use the smallest number of bytes to represent a number (which Fudge does). It's especially compact for messages containing payloads of binary data like images, audio, or digital signatures, since those blobs don't have to be converted to Base64 (which is 25% larger.)\n\nA more subtle advantage is that the library can use less memory. In fact, Fudge-Cpp basically _allocates no memory at all from the heap_. How does it manage this? When the library returns the caller an object representing a data value from the parsed message (a scalar, string, array, etc.) it doesn't allocate that object on the heap. Instead, it just returns a pointer to where that value is stored in the binary message itself. This really is a valid C++ object pointer; it's just that the object's members have the exact same layout as the corresponding Fudge data.\n\n(Now, there is a bit of impedance mismatch that adds overhead to accessing the data this way. For one thing, on a little-endian CPU every multi-byte numeric value will need to be byte-swapped when accessed. And random access to dictionaries and object arrays is O(N) since they are basically linked lists. But the overhead is low.)\n\nThis library isn't a world-changing project; it was more of a fun diversion for me over a few weekends. I've done this sort of thing before -- \"Ottoman\":http://bitbucket.org/snej/ottoman uses similar memory-saving pointer tricks, and AEGizmos was literally the first code I ever wrote at Apple back in 1991 -- and it's always fun to twiddle bits this way."
  post_title: "Fudge"
  post_excerpt: "I've just released a new open-source project, a small one -- \"Fudge-Cpp\":https://bitbucket.org/snej/fudge-cpp, a fast C++ library for reading and writing \"Fudge\":http://fudgemsg.org/ messages.\n\nI hadn't heard of Fudge either, till a few weeks ago, but it's a type of thing that's always interested me: a generic structured binary data format. A quick elevator pitch would be \"it's sorta like JSON, except more compact and faster to parse\". (It's also sorta like Mac property-lists, YAML, etc.) So, it lets you turn collections of scalars, strings, arrays and dictionaries into a \"standardized blob of data\":http://fudgemsg.org/display/FDG/Encoding+Specification that can be sent over a network or stored on disk or whatever."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "433-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-05-16 09:39:53"
  post_modified_gmt: "2011-05-16 16:39:53"
  post_content_filtered: ""
  post_parent: 433
  guid: "http://jens.mooseyard.com/2011/05/433-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 436
  post_author: 2
  post_date: "2011-05-16 09:43:05"
  post_date_gmt: "2011-05-16 16:43:05"
  post_content: "I've just released a new open-source project, a small one -- \"Fudge-Cpp\":https://bitbucket.org/snej/fudge-cpp, a fast C++ library for reading and writing \"Fudge\":http://fudgemsg.org/ messages.\n\nI hadn't heard of Fudge either, till a few weeks ago, but it's a type of thing that's always interested me: a generic structured binary data format. A quick elevator pitch would be \"it's sorta like JSON, except more compact and faster to parse\". (It's also sorta like Mac property-lists, YAML, etc.) So, it lets you turn collections of scalars, strings, arrays and dictionaries into a \"standardized blob of data\":http://fudgemsg.org/display/FDG/Encoding+Specification that can be sent over a network or stored on disk or whatever.\n\nFrom the Fudge website:\n\n_\"Fudge is primarily useful in situations where you have:_\n\n* _Data exchanging between nodes in a distributed system; where_\n* _You want to be able to do meaningful work with data without knowing at compile time the precise message format; and_\n* _Performance and message size are important; or_\n* _A requirement to encode data and translate between efficient binary encodings, and more accepted text encodings (XML, JSON) depending on the communications channel.\"_\n\nThe obvious advantage of a binary format for this is that it's faster to parse. Instead of having to tokenize the input and walk through it counting braces and commas, and converting sequences of digits into numbers, you just read big-endian numbers from the stream and interpret them as types and byte-counts. This can also make the data smaller, if the format is careful to use the smallest number of bytes to represent a number (which Fudge does). It's especially compact for messages containing payloads of binary data like images, audio, or digital signatures, since those blobs don't have to be converted to Base64 (which is 25% larger.)\n\nA more subtle advantage is that the library can use less memory. In fact, Fudge-Cpp basically _allocates no memory at all from the heap_. How does it manage this? When the library returns the caller an object representing a data value from the parsed message (a scalar, string, array, etc.) it doesn't allocate that object on the heap. Instead, it just returns a pointer to where that value is stored in the binary message itself. This really is a valid C++ object pointer; it's just that the object's members have the exact same layout as the corresponding Fudge data.\n\n(Now, there is a bit of impedance mismatch that adds overhead to accessing the data this way. For one thing, on a little-endian CPU every multi-byte numeric value will need to be byte-swapped when accessed. And random access to dictionaries and object arrays is O(N) since they are basically linked lists. But the overhead is low.)\n\nThis library isn't a world-changing project; it was more of a fun diversion for me over a few weekends. I've done this sort of thing before -- \"Ottoman\":http://bitbucket.org/snej/ottoman uses similar memory-saving pointer tricks, and AEGizmos was literally the first code I ever wrote at Apple back in 1991 -- and it's always fun to twiddle bits this way."
  post_title: "Fudge"
  post_excerpt: "I've just released a new open-source project, a small one -- \"Fudge-Cpp\":https://bitbucket.org/snej/fudge-cpp, a fast C++ library for reading and writing \"Fudge\":http://fudgemsg.org/ messages.\n\nI hadn't heard of Fudge either, till a few weeks ago, but it's a type of thing that's always interested me: a generic structured binary data format. A quick elevator pitch would be \"it's sorta like JSON, except more compact and faster to parse\". (It's also sorta like Mac property-lists, YAML, etc.) So, it lets you turn collections of scalars, strings, arrays and dictionaries into a \"standardized blob of data\":http://fudgemsg.org/display/FDG/Encoding+Specification that can be sent over a network or stored on disk or whatever..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "433-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-05-16 09:43:05"
  post_modified_gmt: "2011-05-16 16:43:05"
  post_content_filtered: ""
  post_parent: 433
  guid: "http://jens.mooseyard.com/2011/05/433-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 437
  post_author: 2
  post_date: "2011-04-17 13:19:12"
  post_date_gmt: "2011-04-17 20:19:12"
  post_content: "I've been making little updates to the \"*MYCrypto*\":https://bitbucket.org/snej/mycrypto library for \"a few months\":https://bitbucket.org/snej/mycrypto/overview, and after the latest batch I did some housekeeping -- fixing iOS and 64-bit build errors, updating the docs -- and decided to dignify them with a new version number, 0.5.\n\nNotable improvements:\n\n* More certificate I/O functionality. You can now import and export PKCS12 (.p12) files, which are encrypted archives that contain a private key as well as its cert.\n* More certificate trust validation APIs, including read/write access to user trust settings.\n* Access to X.509 cert extensions like key-usage.\n* Can verify signatures that use algorithms other than SHA-1, and parse certs that use such algorithms.\n* MYMockKey, a testing fixture that lets you test code that uses digital signatures without having to generate or use real key-pairs.\n\nIf you infer from this list that I've been working on an app that manages X.509 certs, I won't deny it :) Maybe I'll have more to say about that soon."
  post_title: "MYCrypto update (0.5)"
  post_excerpt: "I've been making little updates to the \"MYCrypto\":https://bitbucket.org/snej/mycrypto library for \"a few months:https://bitbucket.org/snej/mycrypto/overview, and after the latest batch I did some housekeeping -- fixing iOS and 64-bit build errors, updating the docs -- and decided to dignify them with a new version number, 0.5..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "431-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-04-17 13:19:12"
  post_modified_gmt: "2011-04-17 20:19:12"
  post_content_filtered: ""
  post_parent: 431
  guid: "http://jens.mooseyard.com/2011/04/431-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 438
  post_author: 2
  post_date: "2011-05-16 09:43:58"
  post_date_gmt: "2011-05-16 16:43:58"
  post_content: "I've been making little updates to the \"*MYCrypto*\":https://bitbucket.org/snej/mycrypto library for \"a few months\":https://bitbucket.org/snej/mycrypto/overview, and after the latest batch I did some housekeeping -- fixing iOS and 64-bit build errors, updating the docs -- and decided to dignify them with a new version number, 0.5.\n\nNotable improvements:\n\n* More certificate I/O functionality. You can now import and export PKCS12 (.p12) files, which are encrypted archives that contain a private key as well as its cert.\n* More certificate trust validation APIs, including read/write access to user trust settings.\n* Access to X.509 cert extensions like key-usage.\n* Can verify signatures that use algorithms other than SHA-1, and parse certs that use such algorithms.\n* MYMockKey, a testing fixture that lets you test code that uses digital signatures without having to generate or use real key-pairs.\n\nIf you infer from this list that I've been working on an app that manages X.509 certs, I won't deny it :) Maybe I'll have more to say about that soon."
  post_title: "MYCrypto update (0.5)"
  post_excerpt: "I've been making little updates to the \"MYCrypto\":https://bitbucket.org/snej/mycrypto library for \"a few months\":https://bitbucket.org/snej/mycrypto/overview, and after the latest batch I did some housekeeping -- fixing iOS and 64-bit build errors, updating the docs -- and decided to dignify them with a new version number, 0.5..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "431-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-05-16 09:43:58"
  post_modified_gmt: "2011-05-16 16:43:58"
  post_content_filtered: ""
  post_parent: 431
  guid: "http://jens.mooseyard.com/2011/05/431-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 439
  post_author: 2
  post_date: "2011-08-08 16:31:25"
  post_date_gmt: "2011-08-08 23:31:25"
  post_content: "August in Los Angeles was bone-dry and dusty, but he left it behind in the parking lot as he made his way through the series of three doors, heavy and white, and into the frozen refuge of the ice bar. He was known, there, and the hostess greeted him with a sealskin robe, slipped over his shoulders before he had time to start shivering. The tip of her elegant nose felt icy against his own.\n\nThere was room for one more at the bar, and at a nod from the chef he took the seat gratefully. One often had to wait, stamping feet to ward off the cold. The chef slid the _amuse-bouche_ before him as he unfolded his napkin, and it was exquisite in appearance: a translucent _carpaccio_ of walrus blubber sprinkled with snowflakes. The snowflakes were not unique, in fact they came in precisely two shapes, one sprinkled on the left side of the dish, the other on the right. They made not-quite-imperceptibly different crunches as he ate them. It was touches like this that had made the chefâ€™s name when he was but a young man just arrived from Nunavut.\n\nFor his first course the customer ordered a cube, thick and meaty. It was peasant fare, but here elevated to fine cuisine. The chefâ€™s assistants trained for three years in the rituals of icemaking. They knew intuitively what temperature of water to use, how to swirl it through the fourteen squares of the traditional whalebone tray, how to tap the sides to dislodge bubbles. One of those assistants now brought the chef a steaming tray, fresh from the freezer, which the master raised overhead and brought down with a single practiced motion onto the stone slab before him, then raised slowly to reveal the unbroken cubes. He then sorted through the cubes with the point of his obsidian knife, whisking the thirteen imperfect ones onto the floor. The remaining one he slid onto a plate and into the toaster oven behind him.\n\nTwenty-five seconds in the oven grilled the outer layer of the cube to perfection, liquefying a thin sheen of pure water across its surface without defacing the deep-frozen insides with cracks. The customer took it in one bite, seasoning it only with a tiny pinch of sea salt, then sucking appreciatively. (He never chewed, of course: you might hear starlets and pop idols crunching their ice at trendy bars on Melrose, but here such behavior would get you ejected permanently.) The ice in his mouth was frictionless, spinning with every slight touch of his tongue, endlessly reconfiguring itself into new shapes as it melted in his heat. The meltwater had the slight mineral tang of true cube-ice, reflecting both its origin in a remote New Zealand spring and the subtle influence of the seasoned whalebone tray, infused during its months-long deep freeze.\n\nWhile savoring the final drops, he studied the chalkboard for the daily specials. He was startled to see _qainngittunga_ on the list, as this delicacy was only very rarely found, and its availability in summer was practically unheard-of south of the 49th Parallel. Despite the ruinous expense, as a connoisseur he had no choice but to order it. He was not sure he had pronounced the name quite correctly, but merely ordering this challenging dish was enough to ensure the respect of the staff.\n\nWith a single grunt of approval the chef knelt and reached into the hidden freezer beneath the bar. His thickly-gloved hands reappeared cradling a cylinder of ice three inches in diameter and a foot long, which he placed on a small polar-bear rug placed on the counter by an assistant. The ice was a pure, intense blue, mostly clear but punctuated by thin dark layers. It was a core sample that had been painstakingly extracted from thousands of meters below the surface of the Greenland ice sheet. (Such drilling is forbidden by international treaty, but there are limited exemptions for scientific research, and some of the resulting cores do find their way out of geology laboratories and into restaurants.)\n\nUsing a small handsaw with a diamond-studded wire blade, the chef quickly sliced off a section measuring a perfectly even three millimeters thick and gently lowered it onto a plate of red pumice, then handed it to the customer. He did not garnish it, nor did the customer apply a grain of salt; nothing was needed. The customer merely raised the plate to his mouth and slid the disc onto his waiting tongue.\n\nThe experience was indescribable, transcendent, as it had been once before on that memorable evening in Svalbard. His tongue was covered by the freshly-cut side of the ice (this was essential), which had been sealed inside the glacier, untouched, for a hundred thousand years. Through those ages the intense pressure and cold had distilled every essence of the microscopic bits of dust, sand and pollen that had drifted onto the surface so long ago. He tasted a world where mammoths roamed, and saber-toothed cats. He tasted the smoke of his ancestorsâ€™ cave fires, the ochre with which they painted the tales of their hunts.\n\nAfter a long interval he swallowed. Nothing was left now; the ineffable vapors of impossibly distant pasts were already consumed. Before, in Svalbard, Lena was with him and the sensations had lived on in echoed reflections in each othersâ€™ eyes â€” _I felt it, did you feel it too?_ â€” but that was the past, and on this day he was alone. Two years ago was no less remote than the Ice Age, and Lena was no less dead than the Cro-Magnon cave painters.\n\nAfter a dish such as that, there was only one thing left to order. He gestured, holding up nine fingers, and the chef bowed deeply in response. A moment later a waitress appeared with a small brass tube the size of a rifle shell. She unscrewed the end, and tipped out a small crystal onto a silver dish. The customer gravely accepted the dish, and she bowed and retreated. In a reciprocal gesture he bowed his own head and gently lowered the tip of his tongue to the dish. As the water of his saliva made contact with the entropically-enhanced synthetic crystal packing of the water molecules in the ice<sub>9</sub> â€” an arrangement not found in nature, stable enough to remain solid at room temperature â€” its molecules too attached to the surface and froze, leading to a wave of crystallization that in two seconds had swept through his entire body and frozen it solid. \n\nThe staff quickly folded him into his voluminous sealskin robe, lashed it tightly shut with rawhide, and carried the stiff bundle into a remote corner of the basement. (But not before removing his wallet with tongs; the bill he left behind was quite considerable.)"
  post_title: "At The Ice Bar"
  post_excerpt: "August in Los Angeles was bone-dry and dusty, but he left it behind in the parking lot as he made his way through the series of three doors, heavy and white, and into the frozen refuge of the ice bar. He was known, there, and the hostess greeted him with a sealskin robe, slipped over his shoulders before he had time to start shivering. The tip of her elegant nose felt icy against his own.\n\nThere was room for one more at the bar, and at a nod from the chef he took the seat gratefully. One often had to wait, stamping feet to ward off the cold. The chef slid the _amuse-bouche_ before him as he unfolded his napkin, and it was exquisite in appearance: a translucent _carpaccio_ of walrus blubber sprinkled with snowflakes. The snowflakes were not unique, in fact they came in precisely two shapes, one sprinkled on the left side of the dish, the other on the right. They made not-quite-imperceptibly different crunches as he ate them. It was touches like this that had made the chefâ€™s name when he was but a young man just arrived from Nunavut..."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "at-the-ice-bar"
  to_ping: ""
  pinged: ""
  post_modified: "2011-08-08 16:31:26"
  post_modified_gmt: "2011-08-08 23:31:26"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=439"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 2
-
  ID: 440
  post_author: 2
  post_date: "2011-08-08 16:31:25"
  post_date_gmt: "2011-08-08 23:31:25"
  post_content: "August in Los Angeles was bone-dry and dusty, but he left it behind in the parking lot as he made his way through the series of three doors, heavy and white, and into the frozen refuge of the ice bar. He was known, there, and the hostess greeted him with a sealskin robe, slipped over his shoulders before he had time to start shivering. The tip of her elegant nose felt icy against his own.\n\nThere was room for one more at the bar, and at a nod from the chef he took the seat gratefully. One often had to wait, stamping feet to ward off the cold. The chef slid the _amuse-bouche_ before him as he unfolded his napkin, and it was exquisite in appearance: a translucent _carpaccio_ of walrus blubber sprinkled with snowflakes. The snowflakes were not unique, in fact they came in precisely two shapes, one sprinkled on the left side of the dish, the other on the right. They made not-quite-imperceptibly different crunches as he ate them. It was touches like this that had made the chefâ€™s name when he was but a young man just arrived from Nunavut.\n\nFor his first course the customer ordered a cube, thick and meaty. It was peasant fare, but here elevated to fine cuisine. The chefâ€™s assistants trained for three years in the rituals of icemaking. They knew intuitively what temperature of water to use, how to swirl it through the fourteen squares of the traditional whalebone tray, how to tap the sides to dislodge bubbles. One of those assistants now brought the chef a steaming tray, fresh from the freezer, which the master raised overhead and brought down with a single practiced motion onto the stone slab before him, then raised slowly to reveal the unbroken cubes. He then sorted through the cubes with the point of his obsidian knife, whisking the thirteen imperfect ones onto the floor. The remaining one he slid onto a plate and into the toaster oven behind him.\n\nTwenty-five seconds in the oven grilled the outer layer of the cube to perfection, liquefying a thin sheen of pure water across its surface without defacing the deep-frozen insides with cracks. The customer took it in one bite, seasoning it only with a tiny pinch of sea salt, then sucking appreciatively. (He never chewed, of course: you might hear starlets and pop idols crunching their ice at trendy bars on Melrose, but here such behavior would get you ejected permanently.) The ice in his mouth was frictionless, spinning with every slight touch of his tongue, endlessly reconfiguring itself into new shapes as it melted in his heat. The meltwater had the slight mineral tang of true cube-ice, reflecting both its origin in a remote New Zealand spring and the subtle influence of the seasoned whalebone tray, infused during its months-long deep freeze.\n\nWhile savoring the final drops, he studied the chalkboard for the daily specials. He was startled to see _qainngittunga_ on the list, as this delicacy was only very rarely found, and its availability in summer was practically unheard-of south of the 49th Parallel. Despite the ruinous expense, as a connoisseur he had no choice but to order it. He was not sure he had pronounced the name quite correctly, but merely ordering this challenging dish was enough to ensure the respect of the staff.\n\nWith a single grunt of approval the chef knelt and reached into the hidden freezer beneath the bar. His thickly-gloved hands reappeared cradling a cylinder of ice three inches in diameter and a foot long, which he placed on a small polar-bear rug placed on the counter by an assistant. The ice was a pure, intense blue, mostly clear but punctuated by thin dark layers. It was a core sample that had been painstakingly extracted from thousands of meters below the surface of the Greenland ice sheet. (Such drilling is forbidden by international treaty, but there are limited exemptions for scientific research, and some of the resulting cores do find their way out of geology laboratories and into restaurants.)\n\nUsing a small handsaw with a diamond-studded wire blade, the chef quickly sliced off a section measuring a perfectly even three millimeters thick and gently lowered it onto a plate of red pumice, then handed it to the customer. He did not garnish it, nor did the customer apply a grain of salt; nothing was needed. The customer merely raised the plate to his mouth and slid the disc onto his waiting tongue.\n\nThe experience was indescribable, transcendent, as it had been once before on that memorable evening in Svalbard. His tongue was covered by the freshly-cut side of the ice (this was essential), which had been sealed inside the glacier, untouched, for a hundred thousand years. Through those ages the intense pressure and cold had distilled every essence of the microscopic bits of dust, sand and pollen that had drifted onto the surface so long ago. He tasted a world where mammoths roamed, and saber-toothed cats. He tasted the smoke of his ancestorsâ€™ cave fires, the ochre with which they painted the tales of their hunts.\n\nAfter a long interval he swallowed. Nothing was left now; the ineffable vapors of impossibly distant pasts were already consumed. Before, in Svalbard, Lena was with him and the sensations had lived on in echoed reflections in each othersâ€™ eyes â€” _I felt it, did you feel it too?_ â€” but that was the past, and on this day he was alone. Two years ago was no less remote than the Ice Age, and Lena was no less dead than the Cro-Magnon cave painters.\n\nAfter a dish such as that, there was only one thing left to order. He gestured, holding up nine fingers, and the chef bowed deeply in response. A moment later a waitress appeared with a small brass tube the size of a rifle shell. She unscrewed the end, and tipped out a small crystal onto a silver dish. The customer gravely accepted the dish, and she bowed and retreated. In a reciprocal gesture he bowed his own head and gently lowered the tip of his tongue to the dish. As the water of his saliva made contact with the entropically-enhanced synthetic crystal packing of the water molecules in the ice<sub>9</sub> â€” an arrangement not found in nature, stable enough to remain solid at room temperature â€” its molecules too attached to the surface and froze, leading to a wave of crystallization that in two seconds had swept through his entire body and frozen it solid. \n\nThe staff quickly folded him into his voluminous sealskin robe, lashed it tightly shut with rawhide, and carried the stiff bundle into a remote corner of the basement. (But not before removing his wallet with tongs; the bill he left behind was quite considerable.)"
  post_title: "At The Ice Bar"
  post_excerpt: "August in Los Angeles was bone-dry and dusty, but he left it behind in the parking lot as he made his way through the series of three doors, heavy and white, and into the frozen refuge of the ice bar. He was known, there, and the hostess greeted him with a sealskin robe, slipped over his shoulders before he had time to start shivering. The tip of her elegant nose felt icy against his own.\n\nThere was room for one more at the bar, and at a nod from the chef he took the seat gratefully. One often had to wait, stamping feet to ward off the cold. The chef slid the _amuse-bouche_ before him as he unfolded his napkin, and it was exquisite in appearance: a translucent _carpaccio_ of walrus blubber sprinkled with snowflakes. The snowflakes were not unique, in fact they came in precisely two shapes, one sprinkled on the left side of the dish, the other on the right. They made not-quite-imperceptibly different crunches as he ate them. It was touches like this that had made the chefâ€™s name when he was but a young man just arrived from Nunavut..."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "439-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-08-08 16:31:25"
  post_modified_gmt: "2011-08-08 23:31:25"
  post_content_filtered: ""
  post_parent: 439
  guid: "http://jens.mooseyard.com/2011/08/439-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 441
  post_author: 2
  post_date: "2011-08-10 09:58:24"
  post_date_gmt: "2011-08-10 16:58:24"
  post_content: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion.\n\nbq. On the heels of its inaugural CouchConf developer conference, held July 29 in San Francisco with more than 300 attendees from around the world, Couchbase announced a Series C round of financing, bringing the companyâ€™s total funding to $30 million.\n\n\"CouchConf\":http://www.couchbase.com/couchconf was a great time. I really enjoyed meeting developers, and learning more about Couchbase from the other presentations. The slides from my own talk on Couchbase Mobile for iOS are \"now online\":hhttp://www.slideshare.net/Couchbase/couchconfsfdevelopingnativeiosappswithcouchbasemobile (minus the gratuitous Keynote transitions) if you'd like to take a look."
  post_title: "Couchbase news (and my preso)"
  post_excerpt: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion."
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "couchbase-news-and-my-press"
  to_ping: ""
  pinged: ""
  post_modified: "2011-08-10 09:59:15"
  post_modified_gmt: "2011-08-10 16:59:15"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=441"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 3
-
  ID: 442
  post_author: 2
  post_date: "2011-08-10 09:58:24"
  post_date_gmt: "2011-08-10 16:58:24"
  post_content: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion.\n\nbq. On the heels of its inaugural CouchConf developer conference, held July 29 in San Francisco with more than 300 attendees from around the world, Couchbase announced a Series C round of financing, bringing the companyâ€™s total funding to $30 million.\n\n\"CouchConf\":http://www.couchbase.com/couchconf (on the 29th) was a great time. I really enjoyed meeting developers, and learning more about Couchbase from the other presentations. The slides from my own talk on Couchbase Mobile for iOS are \"now online\":hhttp://www.slideshare.net/Couchbase/couchconfsfdevelopingnativeiosappswithcouchbasemobile (minus the gratuitous Keynote transitions) if you'd like to take a look."
  post_title: "Couchbase news (and my press)"
  post_excerpt: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "441-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-08-10 09:58:24"
  post_modified_gmt: "2011-08-10 16:58:24"
  post_content_filtered: ""
  post_parent: 441
  guid: "http://jens.mooseyard.com/2011/08/441-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 443
  post_author: 2
  post_date: "2011-08-10 09:58:26"
  post_date_gmt: "2011-08-10 16:58:26"
  post_content: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion.\n\nbq. On the heels of its inaugural CouchConf developer conference, held July 29 in San Francisco with more than 300 attendees from around the world, Couchbase announced a Series C round of financing, bringing the companyâ€™s total funding to $30 million.\n\n\"CouchConf\":http://www.couchbase.com/couchconf (on the 29th) was a great time. I really enjoyed meeting developers, and learning more about Couchbase from the other presentations. The slides from my own talk on Couchbase Mobile for iOS are \"now online\":hhttp://www.slideshare.net/Couchbase/couchconfsfdevelopingnativeiosappswithcouchbasemobile (minus the gratuitous Keynote transitions) if you'd like to take a look."
  post_title: "Couchbase news (and my press)"
  post_excerpt: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "441-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-08-10 09:58:26"
  post_modified_gmt: "2011-08-10 16:58:26"
  post_content_filtered: ""
  post_parent: 441
  guid: "http://jens.mooseyard.com/2011/08/441-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 444
  post_author: 2
  post_date: "2011-08-10 09:58:38"
  post_date_gmt: "2011-08-10 16:58:38"
  post_content: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion.\n\nbq. On the heels of its inaugural CouchConf developer conference, held July 29 in San Francisco with more than 300 attendees from around the world, Couchbase announced a Series C round of financing, bringing the companyâ€™s total funding to $30 million.\n\n\"CouchConf\":http://www.couchbase.com/couchconf (on the 29th) was a great time. I really enjoyed meeting developers, and learning more about Couchbase from the other presentations. The slides from my own talk on Couchbase Mobile for iOS are \"now online\":hhttp://www.slideshare.net/Couchbase/couchconfsfdevelopingnativeiosappswithcouchbasemobile (minus the gratuitous Keynote transitions) if you'd like to take a look."
  post_title: "Couchbase news (and my preso)"
  post_excerpt: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "441-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-08-10 09:58:38"
  post_modified_gmt: "2011-08-10 16:58:38"
  post_content_filtered: ""
  post_parent: 441
  guid: "http://jens.mooseyard.com/2011/08/441-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 445
  post_author: 2
  post_date: "2011-08-10 09:58:39"
  post_date_gmt: "2011-08-10 16:58:39"
  post_content: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion.\n\nbq. On the heels of its inaugural CouchConf developer conference, held July 29 in San Francisco with more than 300 attendees from around the world, Couchbase announced a Series C round of financing, bringing the companyâ€™s total funding to $30 million.\n\n\"CouchConf\":http://www.couchbase.com/couchconf (on the 29th) was a great time. I really enjoyed meeting developers, and learning more about Couchbase from the other presentations. The slides from my own talk on Couchbase Mobile for iOS are \"now online\":hhttp://www.slideshare.net/Couchbase/couchconfsfdevelopingnativeiosappswithcouchbasemobile (minus the gratuitous Keynote transitions) if you'd like to take a look."
  post_title: "Couchbase news (and my preso)"
  post_excerpt: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "441-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2011-08-10 09:58:39"
  post_modified_gmt: "2011-08-10 16:58:39"
  post_content_filtered: ""
  post_parent: 441
  guid: "http://jens.mooseyard.com/2011/08/441-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 446
  post_author: 2
  post_date: "2011-08-10 09:59:13"
  post_date_gmt: "2011-08-10 16:59:13"
  post_content: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion.\n\nbq. On the heels of its inaugural CouchConf developer conference, held July 29 in San Francisco with more than 300 attendees from around the world, Couchbase announced a Series C round of financing, bringing the companyâ€™s total funding to $30 million.\n\n\"CouchConf\":http://www.couchbase.com/couchconf was a great time. I really enjoyed meeting developers, and learning more about Couchbase from the other presentations. The slides from my own talk on Couchbase Mobile for iOS are \"now online\":hhttp://www.slideshare.net/Couchbase/couchconfsfdevelopingnativeiosappswithcouchbasemobile (minus the gratuitous Keynote transitions) if you'd like to take a look."
  post_title: "Couchbase news (and my preso)"
  post_excerpt: "\"My new employer is doing well\":http://www.couchbase.com/press-releases/couchbase-series-C:\n\nbq. MOUNTAIN VIEW, Calif. â€“ August 10, 2011 â€“ Couchbase, the leading NoSQL database company, today announced it has secured $14 million in a Series C round of financing led by venture capital firm Ignition Partners with participation from the companyâ€™s existing investors Accel Partners, Mayfield Fund, and North Bridge Venture Partners. The company has also reserved an additional $1 million for investment from strategic customers and partners. The new funding will be used to further invest in NoSQL product development, support the adoption and growth of Couchbase in enterprise organizations, and support international expansion."
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "441-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2011-08-10 09:59:13"
  post_modified_gmt: "2011-08-10 16:59:13"
  post_content_filtered: ""
  post_parent: 441
  guid: "http://jens.mooseyard.com/2011/08/441-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 447
  post_author: 2
  post_date: "2011-11-10 14:13:07"
  post_date_gmt: "2011-11-10 22:13:07"
  post_content: "I gave another talk about Couchbase/CouchDB at the \"Keeping It Realtime conference\":http://krtconf.com this week in Portland. This one is titled <i>\"_ch_ch_changes: CouchDB/Couchbase Notifications And Replications\"</i>, and \"the slides are now up on slideshare\":http://www.slideshare.net/Couchbase/keeping-itrealtimechchchanges.\n\nI had a great time. The conference itself was pretty exciting, even if some of the content was over my head (I'm not primarily a web developer, server-side isn't how I roll, and I've only just started learning about node.js this week!) Plus: Portland. OMG, I love Portland."
  post_title: "My presentation from Keeping It Realtime"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "my-presentation-from-keeping-it-realtime"
  to_ping: ""
  pinged: ""
  post_modified: "2011-11-10 14:13:39"
  post_modified_gmt: "2011-11-10 22:13:39"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=447"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
-
  ID: 448
  post_author: 2
  post_date: "2011-11-10 14:13:07"
  post_date_gmt: "2011-11-10 22:13:07"
  post_content: "I gave another talk about Couchbase/CouchDB at the \"Keeping It Realtime conference\":http://krtconf.com this week in Portland. This one is titled _\"_ch_ch_changes: CouchDB/Couchbase Notifications And Replications\"_, and \"the slides are now up on slideshare\":http://www.slideshare.net/Couchbase/keeping-itrealtimechchchanges.\n\nI had a great time. The conference itself was pretty exciting, even if some of the content was over my head (I'm not primarily a web developer, server-side isn't how I roll, and I've only just started learning about node.js this week!) Plus: Portland. OMG, I love Portland."
  post_title: "My presentation from Keeping It Realtime"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "447-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-11-10 14:13:07"
  post_modified_gmt: "2011-11-10 22:13:07"
  post_content_filtered: ""
  post_parent: 447
  guid: "http://jens.mooseyard.com/2011/11/447-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 449
  post_author: 2
  post_date: "2011-11-10 14:13:08"
  post_date_gmt: "2011-11-10 22:13:08"
  post_content: "I gave another talk about Couchbase/CouchDB at the \"Keeping It Realtime conference\":http://krtconf.com this week in Portland. This one is titled _\"_ch_ch_changes: CouchDB/Couchbase Notifications And Replications\"_, and \"the slides are now up on slideshare\":http://www.slideshare.net/Couchbase/keeping-itrealtimechchchanges.\n\nI had a great time. The conference itself was pretty exciting, even if some of the content was over my head (I'm not primarily a web developer, server-side isn't how I roll, and I've only just started learning about node.js this week!) Plus: Portland. OMG, I love Portland."
  post_title: "My presentation from Keeping It Realtime"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "447-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-11-10 14:13:08"
  post_modified_gmt: "2011-11-10 22:13:08"
  post_content_filtered: ""
  post_parent: 447
  guid: "http://jens.mooseyard.com/2011/11/447-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 450
  post_author: 2
  post_date: "2011-11-10 14:13:37"
  post_date_gmt: "2011-11-10 22:13:37"
  post_content: "I gave another talk about Couchbase/CouchDB at the \"Keeping It Realtime conference\":http://krtconf.com this week in Portland. This one is titled <i>\"_ch_ch_changes: CouchDB/Couchbase Notifications And Replications\"</i>, and \"the slides are now up on slideshare\":http://www.slideshare.net/Couchbase/keeping-itrealtimechchchanges.\n\nI had a great time. The conference itself was pretty exciting, even if some of the content was over my head (I'm not primarily a web developer, server-side isn't how I roll, and I've only just started learning about node.js this week!) Plus: Portland. OMG, I love Portland."
  post_title: "My presentation from Keeping It Realtime"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "447-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-11-10 14:13:37"
  post_modified_gmt: "2011-11-10 22:13:37"
  post_content_filtered: ""
  post_parent: 447
  guid: "http://jens.mooseyard.com/2011/11/447-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 464
  post_author: 2
  post_date: "2012-01-19 10:29:26"
  post_date_gmt: "2012-01-19 18:29:26"
  post_content: "I gave a webcast last month for O'Reilly, and \"it's up on YouTube now\":http://www.youtube.com/watch?v=U4h90TgWan0 so you can watch it at your leisure. Here's the abstract:\n\nbq. It can be very liberating to store your Couchbase app's data as free-form dictionaries, free of the rigid schema of a relational database. But there's a lot to be said for the syntactic comforts and conveniences of modeling your data as native Cocoa objects with predeclared @properties, the way CoreData does. Don't fret - the CouchCocoa framework lets you do both, even in the same database. During this webcast I'll show you how to acquire the glamor of an object model, while still letting your NoSQL freak-flag fly."
  post_title: "\"Getting Into Modeling With CouchCocoa\""
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "getting-into-modeling-with-couchcocoa"
  to_ping: ""
  pinged: ""
  post_modified: "2012-01-19 10:29:28"
  post_modified_gmt: "2012-01-19 18:29:28"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=464"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 452
  post_author: 2
  post_date: "2011-12-19 11:20:07"
  post_date_gmt: "2011-12-19 19:20:07"
  post_content: "[I just posted this to the Couchbase Mobile community mailing list.]\n\n\"*TouchDB*\":https://github.com/couchbaselabs/TouchDB-iOS/ is a project Iâ€™ve been feverishly working on for a few weeks. Itâ€™s an investigation into the feasibility of a CouchDB-compatible database rewritten from the ground up for mobile apps. The comparison I like to make is that â€œif CouchDB is MySQL, then TouchDB is SQLiteâ€. In fact, it uses SQLite as its underlying storage engine. You can read a \"longer justification for it\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Why-TouchDB%3F on its wiki, as well as an \"FAQ\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/FAQ and \"design document\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Object-Design-And-Schema.\n\nâ€” It speaks CouchDBâ€™s replication protocol. Iâ€™m pretty serious about that; Iâ€™m even \"documenting the protocol\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm. \nâ€” It also understands a large subset of the REST API, enough so that it works with CouchCocoa. Iâ€™ve got a clone of Grocery Sync working as one of the demo apps in the project.\nâ€” The current implementation is for iOS. If the investigation pans out weâ€™ll port it to Android, and possibly other platforms.\n\nTouchDB is certainly not ready for prime-time yet, but here are some current statistics to whet your appetite:\nâ€¢ Code size of an â€˜emptyâ€™ iOS app with nothing in it but TouchDB: ~150k.\nâ€¢ Time to initialize TouchDB and open a database, on iPad 2: ~100ms (cold) or ~60ms (warm).\nâ€¢ Size of source code: ~4000 lines of Objective-C (plus another ~2500 lines from some existing utility libraries.)\n\nWhatâ€™s left to do? Probably a lot â€” that infamous â€œsecond 90%â€. Prominently:\nâ€¢ Attachments\nâ€¢ Reduce functions and grouping\nâ€¢ Filters for views and replication\nâ€¢ Performance tuning\nSee the \"issue tracker\":https://github.com/couchbaselabs/TouchDB-iOS/issues for more.\n\nSo, what does this mean for Couchbase Mobile? Honestly, we donâ€™t know yet. It may be that TouchDB turns out to be so awesome that it replaces embedded-CouchDB entirely in Couchbase Mobile on iOS and Android. It may be that there are still scenarios where embedded-CouchDB works better and is worth the extra overhead for some developers, in which case weâ€™ll still support it. This is not a product announcement; itâ€™s a technical announcement of something that isnâ€™t a product yet, because we like to do our development in the open. Weâ€™d love your feedback or even contributions."
  post_title: "Announcing TouchDB"
  post_excerpt: ""
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "announcing-touchdb"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-19 11:23:01"
  post_modified_gmt: "2011-12-19 19:23:01"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=452"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 5
-
  ID: 453
  post_author: 2
  post_date: "2011-12-19 11:20:07"
  post_date_gmt: "2011-12-19 19:20:07"
  post_content: "[I just posted this to the Couchbase Mobile community mailing list.]\n\n\"*TouchDB*\":https://github.com/couchbaselabs/TouchDB-iOS/ is a project Iâ€™ve been feverishly working on for a few weeks. Itâ€™s an investigation into the feasibility of a CouchDB-compatible database rewritten from the ground up for mobile apps. The comparison I like to make is that â€œif CouchDB is MySQL, then TouchDB is SQLiteâ€. In fact, it uses SQLite as its underlying storage engine. You can read a \"longer justification for it\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Why-TouchDB? on its wiki, as well as an \"FAQ\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/FAQ and \"design document\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Object-Design-And-Schema.\n\nâ€” It speaks CouchDBâ€™s replication protocol. Iâ€™m pretty serious about that; Iâ€™m even \"documenting the protocol\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm. \nâ€” It also understands a large subset of the REST API, enough so that it works with CouchCocoa. Iâ€™ve got a clone of Grocery Sync working as one of the demo apps in the project.\nâ€” The current implementation is for iOS. If the investigation pans out weâ€™ll port it to Android, and possibly other platforms.\n\nTouchDB is certainly not ready for prime-time yet, but here are some current statistics to whet your appetite:\nâ€¢ Code size of an â€˜emptyâ€™ iOS app with nothing in it but TouchDB: *~150k*\nâ€¢ Time to initialize TouchDB and open a database, on iPad 2: *~100ms* (cold) or ~60ms (warm)\nâ€¢ Size of source code: *~4000 lines* of Objective-C (plus another ~2500 lines from some existing utility libraries)\n\nWhatâ€™s left to do? Probably a lot â€” that infamous â€œsecond 90%â€. Prominently:\nâ€¢ Attachments\nâ€¢ Reduce functions and grouping\nâ€¢ Filters for views and replication\nâ€¢ Performance tuning\nSee the \"issue tracker\":https://github.com/couchbaselabs/TouchDB-iOS/issues for more.\n\nSo, what does this mean for Couchbase Mobile? Honestly, we donâ€™t know yet. It may be that TouchDB turns out to be so awesome that it replaces embedded-CouchDB entirely in Couchbase Mobile on iOS and Android. It may be that there are still scenarios where embedded-CouchDB works better and is worth the extra overhead for some developers, in which case weâ€™ll still support it. This is not a product announcement; itâ€™s a technical announcement of something that isnâ€™t a product yet, because we like to do our development in the open. Weâ€™d love your feedback or even contributions."
  post_title: "Announcing TouchDB"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "452-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-19 11:20:07"
  post_modified_gmt: "2011-12-19 19:20:07"
  post_content_filtered: ""
  post_parent: 452
  guid: "http://jens.mooseyard.com/2011/12/452-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 454
  post_author: 2
  post_date: "2011-12-19 11:20:08"
  post_date_gmt: "2011-12-19 19:20:08"
  post_content: "[I just posted this to the Couchbase Mobile community mailing list.]\n\n\"*TouchDB*\":https://github.com/couchbaselabs/TouchDB-iOS/ is a project Iâ€™ve been feverishly working on for a few weeks. Itâ€™s an investigation into the feasibility of a CouchDB-compatible database rewritten from the ground up for mobile apps. The comparison I like to make is that â€œif CouchDB is MySQL, then TouchDB is SQLiteâ€. In fact, it uses SQLite as its underlying storage engine. You can read a \"longer justification for it\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Why-TouchDB? on its wiki, as well as an \"FAQ\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/FAQ and \"design document\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Object-Design-And-Schema.\n\nâ€” It speaks CouchDBâ€™s replication protocol. Iâ€™m pretty serious about that; Iâ€™m even \"documenting the protocol\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm. \nâ€” It also understands a large subset of the REST API, enough so that it works with CouchCocoa. Iâ€™ve got a clone of Grocery Sync working as one of the demo apps in the project.\nâ€” The current implementation is for iOS. If the investigation pans out weâ€™ll port it to Android, and possibly other platforms.\n\nTouchDB is certainly not ready for prime-time yet, but here are some current statistics to whet your appetite:\nâ€¢ Code size of an â€˜emptyâ€™ iOS app with nothing in it but TouchDB: *~150k*\nâ€¢ Time to initialize TouchDB and open a database, on iPad 2: *~100ms* (cold) or ~60ms (warm)\nâ€¢ Size of source code: *~4000 lines* of Objective-C (plus another ~2500 lines from some existing utility libraries)\n\nWhatâ€™s left to do? Probably a lot â€” that infamous â€œsecond 90%â€. Prominently:\nâ€¢ Attachments\nâ€¢ Reduce functions and grouping\nâ€¢ Filters for views and replication\nâ€¢ Performance tuning\nSee the \"issue tracker\":https://github.com/couchbaselabs/TouchDB-iOS/issues for more.\n\nSo, what does this mean for Couchbase Mobile? Honestly, we donâ€™t know yet. It may be that TouchDB turns out to be so awesome that it replaces embedded-CouchDB entirely in Couchbase Mobile on iOS and Android. It may be that there are still scenarios where embedded-CouchDB works better and is worth the extra overhead for some developers, in which case weâ€™ll still support it. This is not a product announcement; itâ€™s a technical announcement of something that isnâ€™t a product yet, because we like to do our development in the open. Weâ€™d love your feedback or even contributions."
  post_title: "Announcing TouchDB"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "452-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-19 11:20:08"
  post_modified_gmt: "2011-12-19 19:20:08"
  post_content_filtered: ""
  post_parent: 452
  guid: "http://jens.mooseyard.com/2011/12/452-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 455
  post_author: 2
  post_date: "2011-12-19 11:20:54"
  post_date_gmt: "2011-12-19 19:20:54"
  post_content: "[I just posted this to the Couchbase Mobile community mailing list.]\n\n\"*TouchDB*\":https://github.com/couchbaselabs/TouchDB-iOS/ is a project Iâ€™ve been feverishly working on for a few weeks. Itâ€™s an investigation into the feasibility of a CouchDB-compatible database rewritten from the ground up for mobile apps. The comparison I like to make is that â€œif CouchDB is MySQL, then TouchDB is SQLiteâ€. In fact, it uses SQLite as its underlying storage engine. You can read a \"longer justification for it\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Why-TouchDB%3F on its wiki, as well as an \"FAQ\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/FAQ and \"design document\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Object-Design-And-Schema.\n\nâ€” It speaks CouchDBâ€™s replication protocol. Iâ€™m pretty serious about that; Iâ€™m even \"documenting the protocol\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm. \nâ€” It also understands a large subset of the REST API, enough so that it works with CouchCocoa. Iâ€™ve got a clone of Grocery Sync working as one of the demo apps in the project.\nâ€” The current implementation is for iOS. If the investigation pans out weâ€™ll port it to Android, and possibly other platforms.\n\nTouchDB is certainly not ready for prime-time yet, but here are some current statistics to whet your appetite:\nâ€¢ Code size of an â€˜emptyâ€™ iOS app with nothing in it but TouchDB: *~150k*\nâ€¢ Time to initialize TouchDB and open a database, on iPad 2: *~100ms* (cold) or ~60ms (warm)\nâ€¢ Size of source code: *~4000 lines* of Objective-C (plus another ~2500 lines from some existing utility libraries)\n\nWhatâ€™s left to do? Probably a lot â€” that infamous â€œsecond 90%â€. Prominently:\nâ€¢ Attachments\nâ€¢ Reduce functions and grouping\nâ€¢ Filters for views and replication\nâ€¢ Performance tuning\nSee the \"issue tracker\":https://github.com/couchbaselabs/TouchDB-iOS/issues for more.\n\nSo, what does this mean for Couchbase Mobile? Honestly, we donâ€™t know yet. It may be that TouchDB turns out to be so awesome that it replaces embedded-CouchDB entirely in Couchbase Mobile on iOS and Android. It may be that there are still scenarios where embedded-CouchDB works better and is worth the extra overhead for some developers, in which case weâ€™ll still support it. This is not a product announcement; itâ€™s a technical announcement of something that isnâ€™t a product yet, because we like to do our development in the open. Weâ€™d love your feedback or even contributions."
  post_title: "Announcing TouchDB"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "452-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-19 11:20:54"
  post_modified_gmt: "2011-12-19 19:20:54"
  post_content_filtered: ""
  post_parent: 452
  guid: "http://jens.mooseyard.com/2011/12/452-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 456
  post_author: 2
  post_date: "2011-12-19 11:20:55"
  post_date_gmt: "2011-12-19 19:20:55"
  post_content: "[I just posted this to the Couchbase Mobile community mailing list.]\n\n\"*TouchDB*\":https://github.com/couchbaselabs/TouchDB-iOS/ is a project Iâ€™ve been feverishly working on for a few weeks. Itâ€™s an investigation into the feasibility of a CouchDB-compatible database rewritten from the ground up for mobile apps. The comparison I like to make is that â€œif CouchDB is MySQL, then TouchDB is SQLiteâ€. In fact, it uses SQLite as its underlying storage engine. You can read a \"longer justification for it\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Why-TouchDB%3F on its wiki, as well as an \"FAQ\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/FAQ and \"design document\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Object-Design-And-Schema.\n\nâ€” It speaks CouchDBâ€™s replication protocol. Iâ€™m pretty serious about that; Iâ€™m even \"documenting the protocol\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm. \nâ€” It also understands a large subset of the REST API, enough so that it works with CouchCocoa. Iâ€™ve got a clone of Grocery Sync working as one of the demo apps in the project.\nâ€” The current implementation is for iOS. If the investigation pans out weâ€™ll port it to Android, and possibly other platforms.\n\nTouchDB is certainly not ready for prime-time yet, but here are some current statistics to whet your appetite:\nâ€¢ Code size of an â€˜emptyâ€™ iOS app with nothing in it but TouchDB: *~150k*\nâ€¢ Time to initialize TouchDB and open a database, on iPad 2: *~100ms* (cold) or ~60ms (warm)\nâ€¢ Size of source code: *~4000 lines* of Objective-C (plus another ~2500 lines from some existing utility libraries)\n\nWhatâ€™s left to do? Probably a lot â€” that infamous â€œsecond 90%â€. Prominently:\nâ€¢ Attachments\nâ€¢ Reduce functions and grouping\nâ€¢ Filters for views and replication\nâ€¢ Performance tuning\nSee the \"issue tracker\":https://github.com/couchbaselabs/TouchDB-iOS/issues for more.\n\nSo, what does this mean for Couchbase Mobile? Honestly, we donâ€™t know yet. It may be that TouchDB turns out to be so awesome that it replaces embedded-CouchDB entirely in Couchbase Mobile on iOS and Android. It may be that there are still scenarios where embedded-CouchDB works better and is worth the extra overhead for some developers, in which case weâ€™ll still support it. This is not a product announcement; itâ€™s a technical announcement of something that isnâ€™t a product yet, because we like to do our development in the open. Weâ€™d love your feedback or even contributions."
  post_title: "Announcing TouchDB"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "452-revision-4"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-19 11:20:55"
  post_modified_gmt: "2011-12-19 19:20:55"
  post_content_filtered: ""
  post_parent: 452
  guid: "http://jens.mooseyard.com/2011/12/452-revision-4/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 457
  post_author: 2
  post_date: "2011-12-19 11:22:06"
  post_date_gmt: "2011-12-19 19:22:06"
  post_content: "[I just posted this to the Couchbase Mobile community mailing list.]\n\n\"*TouchDB*\":https://github.com/couchbaselabs/TouchDB-iOS/ is a project Iâ€™ve been feverishly working on for a few weeks. Itâ€™s an investigation into the feasibility of a CouchDB-compatible database rewritten from the ground up for mobile apps. The comparison I like to make is that â€œif CouchDB is MySQL, then TouchDB is SQLiteâ€. In fact, it uses SQLite as its underlying storage engine. You can read a \"longer justification for it\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Why-TouchDB%3F on its wiki, as well as an \"FAQ\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/FAQ and \"design document\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Object-Design-And-Schema.\n\nâ€” It speaks CouchDBâ€™s replication protocol. Iâ€™m pretty serious about that; Iâ€™m even \"documenting the protocol\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm. \nâ€” It also understands a large subset of the REST API, enough so that it works with CouchCocoa. Iâ€™ve got a clone of Grocery Sync working as one of the demo apps in the project.\nâ€” The current implementation is for iOS. If the investigation pans out weâ€™ll port it to Android, and possibly other platforms.\n\nTouchDB is certainly not ready for prime-time yet, but here are some current statistics to whet your appetite:\nâ€¢ Code size of an â€˜emptyâ€™ iOS app with nothing in it but TouchDB: ~*150k*\nâ€¢ Time to initialize TouchDB and open a database, on iPad 2: ~*100ms* (cold) or ~60ms (warm)\nâ€¢ Size of source code: ~*4000 lines* of Objective-C (plus another ~2500 lines from some existing utility libraries)\n\nWhatâ€™s left to do? Probably a lot â€” that infamous â€œsecond 90%â€. Prominently:\nâ€¢ Attachments\nâ€¢ Reduce functions and grouping\nâ€¢ Filters for views and replication\nâ€¢ Performance tuning\nSee the \"issue tracker\":https://github.com/couchbaselabs/TouchDB-iOS/issues for more.\n\nSo, what does this mean for Couchbase Mobile? Honestly, we donâ€™t know yet. It may be that TouchDB turns out to be so awesome that it replaces embedded-CouchDB entirely in Couchbase Mobile on iOS and Android. It may be that there are still scenarios where embedded-CouchDB works better and is worth the extra overhead for some developers, in which case weâ€™ll still support it. This is not a product announcement; itâ€™s a technical announcement of something that isnâ€™t a product yet, because we like to do our development in the open. Weâ€™d love your feedback or even contributions."
  post_title: "Announcing TouchDB"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "452-revision-5"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-19 11:22:06"
  post_modified_gmt: "2011-12-19 19:22:06"
  post_content_filtered: ""
  post_parent: 452
  guid: "http://jens.mooseyard.com/2011/12/452-revision-5/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 458
  post_author: 2
  post_date: "2011-12-19 11:22:08"
  post_date_gmt: "2011-12-19 19:22:08"
  post_content: "[I just posted this to the Couchbase Mobile community mailing list.]\n\n\"*TouchDB*\":https://github.com/couchbaselabs/TouchDB-iOS/ is a project Iâ€™ve been feverishly working on for a few weeks. Itâ€™s an investigation into the feasibility of a CouchDB-compatible database rewritten from the ground up for mobile apps. The comparison I like to make is that â€œif CouchDB is MySQL, then TouchDB is SQLiteâ€. In fact, it uses SQLite as its underlying storage engine. You can read a \"longer justification for it\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Why-TouchDB%3F on its wiki, as well as an \"FAQ\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/FAQ and \"design document\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Object-Design-And-Schema.\n\nâ€” It speaks CouchDBâ€™s replication protocol. Iâ€™m pretty serious about that; Iâ€™m even \"documenting the protocol\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm. \nâ€” It also understands a large subset of the REST API, enough so that it works with CouchCocoa. Iâ€™ve got a clone of Grocery Sync working as one of the demo apps in the project.\nâ€” The current implementation is for iOS. If the investigation pans out weâ€™ll port it to Android, and possibly other platforms.\n\nTouchDB is certainly not ready for prime-time yet, but here are some current statistics to whet your appetite:\nâ€¢ Code size of an â€˜emptyâ€™ iOS app with nothing in it but TouchDB: ~*150k*\nâ€¢ Time to initialize TouchDB and open a database, on iPad 2: ~*100ms* (cold) or ~60ms (warm)\nâ€¢ Size of source code: ~*4000 lines* of Objective-C (plus another ~2500 lines from some existing utility libraries)\n\nWhatâ€™s left to do? Probably a lot â€” that infamous â€œsecond 90%â€. Prominently:\nâ€¢ Attachments\nâ€¢ Reduce functions and grouping\nâ€¢ Filters for views and replication\nâ€¢ Performance tuning\nSee the \"issue tracker\":https://github.com/couchbaselabs/TouchDB-iOS/issues for more.\n\nSo, what does this mean for Couchbase Mobile? Honestly, we donâ€™t know yet. It may be that TouchDB turns out to be so awesome that it replaces embedded-CouchDB entirely in Couchbase Mobile on iOS and Android. It may be that there are still scenarios where embedded-CouchDB works better and is worth the extra overhead for some developers, in which case weâ€™ll still support it. This is not a product announcement; itâ€™s a technical announcement of something that isnâ€™t a product yet, because we like to do our development in the open. Weâ€™d love your feedback or even contributions."
  post_title: "Announcing TouchDB"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "452-revision-6"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-19 11:22:08"
  post_modified_gmt: "2011-12-19 19:22:08"
  post_content_filtered: ""
  post_parent: 452
  guid: "http://jens.mooseyard.com/2011/12/452-revision-6/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 459
  post_author: 2
  post_date: "2011-12-19 11:23:00"
  post_date_gmt: "2011-12-19 19:23:00"
  post_content: "[I just posted this to the Couchbase Mobile community mailing list.]\n\n\"*TouchDB*\":https://github.com/couchbaselabs/TouchDB-iOS/ is a project Iâ€™ve been feverishly working on for a few weeks. Itâ€™s an investigation into the feasibility of a CouchDB-compatible database rewritten from the ground up for mobile apps. The comparison I like to make is that â€œif CouchDB is MySQL, then TouchDB is SQLiteâ€. In fact, it uses SQLite as its underlying storage engine. You can read a \"longer justification for it\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Why-TouchDB%3F on its wiki, as well as an \"FAQ\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/FAQ and \"design document\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Object-Design-And-Schema.\n\nâ€” It speaks CouchDBâ€™s replication protocol. Iâ€™m pretty serious about that; Iâ€™m even \"documenting the protocol\":https://github.com/couchbaselabs/TouchDB-iOS/wiki/Replication-Algorithm. \nâ€” It also understands a large subset of the REST API, enough so that it works with CouchCocoa. Iâ€™ve got a clone of Grocery Sync working as one of the demo apps in the project.\nâ€” The current implementation is for iOS. If the investigation pans out weâ€™ll port it to Android, and possibly other platforms.\n\nTouchDB is certainly not ready for prime-time yet, but here are some current statistics to whet your appetite:\nâ€¢ Code size of an â€˜emptyâ€™ iOS app with nothing in it but TouchDB: ~150k.\nâ€¢ Time to initialize TouchDB and open a database, on iPad 2: ~100ms (cold) or ~60ms (warm).\nâ€¢ Size of source code: ~4000 lines of Objective-C (plus another ~2500 lines from some existing utility libraries.)\n\nWhatâ€™s left to do? Probably a lot â€” that infamous â€œsecond 90%â€. Prominently:\nâ€¢ Attachments\nâ€¢ Reduce functions and grouping\nâ€¢ Filters for views and replication\nâ€¢ Performance tuning\nSee the \"issue tracker\":https://github.com/couchbaselabs/TouchDB-iOS/issues for more.\n\nSo, what does this mean for Couchbase Mobile? Honestly, we donâ€™t know yet. It may be that TouchDB turns out to be so awesome that it replaces embedded-CouchDB entirely in Couchbase Mobile on iOS and Android. It may be that there are still scenarios where embedded-CouchDB works better and is worth the extra overhead for some developers, in which case weâ€™ll still support it. This is not a product announcement; itâ€™s a technical announcement of something that isnâ€™t a product yet, because we like to do our development in the open. Weâ€™d love your feedback or even contributions."
  post_title: "Announcing TouchDB"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "452-revision-7"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-19 11:23:00"
  post_modified_gmt: "2011-12-19 19:23:00"
  post_content_filtered: ""
  post_parent: 452
  guid: "http://jens.mooseyard.com/2011/12/452-revision-7/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 460
  post_author: 2
  post_date: "2011-12-27 22:44:53"
  post_date_gmt: "2011-12-28 06:44:53"
  post_content: "\"A new mix\":http://recordings.mooseyard.com/mub70, sequel to _Shiver 2_, sequel to _Shiver_. I hope you like it...\n\n<a href=\"http://recordings.mooseyard.com/mub70\"><img src=\"http://mooseyard.com/recordings/mub70/Cover.jpg\"></a>\n\n<a href=\"http://recordings.mooseyard.com/mub70\"><img src=\"http://mooseyard.com/recordings/mub70/Back.jpg\"></a>"
  post_title: "Shiver 3"
  post_excerpt: "\"A new mix\":http://recordings.mooseyard.com/mub70, sequel to _Shiver 2_, sequel to _Shiver_. I hope you like it...\n\n\"!http://mooseyard.com/recordings/mub70/Cover.jpg!\":http://recordings.mooseyard.com/mub70"
  post_status: "publish"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "shiver-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-27 22:46:33"
  post_modified_gmt: "2011-12-28 06:46:33"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=460"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 1
-
  ID: 461
  post_author: 2
  post_date: "2011-12-27 22:44:53"
  post_date_gmt: "2011-12-28 06:44:53"
  post_content: "\"A new mix\":http://recordings.mooseyard.com/mub70, sequel to _Shiver 2_, sequel to _Shiver_. I hope you like it...\n\n\"!http://mooseyard.com/recordings/mub70/Cover.jpg!\":http://recordings.mooseyard.com/mub70\n\n\"!http://mooseyard.com/recordings/mub70/Back.jpg!\":http://recordings.mooseyard.com/mub70"
  post_title: "Shiver 3"
  post_excerpt: "\"A new mix\":http://recordings.mooseyard.com/mub70, sequel to _Shiver 2_, sequel to _Shiver_. I hope you like it...\n\n\"!http://mooseyard.com/recordings/mub70/Cover.jpg!\":http://recordings.mooseyard.com/mub70"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "460-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-27 22:44:53"
  post_modified_gmt: "2011-12-28 06:44:53"
  post_content_filtered: ""
  post_parent: 460
  guid: "http://jens.mooseyard.com/2011/12/460-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 462
  post_author: 2
  post_date: "2011-12-27 22:44:55"
  post_date_gmt: "2011-12-28 06:44:55"
  post_content: "\"A new mix\":http://recordings.mooseyard.com/mub70, sequel to _Shiver 2_, sequel to _Shiver_. I hope you like it...\n\n\"!http://mooseyard.com/recordings/mub70/Cover.jpg!\":http://recordings.mooseyard.com/mub70\n\n\"!http://mooseyard.com/recordings/mub70/Back.jpg!\":http://recordings.mooseyard.com/mub70"
  post_title: "Shiver 3"
  post_excerpt: "\"A new mix\":http://recordings.mooseyard.com/mub70, sequel to _Shiver 2_, sequel to _Shiver_. I hope you like it...\n\n\"!http://mooseyard.com/recordings/mub70/Cover.jpg!\":http://recordings.mooseyard.com/mub70"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "460-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-27 22:44:55"
  post_modified_gmt: "2011-12-28 06:44:55"
  post_content_filtered: ""
  post_parent: 460
  guid: "http://jens.mooseyard.com/2011/12/460-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 463
  post_author: 2
  post_date: "2011-12-27 22:46:31"
  post_date_gmt: "2011-12-28 06:46:31"
  post_content: "\"A new mix\":http://recordings.mooseyard.com/mub70, sequel to _Shiver 2_, sequel to _Shiver_. I hope you like it...\n\n<a href=\"http://recordings.mooseyard.com/mub70\"><img src=\"http://mooseyard.com/recordings/mub70/Cover.jpg\"></a>\n\n<a href=\"http://recordings.mooseyard.com/mub70\"><img src=\"http://mooseyard.com/recordings/mub70/Back.jpg\"></a>"
  post_title: "Shiver 3"
  post_excerpt: "\"A new mix\":http://recordings.mooseyard.com/mub70, sequel to _Shiver 2_, sequel to _Shiver_. I hope you like it...\n\n\"!http://mooseyard.com/recordings/mub70/Cover.jpg!\":http://recordings.mooseyard.com/mub70"
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "460-revision-3"
  to_ping: ""
  pinged: ""
  post_modified: "2011-12-27 22:46:31"
  post_modified_gmt: "2011-12-28 06:46:31"
  post_content_filtered: ""
  post_parent: 460
  guid: "http://jens.mooseyard.com/2011/12/460-revision-3/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 465
  post_author: 2
  post_date: "2012-01-19 10:29:26"
  post_date_gmt: "2012-01-19 18:29:26"
  post_content: ""
  post_title: "Auto Draft"
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "464-revision"
  to_ping: ""
  pinged: ""
  post_modified: "2012-01-19 10:29:26"
  post_modified_gmt: "2012-01-19 18:29:26"
  post_content_filtered: ""
  post_parent: 464
  guid: "http://jens.mooseyard.com/2012/01/464-revision/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 466
  post_author: 2
  post_date: "2012-01-19 10:29:26"
  post_date_gmt: "2012-01-19 18:29:26"
  post_content: "I gave a webcast last month for O'Reilly, and \"it's up on YouTube now\":http://www.youtube.com/watch?v=U4h90TgWan0 so you can watch it at your leisure. Here's the abstract:\n\nbq. It can be very liberating to store your Couchbase app's data as free-form dictionaries, free of the rigid schema of a relational database. But there's a lot to be said for the syntactic comforts and conveniences of modeling your data as native Cocoa objects with predeclared @properties, the way CoreData does. Don't fret - the CouchCocoa framework lets you do both, even in the same database. During this webcast I'll show you how to acquire the glamor of an object model, while still letting your NoSQL freak-flag fly."
  post_title: "\"Getting Into Modeling With CouchCocoa\""
  post_excerpt: ""
  post_status: "inherit"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: "464-revision-2"
  to_ping: ""
  pinged: ""
  post_modified: "2012-01-19 10:29:26"
  post_modified_gmt: "2012-01-19 18:29:26"
  post_content_filtered: ""
  post_parent: 464
  guid: "http://jens.mooseyard.com/2012/01/464-revision-2/"
  menu_order: 0
  post_type: "revision"
  post_mime_type: ""
  comment_count: 0
-
  ID: 467
  post_author: 2
  post_date: "2012-01-22 10:21:00"
  post_date_gmt: "0000-00-00 00:00:00"
  post_content: ""
  post_title: "Auto Draft"
  post_excerpt: ""
  post_status: "auto-draft"
  comment_status: "open"
  ping_status: "closed"
  post_password: ""
  post_name: ""
  to_ping: ""
  pinged: ""
  post_modified: "2012-01-22 10:21:00"
  post_modified_gmt: "0000-00-00 00:00:00"
  post_content_filtered: ""
  post_parent: 0
  guid: "http://jens.mooseyard.com/?p=467"
  menu_order: 0
  post_type: "post"
  post_mime_type: ""
  comment_count: 0
...
