---
layout: post
title: "Dudes, this is so not REST"
---
The "documentation for Rdio's new API":http://developer.rdio.com/docs/REST/ begins:

bq. It's simple to make requests to *Rdio's REST API*. Itâ€™s built on widely used standards and conventions so there are libraries for most common web development platforms. *All method calls are made as POST requests* to *http://api.rdio.com/1/*. Arguments are sent as application/x-www-form-urlencoded, just like when a browser submits a form. *The name of the method is passed as the 'method' argument.* _[Emphasis mine.]_

What's wrong with this? Well, the first bolded point is immediately contradicted by the ones that follow. Specifically, this cannot be a REST API, because it uses only one URL and one HTTP method. Two of the key features of HTTP-based "REST":http://en.wikipedia.org/wiki/Representational_State_Transfer#Central_principle are that

# It's object-oriented, where objects are identified by URLs. Each request's URL identifies what object it operates on.
# The methods to invoke on the objects are primarily indicated by the request's method (GET, PUT, POST, DELETE). In fact this is why Tim Berners-Lee used the word "method" in the HTTP protocol in the first place.

So in a real REST API there would be a URL representing "my friends", and a client could GET that URL to retrieve a list of friends, POST to it to add a friend (resulting in a new URL/resource representing that friend), PUT to a friend's URL to update details, and DELETE to that URL to remove the friend relation. Instead, the actual Rdio API has "a couple of dozen ad-hoc verbs":http://developer.rdio.com/docs/read/rest/Methods including "addFriend" and "removeFriend". I didn't see one to get a list of friends or get info about a friend, but there is an Rdio-specific "get" verb that might work for those things. "Get" seems nicely general, but then for some reason there are also _sixteen_ other specific getters ranging from "getActivityStream" to "getTracksInCollection".

So it's clear that Rdio's "REST" API, like many other recent "REST" APIs such as DropBox's*, isn't REST at all. It's more of an ad-hoc RPC scheme, which is ironic because there's traditionally been a lot of enmity between REST proponents vs. those of RPC protocols like XML-RPC and SOAP. The SOAP boffins must be chortling behind their WSDLs at this.

Maybe we should just give up on the term REST, since it's become so diluted as to mean nothing more than "HTTP API that's not as hard to use as SOAP"?

 * The hacky DropBox API especially annoys me because there's already a "perfectly good standardized and widely adopted REST API":http://en.wikipedia.org/wiki/Webdav for most of what DropBox does.